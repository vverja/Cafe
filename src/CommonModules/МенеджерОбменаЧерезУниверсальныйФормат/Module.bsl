// Конвертация BASЕРП от 26.03.2020 14:15:09
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПередКонвертациейУТКАУП(КомпонентыОбмена);
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	//	ПослеКонвертацииУТКАУП(КомпонентыОбмена);
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	//
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтКлиента(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеИзлишковТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеНедостачТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_УпаковкиЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратМеждуОрганизациями_Поставщику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратМеждуОрганизациями_ОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьВозвратПоставщику = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьВозвратОтПокупателя = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.ОрганизацияПолучатель) <> Неопределено;
		
	Иначе
		
		ВыгружатьВозвратПоставщику = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> Справочники.Организации.УправленческаяОрганизация;
			
		ВыгружатьВозвратОтПокупателя = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.ОрганизацияПолучатель <> Справочники.Организации.УправленческаяОрганизация;
		
	КонецЕсли;
	
	ИспользованиеПКО.ВозвратМеждуОрганизациями_Поставщику_Отправка = ВыгружатьВозвратПоставщику;
	ИспользованиеПКО.ВозвратМеждуОрганизациями_ОтПокупателя_Отправка = ВыгружатьВозвратОтПокупателя;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтКлиента(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтКлиента";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтКлиента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Провека на наличие записей в табличной части Товары.
	// Если табличная часть пустая, то документ не выгружается, иначе он не пройдет проверку по схеме.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И (Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		ИЛИ Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказКлиента;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	Товары.Сумма
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Отменено = ЛОЖЬ
		|	И Товары.Сумма = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Сумма
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ТаблицаТовары.Сумма = 0
		|	И &ВерсияФормата < &ВерсияФормата1_2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.Сумма
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И ТаблицаУслуги.Сумма = 0";
	
	Запрос.УстановитьПараметр("Ссылка",        ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена));
	Запрос.УстановитьПараметр("ВерсияФормата1_2", ВерсияФорматаЧислом("1.2"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаТовары = РезультатЗапроса[1].Выбрать(); // Сумма в Товарах - обязательна до версии 1.2.
	ВыборкаУслуги = РезультатЗапроса[2].Выбрать(); // Сумма в Услугах - обязательна для всех версий формата.
	ИспользованиеПКО.Документ_ЗаказКлиента_Отправка = НЕ (ВыборкаУслуги.Следующий() ИЛИ ВыборкаТовары.Следующий());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеИзлишковТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеИзлишковТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеИзлишковТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_ПТУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_РТУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		
		УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
		
		ВыгружатьПродажу = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.Организация) <> Неопределено;
		ВыгружатьПокупку = УзелСписокОрганизаций.НайтиПоЗначению(ДанныеИБ.ОрганизацияПолучатель) <> Неопределено;
		
	Иначе
		
		ВыгружатьПродажу = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.Организация <> Справочники.Организации.УправленческаяОрганизация;
			
		ВыгружатьПокупку = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию 
			Или ДанныеИБ.ОрганизацияПолучатель <> Справочники.Организации.УправленческаяОрганизация;
		
	КонецЕсли;
	
	ИспользованиеПКО.ПередачаМеждуОрганизациями_ПТУ_Отправка = ВыгружатьПокупку;
	ИспользованиеПКО.ПередачаМеждуОрганизациями_РТУ_Отправка = ВыгружатьПродажу;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка             = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = (ДанныеИБ.ВидыЗапасов.Количество() > 0);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров Тогда
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыЗапасов.НомерСтроки 												КАК НомерСтроки,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура 					КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика 					КАК Характеристика,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество 													КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код  								  				КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения  		           				КАК СтранаПроисхождения,
		|	КОНЕЦПЕРИОДА(ВидыЗапасов.Ссылка.Дата, ДЕНЬ) 							КАК ДатаПолученияЦены,
		|	ВидыЗапасов.Ссылка.ВидЦены 												КАК ВидЦены,
		|	ВидыЗапасов.Ссылка.ВидЦены.ВалютаЦены 									КАК ВалютаЦены,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ 																	КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ 																	КАК ТипЗапасовПолучателя
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыЦенНоменклатуры.НомерСтроки,
		|	ЦеныНоменклатуры.Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.НомерСтроки,
		|		ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|		ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
		|	ИЗ
		|		Товары КАК Товары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|			ПО Товары.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|				И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|				И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
		|				И Товары.ДатаПолученияЦены >= ЦеныНоменклатуры.Период
		|				И Товары.ВалютаЦены = ЦеныНоменклатуры.Валюта
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Товары.НомерСтроки,
		|		ЦеныНоменклатуры.ВидЦены,
		|		ЦеныНоменклатуры.Номенклатура,
		|		ЦеныНоменклатуры.Характеристика) КАК ПериодыЦенНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ПериодыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
		|			И ПериодыЦенНоменклатуры.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|			И ПериодыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ПериодыЦенНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(КурсыВалют.Период) КАК Период,
		|		КурсыВалют.Валюта КАК Валюта
		|	ИЗ
		|		Документ.ПеремещениеТоваров КАК ДокументыПеремещениеТоваров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|			ПО ДокументыПеремещениеТоваров.ВидЦены.ВалютаЦены = КурсыВалют.Валюта
		|				И ДокументыПеремещениеТоваров.Дата >= КурсыВалют.Период
		|	ГДЕ
		|		ДокументыПеремещениеТоваров.Ссылка = &Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КурсыВалют.Валюта) КАК ПериодыКурсовВалютПоДокументам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО ПериодыКурсовВалютПоДокументам.Период = КурсыВалют.Период
		|			И ПериодыКурсовВалютПоДокументам.Валюта = КурсыВалют.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура 		КАК Номенклатура,
		|	Товары.Характеристика 		КАК Характеристика,
		|	Товары.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
		|	Товары.Количество 			КАК Количество,
		|	Товары.НомерГТД 			КАК НомерГТД,
		|	Товары.СтранаПроисхождения  КАК СтранаПроисхождения,
		|	Товары.ТипЗапасов 			КАК ТипЗапасов,
		|	Товары.ТипЗапасовПолучателя КАК ТипЗапасовПолучателя,
		|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0)* ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК ЧИСЛО(15, 2)) * Товары.Количество КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО Истина
		|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
		|		ПО Товары.НомерСтроки = Цены.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	Иначе
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗВход_Отправка  = Ложь;
		ИспользованиеПКО.Документ_ВнутрПеремещение_АвизоМПЗИсход_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПересортицаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Истина;
	ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка      = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВидЦен", ДанныеИБ.ВидЦены);
	Запрос.УстановитьПараметр("РегВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НоменклатураОприходование КАК Номенклатура,
		|	Товары.ХарактеристикаОприходование КАК Характеристика,
		|	Товары.Номенклатура КАК НоменклатураСписание,
		|	Товары.Характеристика КАК ХарактеристикаСписание,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Цена * Товары.Количество КАК Сумма,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ПересортицаТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСписание,
		|	ХарактеристикаСписание";
	
	
	Запрос.Выполнить();
	
	Если ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
			|	* ВЫБОР
			|		КОГДА &РегВалюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Цена,
			|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
			|	ВременнаяТаблицаТовары.Коэффициент,
			|	ВременнаяТаблицаТовары.Количество,
			|	ВременнаяТаблицаТовары.НомерСтроки
			|ПОМЕСТИТЬ ПервичныеДанные
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Дата,
			|				ВидЦены = &ВидЦен
			|					И (Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ
			|							ВременнаяТаблицаТовары.НоменклатураСписание,
			|							ВременнаяТаблицаТовары.ХарактеристикаСписание
			|						ИЗ
			|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ВременнаяТаблицаТовары.НоменклатураСписание = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ВременнаяТаблицаТовары.ХарактеристикаСписание = ЦеныНоменклатурыСрезПоследних.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
			|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПервичныеДанные.Номенклатура,
			|	ПервичныеДанные.Характеристика,
			|	ВЫБОР
			|		КОГДА ПервичныеДанные.Цена < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.Цена КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК Цена,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ПервичныеДанные.Цена < 0.01
			|				ТОГДА 0.01
			|			ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.Цена КАК ЧИСЛО(15, 2))
			|		КОНЕЦ * ПервичныеДанные.Количество КАК ЧИСЛО(15, 2)) КАК Сумма,
			|	ПервичныеДанные.ЕдиницаИзмерения,
			|	ПервичныеДанные.Коэффициент,
			|	ПервичныеДанные.Количество,
			|	ПервичныеДанные.НомерСтроки
			|ИЗ
			|	ПервичныеДанные КАК ПервичныеДанные";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.ЕдиницаИзмерения",
			"ВременнаяТаблицаТовары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Дата",   ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВидЦен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Склад, "УчетныйВидЦены"));
		Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
			
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика,
			|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
			|	ВременнаяТаблицаТовары.Коэффициент,
			|	ВременнаяТаблицаТовары.Количество,
			|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Цена * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
			|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * ВЫБОР
			|		КОГДА &РегВалюта <> &УпрВалюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВременнаяТаблицаТовары.НомерСтроки";
		
	КонецЕсли;
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ЕстьПустая = Ложь;
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Не ЗначениеЗаполнено(Строка.Цена) Или Не ЗначениеЗаполнено(Строка.Сумма) Тогда
			ЕстьПустая = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПустая Тогда
		ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка      = Ложь; 	
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_ПересортицаВСписаниеЗапасов_Отправка = ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка;
		ИспользованиеПКО.Удалить("Документ_ПересортицаВСписание_Отправка");
	Иначе
		ИспользованиеПКО.Удалить("Документ_ПересортицаВСписаниеЗапасов_Отправка");
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", ТаблицаТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТУЧерезПодотчетноеЛицо_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
		ИспользованиеПКО.Документ_ПТУЧерезПодотчетноеЛицо_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеУслугПрочихАктивов_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеУслугПрочихАктивов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеУслугПрочихАктивов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПУПАЧерезПодотчетноеЛицо_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ИспользованиеПКО.Документ_ПоступлениеУслугПрочихАктивов_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПУПАЧерезПодотчетноеЛицо_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПоступлениеУслугПрочихАктивов_Отправка = Истина;
		ИспользованиеПКО.Документ_ПУПАЧерезПодотчетноеЛицо_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияУслугПрочихАктивов_Отправка
Процедура ДобавитьПОД_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияУслугПрочихАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияУслугПрочихАктивов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияУслугПрочихАктивов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров
Процедура ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СборкаТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаТоваров;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеНедостачТоваров
Процедура ДобавитьПОД_Документ_СписаниеНедостачТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеНедостачТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СписаниеНедостачТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеНедостачТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеЗапасов") Тогда
		ИспользованиеПКО.Документ_СписаниеЗапасов_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_СписаниеТоваров_Отправка");
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
		ИспользованиеПКО.Удалить("Документ_СписаниеЗапасов_Отправка");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦены КАК ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Ссылка = &Ссылка
	|	И ЦеныНоменклатуры.Цена <> 0
	|	И ЦеныНоменклатуры.ВидЦены В(&ВидыЦенНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.ТипЦен КАК ТипЦен,
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ТабТовары.Цена / ТабТовары.Коэффициент КАК ЧИСЛО(15, 2))) КАК Цена
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабТовары.ТипЦен,
	|	ТабТовары.Номенклатура
	|ИТОГИ ПО
	|	ТипЦен";
	
	ТекстЗапросаКоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки", ТекстЗапросаКоэффициентУпаковки);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидыЦенНоменклатуры", КомпонентыОбмена.ПараметрыКонвертации.ВидыЦенНоменклатуры);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		Пока ВыборкаВидЦены.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Ссылка, Комментарий");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ВыборкаДетали = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
			КонецЦикла;
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
		КонецЦикла;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
КонецПроцедуры
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено
		И ДанныеИБ.ЭтоГруппа Тогда	
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПОД_Справочник_Контрагенты(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_СкладыГруппа = (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_УпаковкиЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_УпаковкиЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#Область СтатьиДоходов_Отправка
Процедура ДобавитьПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СтатьиДоходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Банки";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанкиГруппа = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Ложь;
	ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Ложь;
	
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если Найти(Владелец.ТипЗначения, "Организация")>0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Истина;
		ИначеЕсли Найти(Владелец.ТипЗначения, "Контрагент") > 0
			 ИЛИ Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГруппаНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ГруппаНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Если обе функциональные опции отключены, то грузить договора не имеет смысла.
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами
		И Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками Тогда
	
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
		Возврат;
		
	КонецЕсли;
	
	// Определим тип договора для проверки конкретной функциональной опции.
	ТипДоговора = Неопределено;
	ВидДоговора = Неопределено;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидДоговора") Тогда
		
		ВидДоговора = ДанныеXDTO.КлючевыеСвойства.ВидДоговора;
		
		Если  ТипЗнч(ВидДоговора) = Тип("Структура")
			И ВидДоговора.Свойство("Значение") Тогда
		    
		    ТипДоговора = ВидДоговора.Значение;
		    
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТипДоговора)
		Или (Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСКлиентами
		И (ТипДоговора = "СПокупателем"
		Или ТипДоговора = "СКомиссионером"
		Или ТипДоговора = "СКомиссионеромНаЗакупку"))
		Или (Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяДоговорыСПоставщиками
		И (ТипДоговора = "СПоставщиком"
		Или ТипДоговора = "СКомитентом"
		Или ТипДоговора = "СКомитентомНаЗакупку"
		Или ТипДоговора = "Прочее")) Тогда
		
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
		Возврат;
	
	КонецЕсли;
	
	
	// Определим признак ранее созданного виртуального договора. 
	// Если договор был создан из совокупности других объектов, его загружать не следует.
	ДопРеквизиты = Неопределено;
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты", ДопРеквизиты)
		И ТипЗнч(ДопРеквизиты) = Тип("ТаблицаЗначений") И ДопРеквизиты.Количество() > 0 Тогда
	
		Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
			Если ДопРеквизит.ЗначениеСвойства = "ВиртуальныйДоговор" Тогда
				// Пришел виртуальный договор.
				ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипДоговора = "СПокупателем" И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		Или ТипДоговора = "СПоставщиком" И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		
		// Если нет ни одного соглашения с настройкой ИспользуютсяДоговорыКонтрагентов,
		// то договор не загружаем.
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Соглашения.Ссылка,
			|	Соглашения.ИспользуютсяДоговорыКонтрагентов КАК ИспользованиеДоговоров
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК Соглашения
			|ГДЕ
			|	НЕ Соглашения.ПометкаУдаления
			|	И Соглашения.Контрагент В (&Контрагенты)
			|	И Соглашения.Организация В (&Организации)
			|");
		
		Если ТипДоговора = "СПоставщиком" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоглашенияСКлиентами", "СоглашенияСПоставщиками");
		КонецЕсли;
		
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
			И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) = Тип("Структура")
			И ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка")
			И ТипЗнч(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка) = Тип("Структура")
			И ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка.Свойство("Значение") Тогда
			
			Валюта = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
				Строка(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Ссылка.Значение),
				Тип("СправочникСсылка.Валюты"),
				КомпонентыОбмена);
			Запрос.Текст = Запрос.Текст + Символы.ПС + " И Соглашения.Валюта = &Валюта";
			Запрос.УстановитьПараметр("Валюта", Валюта);
		КонецЕсли;
		
		Контрагенты = Новый Массив;
		Контрагенты.Добавить(ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
			Строка(ДанныеXDTO.КлючевыеСвойства.Контрагент.Ссылка.Значение),
			Тип("СправочникСсылка.Контрагенты"),
			КомпонентыОбмена));
		Контрагенты.Добавить(Справочники.Контрагенты.ПустаяСсылка());
		Организации = Новый Массив;
		Организации.Добавить(ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
			Строка(ДанныеXDTO.КлючевыеСвойства.Организация.Ссылка.Значение),
			Тип("СправочникСсылка.Организации"),
			КомпонентыОбмена));
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьСоглашение = Ложь;
		ДоговорыИспользуются = Ложь;
		Пока Выборка.Следующий() Цикл
			ЕстьСоглашение = Истина;
			ДоговорыИспользуются = (ДоговорыИспользуются ИЛИ Выборка.ИспользованиеДоговоров);
		КонецЦикла;
		// По умолчанию соглашение создаётся с признаком использования договоров,
		// следовательно, если соглашение не найдено и установлен признак использования
		// соглашения, то оно будет создано с признаком ведения учета по договорам.
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = НЕ ЕстьСоглашение ИЛИ ДоговорыИспользуются;
		
		Возврат;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДоходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область ВозвратМеждуОрганизациями_ОтПокупателя_Отправка
Процедура ДобавитьПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ВозвратМеждуОрганизациями_ОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПоступления";
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОрганизацияПолучатель";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", НачалоДня(ДанныеИБ.Дата));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
	Иначе
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
	КонецЕсли;
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.ОрганизацияПолучатель;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеXDTO.ВалютаВзаиморасчетов;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =
		ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеXDTO.ВалютаВзаиморасчетов;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКомиссионера");
		ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
	КонецЕсли;
	Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("Договор", Договор);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеXDTO.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	// Табличная часть
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|				КОНЕЦ КАК ЧИСЛО(15, 2))
		|															КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ДокументПоступления = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
		|			ТОГДА ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВидыЗапасов.Себестоимость) КАК Себестоимость,
		|	ВидыЗапасов.ТипЗапасов
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|			Товары.Номенклатура КАК Номенклатура
		|		ИЗ
		|			Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
		|		ГДЕ
		|			Товары.Ссылка = &Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Товары.Номенклатура) КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ВозвратМеждуОрганизациями_Поставщику_Отправка
Процедура ДобавитьПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ВозвратМеждуОрганизациями_Поставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПоступления";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов);
	Иначе
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеИБ.Валюта);
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеXDTO.ВалютаВзаиморасчетов;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =
		ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеXDTO.ВалютаВзаиморасчетов;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратПоставщику");
		ПараметрыПоУмолчанию.ВидДоговора = "СПоставщиком";
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратКомитенту");
		ПараметрыПоУмолчанию.ВидДоговора = "СКомитентом";
	КонецЕсли;
	
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.ОрганизацияПолучатель, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеXDTO.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	// Табличная часть
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|												КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
		|			Товары.Номенклатура КАК Номенклатура
		|		ИЗ
		|			Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
		|		ГДЕ
		|			Товары.Ссылка = &Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Товары.Номенклатура) КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ТаблицаТовары.Колонки.Добавить("ТипЗапасов");
	ТаблицаТовары.ЗаполнитьЗначения(?(ДанныеXDTO.ВидОперации = "ВозвратПоставщику", "СобственныеТовары", "КомиссионныеТовары"), "ТипЗапасов");
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтКлиента_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийВозвратОтПокупателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Определим контрагента документа. Для возврата от розничного покупателя, контрагент в документе не заполняется.
	// Заполняется только партнер - Розничный покупатель.
	КонтрагентДокумента = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(КонтрагентДокумента)
		И ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		КонтрагентДокумента = Справочники.Контрагенты.РозничныйПокупатель;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентДокумента);
	
	// ВалютаВзаиморасчетов нужна для расчета курса и кратности.
	// РасчетыВУсловныхЕдиницах вычисляются параллельно, т.к. могут пригодиться если договор пустой.
	РасчетыВУсловныхЕдиницах = Ложь;
	ВалютаВзаиморасчетов     = ДанныеИБ.Валюта;
	
	Если Не (ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) Тогда
		
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов;
				РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
	КонецЕсли;
	
	КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов",      КурсИКратность.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", КурсИКратность.Кратность);
	
	// Документ реализации
	ДокументРеализации = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументРеализации) Тогда
		
		ДокументРеализации = ДанныеИБ.ДокументРеализации;
		
	ИначеЕсли Не ДанныеИБ.ВозвратПорчи Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|Товары.ДокументРеализации.Ссылка КАК Ссылка
			|ИЗ Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
			|ГДЕ 
			|	Товары.Ссылка = &Ссылка";
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ДокументРеализации = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументРеализации");
	
	Если ДокументРеализации <> Неопределено Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	
	
	// Товары
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Товары.Порча
		|			ТОГДА Товары.НоменклатураОприходование
		|		ИНАЧЕ Товары.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Товары.Порча
		|			ТОГДА Товары.НоменклатураОприходование
		|		ИНАЧЕ Товары.Номенклатура
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|";
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
			|		ИНАЧЕ ВидыЗапасов.НоменклатураОприходование
			|	КОНЕЦ КАК Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.СуммаСНДС,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ВидыЗапасов.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ВидыЗапасов.Ссылка.ВозвратПереданнойМногооборотнойТары КАК ВозвратПереданнойМногооборотнойТары,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов
			|ПОМЕСТИТЬ ВидыЗапасов
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыЗапасов.Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
			|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
			|			КОНЕЦ КАК ЧИСЛО(15, 2))
			|	 													КАК Цена,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|			ТОГДА ВидыЗапасов.СуммаСНДС
			|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				И ВидыЗапасов.ВозвратПереданнойМногооборотнойТары
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) 
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ПорядокСтрокТаблицыТовары.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	ВидыЗапасов КАК ВидыЗапасов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
			|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
			|	СУММА(ТаблицаТоваров.Сумма) КАК Сумма,
			|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки";
			
	Иначе
			
		Запрос.Текст = Запрос.Текст + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.НоменклатураОприходование = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура
			|		ИНАЧЕ ВидыЗапасов.НоменклатураОприходование
			|	КОНЕЦ КАК Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.Ссылка.ДокументРеализации КАК ДокументРеализации,
			|	ВидыЗапасов.Ссылка.ВозвратПорчи КАК ВозвратПорчи,
			|	ВидыЗапасов.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ВидыЗапасов.СуммаСНДС,
			|	ВидыЗапасов.СуммаНДС,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВЫБОР КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ВидыЗапасов.Ссылка.ВозвратПереданнойМногооборотнойТары КАК ВозвратПереданнойМногооборотнойТары
			|ПОМЕСТИТЬ ВидыЗапасов
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыЗапасов.Номенклатура,
			|	ВидыЗапасов.Количество,
			|	ВидыЗапасов.СтавкаНДС,
			|	ВидыЗапасов.СуммаНДС КАК СуммаНДС,
			|	ПорядокСтрокТаблицыТовары.НомерСтроки,
			|	ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|						ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
			|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
			|				КОНЕЦ КАК ЧИСЛО(15, 2))
			|												КАК Цена,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ЦенаВключаетНДС
			|			ТОГДА ВидыЗапасов.СуммаСНДС
			|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.ВозвратПорчи
			|				ИЛИ ВидыЗапасов.ДокументРеализации = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Себестоимость,
			|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И
			|		ВидыЗапасов.ВозвратПереданнойМногооборотнойТары ТОГДА
			|		""ВозвратнаяТара""
			|	ИНАЧЕ
			|		ВидыЗапасов.ТипЗапасов
			|	КОНЕЦ КАК ТипЗапасов
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	ВидыЗапасов КАК ВидыЗапасов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары
			|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Цена КАК Число(15,2)) КАК Цена,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
			|	СУММА(ВЫРАЗИТЬ(ТаблицаТоваров.Сумма КАК Число(15,2))) КАК Сумма,
			|	СУММА(ТаблицаТоваров.Себестоимость) КАК Себестоимость,
			|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Цена,
			|	ТаблицаТоваров.СтавкаНДС,
			|	ТаблицаТоваров.ТипЗапасов,
			|	ТаблицаТоваров.НомерСтроки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки";
	
	КонецЕсли;
	
	// Заказ клиента берем из табличной части "Расшифровка платежа"
	// Если там указано несколько заказов или в качестве заказа указан документ, не являющийся заказом, то ничего не далаем
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВозвратТоваровОтКлиента.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровОтКлиента.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Заказ
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", Результат[3].Выгрузить());
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент               = КонтрагентДокумента;
		ПараметрыПоУмолчанию.Организация              = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов     = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.Дата                     = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер                    = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
	
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера,
			"СКомиссионером", "СПокупателем");
		
		ЗаказКлиента = Неопределено;
		
		Выборка = Результат[4].Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаказКлиента = Выборка.Заказ;
		КонецЕсли;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
		
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// ВалютаВзаиморасчетов нужна для дальнейшего расчета курса и кратности.
	// РасчетыВУсловныхЕдиницах вычисляются параллельно, чтобы при необходимости не делать то же самое второй раз.
	РасчетыВУсловныхЕдиницах = Ложь;
	ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	Если ДанныеИБ.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].ВалютаВзаиморасчетов;
				РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратПоставщику");
	КонецЕсли;
	ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	
	КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", КурсИКратность.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", КурсИКратность.Кратность);
	// Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ВозвратТоваровПоставщикуТовары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	|			ТОГДА ВидыЗапасов.СуммаСНДС
	|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВидыЗапасов.СуммаНДС,
	|	ВидыЗапасов.СуммаСНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
	|			ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВидыЗапасов.Ссылка.ВозвратПринятойМногооборотнойТары КАК ВозвратПринятойМногооборотнойТары,
	|	ВидыЗапасов.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И (Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Аналитика.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.СтавкаНДС,
	|	ВидыЗапасов.Сумма,
	|	ВидыЗапасов.СуммаНДС,
	|	ВидыЗапасов.Цена,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И ВидыЗапасов.ВозвратПринятойМногооборотнойТары
	|			ТОГДА ""ВозвратнаяТара""
	|		КОГДА ВидыЗапасов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ВидыЗапасов.ВозвратПринятойМногооборотнойТары,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
	|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Цена КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ТаблицаТоваров.ТипЗапасов,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиДокумента,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаТоваров.Сумма КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ТаблицаТоваров.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.Цена,
	|	ТаблицаТоваров.ТипЗапасов,
	|	ТаблицаТоваров.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ДокументПоступления.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.ДокументПоступления.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасшифровкаПлатежа.Заказ
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	Результат = Запрос.ВыполнитьПакет();
	ТабТовары = Результат[3].Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументПоступления) Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", ДанныеИБ.ДокументПоступления);
	Иначе
		Выборка = Результат[4].Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ДанныеXDTO.Вставить("ДокументПоступления", Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		// Заказ поставщику берем из табличной части "Расшифровка платежа"
		// Если там указано несколько заказов или в качестве заказа указан документ, не являющийся заказом, то ничего не далаем
		ТабЗаказов = Результат[5].Выгрузить();
		Если ТабЗаказов.Количество() = 1 И ТипЗнч(ТабЗаказов[0].Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаказПоставщику = ТабЗаказов[0].Заказ;
		Иначе
			ЗаказПоставщику = Неопределено;
		КонецЕсли;
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту,
			"СКомитентом", "СПоставщиком");
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ЗаказПоставщику, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказКлиента;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеИБ.Договор, "ПорядокОплаты, ВалютаВзаиморасчетов");
		
		ДанныеXDTO.Вставить("Договор",                  ДанныеИБ.Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", (СвойстваДоговора.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах));
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов",     СвойстваДоговора.ВалютаВзаиморасчетов);
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Соглашение, "Валюта");
		Иначе
			ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
		КонецЕсли;
		
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ВзаиморасчетыСервер.ВидДоговораКонтрагента(ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.ХозяйственнаяОперация);
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		
		Если ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером" Тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		Иначе
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.Ссылка, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		
		ДанныеXDTO.Вставить("Договор", Договор);
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
		ДанныеXDTO.Вставить("ВалютаВзаиморасчетов",     ВалютаВзаиморасчетов);
	КонецЕсли;
	
	// Курс и кратность взаиморасчетов
	Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Соглашение.Валюта, ДанныеИБ.Дата);
	Иначе
		// Документ оформлен в валюте взаиморасчетов
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КурсВзаиморасчетов",      СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	// Табличные части
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(НоменклатураСправочник.ВариантОформленияПродажи, ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.ПустаяСсылка)) КАК ВариантОформленияПродажи,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСправочник.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСправочник.Наименование
		|					ИНАЧЕ ХарактеристикаСправочник.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСправочник.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСправочник.Наименование
		|		ИНАЧЕ НоменклатураСправочник.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	ЕСТЬNULL(НоменклатураСправочник.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И Товары.Ссылка.ВернутьМногооборотнуюТару
		|			ТОГДА ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	Товары.Содержание КАК Содержание,
		|	Товары.Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				ИЛИ ЕСТЬNULL(НоменклатураСправочник.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ВЫБОР
		|					КОГДА Товары.Количество > 0
		|						ТОГДА ВЫБОР
		|								КОГДА Товары.Сумма / Товары.Количество < 0.01
		|										И &ВерсияФормата < 1.2
		|									ТОГДА 0.01
		|								ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ВерсияФормата < 1.2
		|								ТОГДА 0.01
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ Товары.Цена
		|	КОНЕЦ КАК Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС
		|ПОМЕСТИТЬ ЗаказанныеПозиции
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
		|		ПО Товары.Номенклатура = НоменклатураСправочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСправочник
		|		ПО Товары.Характеристика = ХарактеристикаСправочник.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Отменено = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипЗапасов,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаТовары
		|ГДЕ
		|	(ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|			ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаТовары.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.НомерСтрокиДокумента,
		|	ТаблицаУслуги.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
		|				ИЛИ ТаблицаУслуги.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)
		|			ТОГДА ТаблицаУслуги.Содержание
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаУслуги.ХарактеристикаНаименование = """"
		|					ТОГДА ТаблицаУслуги.НоменклатураНаименование
		|				ИНАЧЕ ТаблицаУслуги.НоменклатураНаименование + "" ("" + ТаблицаУслуги.ХарактеристикаНаименование + "")""
		|			КОНЕЦ
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаУслуги.Количество,
		|	ТаблицаУслуги.Цена,
		|	ТаблицаУслуги.Сумма,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.СуммаНДС
		|ИЗ
		|	ЗаказанныеПозиции КАК ТаблицаУслуги
		|ГДЕ
		|	(ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ИЛИ ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаУслуги.НомерСтрокиДокумента");
		
	Запрос.УстановитьПараметр("Ссылка",        ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВерсияФормата", ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", РезультатЗапроса[1].Выгрузить());
	ДанныеXDTO.Вставить("Услуги", РезультатЗапроса[2].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДоходов";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Ссылка.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.Текст = "ВЫБРАТЬ
	   |	ОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
	   |	ОприходованиеТоваровТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	   |	ОприходованиеТоваровТовары.Количество КАК Количество,
	   |	ВЫРАЗИТЬ(ОприходованиеТоваровТовары.Цена * ВЫБОР
	   |		КОГДА &РегВалюта <> &УпрВалюта
	   |			ТОГДА ВЫБОР
	   |					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	   |						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	   |					ИНАЧЕ 1
	   |				КОНЕЦ
	   |		ИНАЧЕ 1
	   |	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	   |	ВЫРАЗИТЬ(ОприходованиеТоваровТовары.Сумма * ВЫБОР
	   |		КОГДА &РегВалюта <> &УпрВалюта
	   |			ТОГДА ВЫБОР
	   |					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	   |							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	   |						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	   |					ИНАЧЕ 1
	   |				КОНЕЦ
	   |		ИНАЧЕ 1
	   |	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	   |	ВЫБОР КОГДА ОприходованиеТоваровТовары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	   |			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
	   |		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
	   |	КОНЕЦ КАК ТипЗапасов
	   |ИЗ
	   |	Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеТоваровТовары
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
	   |		ПО (ИСТИНА)
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	   |		ПО (ИСТИНА)
	   |ГДЕ
	   |	ОприходованиеТоваровТовары.Ссылка = &Ссылка";
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалогообложениеНДС";
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисления_ТипыНалогообложенияНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УчетВыручкиВОперационнойКассе";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорЭквайринга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаСертификатами", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаСертификатами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "МагнитныйКод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СерийныйНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.ВидЗапасов.Поставщик КАК Поставщик,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|			КОНЕЦ < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|						ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|					ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|				КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Цена КАК Цена,
		|	ВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ВидыЗапасов.Поставщик КАК ПоставщикСсылка,
		|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	СУММА(ВидыЗапасов.Количество) КАК Количество,
		|	СУММА(ВидыЗапасов.Сумма) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|			ТаблицаТовары.Номенклатура КАК Номенклатура
		|		ИЗ
		|			ТаблицаТовары КАК ТаблицаТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаТовары.Номенклатура) КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.Цена,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.ТипЗапасов,
		|	ВидыЗапасов.Поставщик,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки,
		|	ВидыЗапасов.Номенклатура.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерКарты,
		|	""Неопределено"" КАК ВидКарты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер КАК Эквайрер
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
		|ГДЕ
		|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|	И ОплатаПлатежнымиКартами.Сумма > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер КАК Эквайрер
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
		|ГДЕ
		|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|	И ОплатаПлатежнымиКартами.Сумма < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ПодарочныеСертификаты.Сумма) КАК Сумма,
		|	ПодарочныеСертификаты.ПодарочныйСертификат.Код КАК СерийныйНомер,
		|	ПодарочныеСертификаты.ПодарочныйСертификат.Штрихкод КАК Штрихкод,
		|	ПодарочныеСертификаты.ПодарочныйСертификат.МагнитныйКод КАК МагнитныйКод
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ПодарочныеСертификаты
		|ГДЕ
		|	ПодарочныеСертификаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификаты.ПодарочныйСертификат.Код,
		|	ПодарочныеСертификаты.ПодарочныйСертификат.Штрихкод,
		|	ПодарочныеСертификаты.ПодарочныйСертификат.МагнитныйКод
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура 				КАК Номенклатура,
		|	Товары.Номенклатура.Наименование 	КАК Содержание,
		|	Товары.Количество 					КАК Количество,
		|	Товары.Цена 						КАК Цена,
		|	Товары.Сумма 						КАК Сумма,
		|	Товары.СтавкаНДС 					КАК СтавкаНДС,
		|	Товары.Номенклатура.Принципал 		КАК ПринципалСсылка,
		|	ВЫБОР КОГДА 
		|		Товары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
		|		ИЛИ Товары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером) ТОГДА
		|			""Агентские""
		|		ИНАЧЕ ""Собственные""
		|	КОНЕЦ КАК ТипУслуги,
		|	Товары.СуммаНДС 					КАК СуммаНДС
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[2].Выгрузить();
	ТабТовары.Колонки.Добавить("Поставщик");
	Для Каждого СтрокаТовары Из ТабТовары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.ПоставщикСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТовары.ПоставщикСсылка) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаТовары.Поставщик = КонтрагентИзОрганизации(СтрокаТовары.ПоставщикСсылка, КомпонентыОбмена);
		ИначеЕсли ТипЗнч(СтрокаТовары.ПоставщикСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаТовары.Поставщик = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаТовары.ПоставщикСсылка);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ТабОплатаКартами = РезультатыЗапроса[3].Выгрузить();
	ТабОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
	Для Каждого Строка ИЗ ТабОплатаКартами Цикл
		
		СтруктураДанныеДоговора = Новый Структура("Организация, Контрагент, ВидДоговора",
								ДанныеИБ.Организация, Строка.Эквайрер, "Прочее");
		СтруктураДанныеДоговора.Вставить("ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);	
		СтруктураДанныеДоговора.Вставить("Дата",                     Дата(1,1,1));
		СтруктураДанныеДоговора.Вставить("Наименование",             НСтр("ru='Основной договор';uk='Основний договір'"));
		СтруктураДанныеДоговора.Вставить("Номер",                    "");
	
		Строка.ДоговорЭквайринга = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");	
		
	КонецЦикла;
	ТабОплатаКартамиОтрицательныеСуммы = РезультатыЗапроса[4].Выгрузить();
	Если ТабОплатаКартамиОтрицательныеСуммы.Количество() > 0 Тогда
		Для Каждого Строка ИЗ ТабОплатаКартамиОтрицательныеСуммы Цикл
			СуммаКВычету = (-1) * Строка.СуммаОплаты;
			СтруктураПоиска = Новый Структура("Эквайрер", Строка.Эквайрер);
			СтрокиОплаты = ТабОплатаКартами.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОплаты ИЗ СтрокиОплаты Цикл
				Если СтрокаОплаты.СуммаОплаты >= СуммаКВычету Тогда
					СтрокаОплаты.СуммаОплаты = СтрокаОплаты.СуммаОплаты - СуммаКВычету;
					Прервать;
				Иначе
					СуммаКВычету = СуммаКВычету - СтрокаОплаты.СуммаОплаты;
					СтрокаОплаты.СуммаОплаты = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		// Удаление строк с пустыми суммами из ТабОплатаКартами
		МаксимальныйИндекс = ТабОплатаКартами.Количество()-1;
		Для Счетчик = 0 ПО МаксимальныйИндекс Цикл
			ИндексСтроки = МаксимальныйИндекс - Счетчик;
			Если ТабОплатаКартами[ИндексСтроки].СуммаОплаты = 0 Тогда
				ТабОплатаКартами.Удалить(ИндексСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ТабОплатаКартами);
	
	ДанныеXDTO.Вставить("ОплатаСертификатами", РезультатыЗапроса[5].Выгрузить());
	
	ТабУслуги = РезультатыЗапроса[6].Выгрузить();
	ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= 1.3 Тогда
		ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Подразделения.
	ДанныеXDTO.Вставить("ПодразделениеОтправитель", Неопределено);
	ДанныеXDTO.Вставить("ПодразделениеПолучатель", Неопределено);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		СкладОтправитель = ДанныеИБ.СкладОтправитель;
		СкладПолучатель = ДанныеИБ.СкладПолучатель;
	    СоответствиеДляПолученияПодразделений = Неопределено;
	    ТекПодразделениеОтправитель = Неопределено;
	    ТекПодразделениеПолучатель = Неопределено;
	    ДополнитьСоответствие = Ложь;
	    КомпонентыОбмена.ПараметрыКонвертации.Свойство("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
	    Если СоответствиеДляПолученияПодразделений = Неопределено Тогда
	    	СоответствиеДляПолученияПодразделений = Новый Соответствие;
	    	ДополнитьСоответствие = Истина;
	    Иначе 
	    	ТекПодразделениеОтправитель = СоответствиеДляПолученияПодразделений.Получить(СкладОтправитель);
	    	ТекПодразделениеПолучатель = СоответствиеДляПолученияПодразделений.Получить(СкладПолучатель);
	    КонецЕсли;
	    Если ТекПодразделениеОтправитель = Неопределено Тогда
	    	ТекПодразделениеОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОтправитель, "Подразделение");
	    	ДополнитьСоответствие = Истина;
	    КонецЕсли;
	    Если ТекПодразделениеПолучатель = Неопределено Тогда
	    	ТекПодразделениеПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПолучатель, "Подразделение");
	    	ДополнитьСоответствие = Истина;
	    КонецЕсли;
	
	    Если ЗначениеЗаполнено(ТекПодразделениеОтправитель) Тогда
	    	РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(ТекПодразделениеОтправитель, ДанныеИБ.Организация);
		
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(ТекПодразделениеОтправитель),
				РегистрацияПодразделенияВНалоговомОргане);
			
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			
			ДанныеXDTO.Вставить("ПодразделениеОтправитель", Инструкция);
	
	    КонецЕсли;
	    Если ЗначениеЗаполнено(ТекПодразделениеПолучатель) Тогда
	    	РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(ТекПодразделениеПолучатель, ДанныеИБ.Организация);
		
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(ТекПодразделениеПолучатель),
				РегистрацияПодразделенияВНалоговомОргане);
			
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			
			ДанныеXDTO.Вставить("ПодразделениеПолучатель", Инструкция);
	
	    КонецЕсли;
	
		Если ДополнитьСоответствие Тогда
			СоответствиеДляПолученияПодразделений.Вставить(СкладОтправитель, ТекПодразделениеОтправитель);
			СоответствиеДляПолученияПодразделений.Вставить(СкладПолучатель, ТекПодразделениеПолучатель);
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СкладПолучатель, "ТипСклада,РозничныйВидЦены");
	Если ДанныеСкладаПолучателя.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
		И ЗначениеЗаполнено(ДанныеСкладаПолучателя.РозничныйВидЦены) Тогда
		Запрос.Текст = "ВЫБРАТЬ
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВидыЗапасов.Количество,
			|	ВЫБОР
			|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			ТОГДА ""ВозвратнаяТара""
			|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
			|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
			|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
			|	КОНЕЦ КАК ТипЗапасов,
			|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
			|ГДЕ
			|	ВидыЗапасов.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.ТипЗапасов КАК ТипЗапасов,
			|	ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
			|	* ВЫБОР
			|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
			|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
			|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЦенаВРознице,
			|	ТаблицаТоваров.Номенклатура.СтавкаНДС КАК СтавкаНДСВРознице
			|ПОМЕСТИТЬ ПервичныеДанные
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Дата,
			|				ВидЦены = &ВидЦен
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							ТаблицаТоваров.Номенклатура
			|						ИЗ
			|							ТаблицаТоваров КАК ТаблицаТоваров)
			|					И  (Характеристика В (ВЫБРАТЬ ТаблицаТоваров.Характеристика ИЗ ТаблицаТоваров КАК ТаблицаТоваров)
			|						ИЛИ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ТаблицаТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ТаблицаТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
			|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ТаблицаТоваров.ТипЗапасов = ""СобственныеТовары""
			|	ИЛИ ТаблицаТоваров.ТипЗапасов = ""ВозвратнаяТара""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.ЕдиницаИзмерения,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.ТипЗапасов,
			|	0,
			|	NULL
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.ТипЗапасов = ""КомиссионныеТовары""
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПервичныеДанные.Номенклатура,
			|	ПервичныеДанные.ЕдиницаИзмерения,
			|	ПервичныеДанные.Количество,
			|	ПервичныеДанные.ТипЗапасов,
			|	ВЫБОР
			|		КОГДА ПервичныеДанные.ЦенаВРознице < 0.01
			|			ТОГДА 0.01
			|		ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.ЦенаВРознице КАК ЧИСЛО(15, 2))
			|	КОНЕЦ КАК ЦенаВРознице,
			|	ПервичныеДанные.СтавкаНДСВРознице,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ПервичныеДанные.ЦенаВРознице < 0.01
			|				ТОГДА 0.01
			|			ИНАЧЕ ВЫРАЗИТЬ(ПервичныеДанные.ЦенаВРознице КАК ЧИСЛО(15, 2))
			|		КОНЕЦ * ПервичныеДанные.Количество КАК ЧИСЛО(15, 2)) КАК СуммаВРознице
			|ИЗ
			|	ПервичныеДанные КАК ПервичныеДанные";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.ЕдиницаИзмерения",
			"ТаблицаТоваров.Номенклатура"));
		
		Запрос.УстановитьПараметр("Дата",	КонецДня(ДанныеИБ.Дата));
		Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВидЦен", ДанныеСкладаПолучателя.РозничныйВидЦены);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура 					КАК Номенклатура,
		|ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
		|ВидыЗапасов.Количество 					КАК Количество,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА ""ВозвратнаяТара""
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ 									КАК ТипЗапасов
		|ИЗ
		|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|";
	КонецЕсли;
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПересортицаВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДоходов";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	
	ТаблицаТовары = ДанныеИБ.ДополнительныеСвойства.Товары;
	ТаблицаТовары.Колонки.Добавить("ТипЗапасов");
	ТаблицаТовары.ЗаполнитьЗначения("СобственныеТовары", "ТипЗапасов");
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	ДанныеXDTO.Вставить("Сумма", ТаблицаТовары.Итог("Сумма"));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПересортицаВСписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7));
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("Основание", Строка(ДанныеИБ));
	
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Документ.ПересортицаТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ПорядокСтрокТаблицыТовары
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СУММА(ВидыЗапасов.Количество) КАК Количество
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокСтрокТаблицыТовары КАК ПорядокСтрокТаблицыТовары
	|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.Коэффициент,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтрокТаблицыТовары.НомерСтроки";
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Излишки", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Излишки;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВариантОтражения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Недостачи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Недостачи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВариантОтражения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ПТиУ_РасширенныеДанныеИБ(ДанныеИБ);
	
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", РасширенныеДанныеИБ.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", РасширенныеДанныеИБ.КратностьВзаиморасчетов);
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// ВидОперации
	// При выключенной ФО "Использовать комиссию при продаже" реквизит "Хозяйсвенная операция"
	// может быть не заполнен, что означает обычную реализацию.
	ДанныеXDTO.Вставить("ВидОперации");
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация)
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		Или ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		ДанныеXDTO.ВидОперации = "ЗакупкаПоИмпорту";
	КонецЕсли;
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = ?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию,
			"СКомитентом", "СПоставщиком");
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка",  ДанныеИБ.ЗаказПоставщику, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	
	// Товары
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура.
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки.
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПоступлениеТоваровУслуг_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	// Излишки
	Излишки = РасширенныеДанныеИБ.Излишки;
	Если Излишки.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Излишки", Излишки);
	КонецЕсли;
	
	// Недостачи
	Недостачи = РасширенныеДанныеИБ.Недостачи;
	Если Недостачи.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Недостачи", Недостачи);
	КонецЕсли;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеУслугПрочихАктивов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеУслугПрочихАктивов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = Лев(ДанныеИБ.Номер, 5) + "У" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаВзаиморасчетов, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	
	// Дополнительные свойства для договора
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		СтруктураДанныеДоговора = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		РасчетыВУсловныхЕдиницах = Ложь;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов;
		КонецЕсли;
		СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", РасчетыВУсловныхЕдиницах);
		СтруктураДанныеДоговора.Вставить("ВидДоговора",              "СПоставщиком");
		СтруктураДанныеДоговора.Вставить("Дата",                     Дата(1,1,1));
		СтруктураДанныеДоговора.Вставить("Наименование",             НСтр("ru='Основной договор';uk='Основний договір'"));
		СтруктураДанныеДоговора.Вставить("Номер",                    "");
		
		ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
		
	Иначе
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	КонецЕсли;
	
	//Услуги
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Расходы.Содержание,
		|	ВЫБОР КОГДА Расходы.Количество = 0 ТОГДА 1 ИНАЧЕ Расходы.Количество КОНЕЦ КАК Количество,
		|	Расходы.Цена,
		|	Расходы.Сумма,
		|	Расходы.СтавкаНДС,
		|	Расходы.СуммаНДС,
		|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
		|	Расходы.Подразделение КАК Подразделение,
		|	Расходы.СчетУчета КАК СчетУчета,
		|	ВЫБОР КОГДА Расходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров) ТОГДА
		|	0 ИНАЧЕ Расходы.СуммаСНДС КОНЕЦ КАК СуммаСНДС,
		|	ВЫБОР КОГДА 
		|			Расходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров) ТОГДА
		|	ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК Расходы
		|ГДЕ
		|	Расходы.Ссылка = &Ссылка
		|	");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Услуги = Запрос.Выполнить().Выгрузить();
	Услуги.Колонки.Добавить("СчетЗатрат");
	Услуги.Колонки.Добавить("ПодразделениеЗатрат");
	Услуги.Колонки.Добавить("СтатьяЗатрат");
	// Заполнение счета затрат.
	Для Каждого СтрокаУслуги Из Услуги Цикл
		// Параметры №2,3 и 4 необходимы для вычисления счета затрат в УП/КА.
		СтрокаУслуги.СчетЗатрат = СчетРасходовПоСтатьеРасходов(СтрокаУслуги.СтатьяРасходов, ДанныеИБ.Организация, СтрокаУслуги.Подразделение, СтрокаУслуги.СчетУчета);
		
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		Если ТипЗнч(СтрокаУслуги.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаУслуги.СтатьяЗатрат = СтрокаУслуги.СтатьяРасходов;
		КонецЕсли;
	КонецЦикла;
	
	
	ДанныеXDTO.Вставить("Сумма", Услуги.Итог("Сумма"));
	
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Не переносим как допрасходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступления) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Услуги", Услуги);
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВариантОформленияПродажи";
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭД_Реализация_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПереходаПраваСобственности";
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Продавец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРеализацияТоваров_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииСтрокой = "";
	Если Не ЗначениеЗаполнено(ДанныеИБ.ХозяйственнаяОперация) Тогда
		ВидОперацииСтрокой = "РеализацияКлиенту";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		Если ДанныеИБ.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути Тогда
			ВидОперацииСтрокой = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		Иначе
			ВидОперацииСтрокой = "ОтгрузкаБезПереходаПравСобственности_Реализовано"; 
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперацииСтрокой <> "" Тогда
		ДанныеXDTO.Вставить("ВидОперации", ВидОперацииСтрокой);
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.Руководитель.ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказКлиента) И ТипЗнч(ДанныеИБ.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДанныеXDTO.Вставить("Заказ", ДанныеИБ.ЗаказКлиента);
	Иначе
		ДанныеXDTO.Вставить("Заказ", Неопределено);
	КонецЕсли;
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ДанныеИБ);
		ПараметрыПоУмолчанию.ВидДоговора =
			?(ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию, "СКомиссионером", "СПокупателем");
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", ДанныеИБ.ЗаказКлиента, ДанныеИБ.Соглашение, ДанныеИБ.Сделка);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	// Данные шапки документа необходимы для вычисления
	// курса и кратности взаиморасчетов.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.ВалютаВзаиморасчетов = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	ТоварыИУслугиДокумента = "
		|	ВЫБРАТЬ
		|		Товары.Номенклатура КАК Номенклатура,
		|	ВЫБОР КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА
		|		ВЫБОР КОГДА ХарактеристикаСпр.НаименованиеПолное = """" ТОГДА 
		|			ХарактеристикаСпр.Наименование
		|		ИНАЧЕ
		|			ХарактеристикаСпр.НаименованиеПолное
		|		КОНЕЦ
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР КОГДА НоменклатураСпр.НаименованиеПолное = """" ТОГДА
		|		НоменклатураСпр.Наименование
		|	ИНАЧЕ
		|		НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	Товары.Номенклатура.ТипНоменклатуры,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО НоменклатураСпр.Ссылка = Товары.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСпр
		|		ПО ХарактеристикаСпр.Ссылка = Товары.Характеристика
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
	//	|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
	//	|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВидыЗапасов.Ссылка.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|					ТОГДА ВидыЗапасов.СуммаСНДС / ВидыЗапасов.Количество
		|				ИНАЧЕ (ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС) / ВидыЗапасов.Количество
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|												КАК Цена,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Ссылка.ЦенаВключаетНДС
		|			ТОГДА ВидыЗапасов.СуммаСНДС
		|		ИНАЧЕ ВидыЗапасов.СуммаСНДС - ВидыЗапасов.СуммаНДС
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура 				КАК Номенклатура,
		|	ВЫБОР КОГДА ТаблицаТовары.ХарактеристикаНаименование = """" ТОГДА
		|		ТаблицаТовары.НоменклатураНаименование
		|	ИНАЧЕ
		|		ТаблицаТовары.НоменклатураНаименование + "" ("" + ТаблицаТовары.ХарактеристикаНаименование + "")""
		|	КОНЕЦ КАК Содержание,
		|	ТаблицаТовары.Номенклатура.Принципал 	КАК ПринципалСсылка,
		|	ВЫБОР КОГДА 
		|		ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
		|		ИЛИ ТаблицаТовары.Номенклатура.ВидНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером) ТОГДА
		|			""Агентские""
		|		ИНАЧЕ ""Собственные""
		|	КОНЕЦ КАК ТипУслуги,
		|	ТаблицаТовары.Количество 				КАК Количество,
		|	ТаблицаТовары.Цена 						КАК Цена,
		|	ТаблицаТовары.СтавкаНДС 				КАК СтавкаНДС,
		|	ТаблицаТовары.Сумма 					КАК Сумма,
		|	ТаблицаТовары.СуммаНДС 					КАК СуммаНДС
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	ИЛИ ТаблицаТовары.НоменклатураТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Номенклатура 				КАК Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
		|	ВидыЗапасов.СтавкаНДС 					КАК СтавкаНДС,
	//	|	ВидыЗапасов.НомерГТД					КАК НомерГТД,
	//	|	ВидыЗапасов.СтранаПроисхождения 		КАК СтранаПроисхождения,
		|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И ВидыЗапасов.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ ВидыЗапасов.ТипЗапасов КОНЕЦ		КАК ТипЗапасов,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки 	КАК НомерСтрокиДокумента,
		|	ВЫРАЗИТЬ(ВидыЗапасов.Цена КАК Число(15,2))         КАК Цена,
		|	СУММА(ВидыЗапасов.Количество) 			           КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ВидыЗапасов.Сумма КАК Число(15,2))) КАК Сумма,
		|	СУММА(ВидыЗапасов.СуммаНДС) 			           КАК СуммаНДС
		|ИЗ
		|	ВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаТовары.Номенклатура КАК Номенклатура,
		|			МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки
		|		ИЗ
		|			ТаблицаТовары КАК ТаблицаТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаТовары.Номенклатура) КАК ПорядокСтрокТаблицыТовары
		|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗапасов.Номенклатура,
		|	ВидыЗапасов.ЕдиницаИзмерения,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.Цена,
	//	|	ВидыЗапасов.НомерГТД,
	//	|	ВидыЗапасов.СтранаПроисхождения,
		|	ВЫБОР КОГДА ВидыЗапасов.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И ВидыЗапасов.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ ВидыЗапасов.ТипЗапасов КОНЕЦ,
		|	ПорядокСтрокТаблицыТовары.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСтрокТаблицыТовары.НомерСтроки ";
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента
		+ ДанныеОперации
		+ ТоварыИУслугиДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов", ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	ТабУслуги = РезультатыЗапроса[4].Выгрузить();
	ТабТовары = РезультатыЗапроса[5].Выгрузить();
	
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияУслугПрочихАктивов_Отправка
Процедура ДобавитьПКО_Документ_РеализацияУслугПрочихАктивов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияУслугПрочихАктивов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияУслугПрочихАктивов;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = 	Лев(ДанныеИБ.Номер, 5) + "П" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ГлавныйБухгалтер.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.Руководитель.ФизическоеЛицо);
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Дополнительные свойства для договора
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.Договор);
	Иначе
		ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
		ПараметрыПоУмолчанию.Контрагент = ДанныеИБ.Контрагент;
		ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
		ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаВзаиморасчетов;
		ПараметрыПоУмолчанию.ВидДоговора = "СПокупателем";
		ПараметрыПоУмолчанию.Дата = ДанныеИБ.Дата;
		ПараметрыПоУмолчанию.Номер = ДанныеИБ.Номер;
		Если ЗначениеЗаполнено(ДанныеИБ.Соглашение) Тогда
			РасчетыВУсловныхЕдиницах = ВзаиморасчетыСервер.РасчетыВУсловныхЕдиницах(ДанныеИБ.Соглашение);
		Иначе
			РасчетыВУсловныхЕдиницах = (ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() И ДанныеИБ.Валюта <> ДанныеИБ.ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
		
		Заказ = Новый Структура("Заказ, Соглашение, Сделка", Неопределено, ДанныеИБ.Соглашение, Неопределено);
		Договор = ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ, ДанныеИБ);
		ДанныеXDTO.Вставить("Договор", Договор);
	КонецЕсли;
	
	// Данные шапки документа необходимы для вычисления
	// курса и кратности взаиморасчетов.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.ВалютаВзаиморасчетов = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	УслугиДокумента = "
		|ВЫБРАТЬ
		|	Содержание,
		|	Количество,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС,
		|	НомерСтроки КАК НомерСтрокиДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы 
		|ГДЕ
		|	Ссылка = &Ссылка";
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента
		+ ДанныеОперации
		+ УслугиДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	Если ДанныеОперации.Следующий() Тогда
		ДанныеXDTO.Вставить("КурсВзаиморасчетов", ДанныеОперации.КурсВзаиморасчетов);
		ДанныеXDTO.Вставить("КратностьВзаиморасчетов", ДанныеОперации.КратностьВзаиморасчетов);
	КонецЕсли;
	ТабУслуги = РезультатыЗапроса[2].Выгрузить();
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров
Процедура ДобавитьПКО_Документ_СборкаТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СборкаТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СборкаТоваров_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСборкаТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Упаковка";
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Характеристика";
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.Номенклатура.ЕдиницаИзмерения);
	ДанныеXDTO.Вставить("ТипЗапасов", ?(ДанныеИБ.ВидЗапасов.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар,"КомиссионныеТовары","СобственныеТовары"));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеТовары = "ВЫБРАТЬ
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество КАК Количество,
	|	ВидыЗапасов.ДоляСтоимости КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
	|	КОНЕЦ 						КАК ТипЗапасов
	|ИЗ Документ.СборкаТоваров.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ ВидыЗапасов.Ссылка = &Ссылка";
	
	Если ДанныеИБ.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ДанныеXDTO.Вставить("ВидОперации", "Сборка");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "Разборка");
		ДанныеТовары = СтрЗаменить(ДанныеТовары, "СборкаТоваров.ВидыЗапасов", "СборкаТоваров.Товары");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ДанныеТовары;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов_Отправка
Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеНедостачТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеТовары = "ВЫБРАТЬ
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ""ВозвратнаяТара""
	|		КОГДА ВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
	|	КОНЕЦ КАК ТипЗапасов
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Номенклатура 				КАК Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
	|	ВидыЗапасов.ТипЗапасов 					КАК ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки 	КАК НомерСтрокиДокумента,
	|	СУММА(ВидыЗапасов.Количество) 			КАК Количество,
	|	0 										КАК Сумма,
	|	0 										КАК Цена
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Товары.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|		ИЗ
	|			Документ.СписаниеНедостачТоваров.Товары КАК Товары
	|		ГДЕ
	|			Товары.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Товары.Номенклатура) КАК ПорядокСтрокТаблицыТовары
	|		ПО ВидыЗапасов.Номенклатура = ПорядокСтрокТаблицыТовары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Номенклатура,
	|	ВидыЗапасов.ЕдиницаИзмерения,
	|	ВидыЗапасов.ТипЗапасов,
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтрокТаблицыТовары.НомерСтроки
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ДанныеТовары;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ
Процедура ДобавитьПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Покупатели", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Покупатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыставленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "И" + Сред(ДанныеИБ.Номер, 7);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерДок, Ложь, Истина));
	
	ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ПараметрыПоУмолчанию = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыПоУмолчанию.Организация = ДанныеИБ.Организация;
	ПараметрыПоУмолчанию.ВидДоговора = "СКомиссионером";
	ПараметрыПоУмолчанию.ВалютаВзаиморасчетов = ДанныеИБ.Валюта;
	ПараметрыПоУмолчанию.РасчетыВУсловныхЕдиницах =Ложь;
		
	Если ДанныеИБ.РасчетыЧерезОтдельногоКонтрагента Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = КонтрагентИзОрганизации(ДанныеИБ.Комиссионер, КомпонентыОбмена);
	КонецЕсли;
	ПараметрыПоУмолчанию.Контрагент = КонтрагентСсылка;
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	ДанныеXDTO.Вставить("Договор", ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена));
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.Валюта, ДанныеИБ.Дата);
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	// Табличные части
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация КАК Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаПередачи,
		|	Товары.СуммаСНДС КАК СуммаПередачи,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Цена,
		|	Товары.СуммаПродажи КАК Сумма,
		|	Товары.СуммаПродажиНДС КАК СуммаНДС,
		|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
		|	Товары.Покупатель КАК Покупатель,
		|	Товары.ДатаСчетаФактурыКомиссионера КАК ДатаСФ,
		|	ВидНоменклатурыСпр.ВариантОказанияУслуг,
		|	НоменклатураСпр.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСпр.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСпр.Наименование
		|					ИНАЧЕ ХарактеристикаСпр.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ХарактеристикаНаименование,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСпр.Наименование
		|		ИНАЧЕ НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ КАК НоменклатураНаименование
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО (НоменклатураСпр.Ссылка = Товары.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатурыСпр
		|		ПО (ВидНоменклатурыСпр.Ссылка = НоменклатураСпр.ВидНоменклатуры)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаСпр
		|		ПО (ХарактеристикаСпр.Ссылка = Товары.Характеристика)
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.НомерСтроки,
		|	Товары.Ссылка,
		|	Товары.Ссылка.Организация,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаСНДС / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаСНДС / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаСНДС,
		|	ВЫБОР
		|		КОГДА Товары.СуммаПродажи / Товары.Количество < 0.01
		|			ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПродажи / Товары.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ,
		|	Товары.СуммаПродажи,
		|	Товары.СуммаПродажиНДС,
		|	Товары.СуммаВознаграждения,
		|	ВЫБОР
		|		КОГДА Товары.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Товары.Покупатель,
		|	Товары.ДатаСчетаФактурыКомиссионера,
		|	ВидНоменклатурыСпр.ВариантОказанияУслуг,
		|	НоменклатураСпр.ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ХарактеристикаСпр.НаименованиеПолное = """"
		|						ТОГДА ХарактеристикаСпр.Наименование
		|					ИНАЧЕ ХарактеристикаСпр.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.НаименованиеПолное = """"
		|			ТОГДА НоменклатураСпр.Наименование
		|		ИНАЧЕ НоменклатураСпр.НаименованиеПолное
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Организация,
		|	Покупатель,
		|	ДатаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРаспределения.НомерСтрокиДокумента,
		|	ТаблицаРаспределения.Номенклатура,
		|	ТаблицаРаспределения.Характеристика,
		|	ТаблицаРаспределения.ЕдиницаИзмерения,
		|	ТаблицаРаспределения.СтавкаНДС,
		|	ТаблицаРаспределения.СуммаВознаграждения,
		|	ТаблицаРаспределения.Покупатель,
		|	ТаблицаРаспределения.ДатаСФ,
		|	ТаблицаРаспределения.ТипНоменклатуры,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК ТаблицаРаспределения
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтрокиДокумента,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.СтавкаНДС,
		|	Товары.ЦенаПередачи,
		|	Товары.СуммаПередачи,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаВознаграждения,
		|	Товары.Покупатель,
		|	Товары.ДатаСФ,
		|	ЛОЖЬ КАК ВидыЗапасовЗаполнены,
		|	1 КАК Коэффициент,
		|	1 КАК КлючСтроки,
		|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(50)) КАК ТипЗапасов,
		|	"""" КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.НомерСтрокиДокумента,
		|	Услуги.Номенклатура,
		|	Услуги.Характеристика,
		|	ВЫБОР
		|		КОГДА Услуги.ХарактеристикаНаименование = """"
		|			ТОГДА Услуги.НоменклатураНаименование
		|		ИНАЧЕ Услуги.НоменклатураНаименование + "" ("" + Услуги.ХарактеристикаНаименование + "")""
		|	КОНЕЦ КАК Содержание,
		|	Услуги.Количество,
		|	Услуги.СтавкаНДС,
		|	Услуги.Цена,
		|	Услуги.Сумма,
		|	Услуги.СуммаНДС,
		|	Услуги.СуммаВознаграждения,
		|	Услуги.Покупатель,
		|	Услуги.ДатаСФ,
		|	1 КАК КлючСтроки,
		|	0 КАК СуммаНДСВознаграждения
		|ИЗ
		|	Товары КАК Услуги
		|ГДЕ
		|	Услуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И (Услуги.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.Партнером)
		|			ИЛИ Услуги.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.Количество КАК Количество,
		|	ВидыЗапасов.НомерГТД.Код КАК НомерГТД,
		|	ВидыЗапасов.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
		|			ТОГДА ВЫБОР
		|					КОГДА ВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|						ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|					ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|				КОНЕЦ
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ВидыЗапасов.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сторно,
		|	ВидыЗапасов.ДатаСчетаФактурыКомиссионера КАК ДатаСФ,
		|	ВидыЗапасов.Покупатель,
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями.ВидыЗапасов КАК ВидыЗапасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ВидыЗапасов.Ссылка = &Ссылка
		|	И ВидыЗапасов.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК КлючСтроки,
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СчетФактураВыданный.Дата
		|		ИНАЧЕ Товары.ДатаСФ
		|	КОНЕЦ КАК ДатаСФ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СчетФактураВыданный.Ссылка ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ВыставленСФ,
		|	МАКСИМУМ(ЕСТЬNULL(СчетФактураВыданный.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка))) КАК СчетФактура,
		|	МИНИМУМ(Товары.НомерСтрокиДокумента) КАК ЗначениеУпорядочивания
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО Товары.Ссылка = СчетФактураВыданный.ДокументОснование
		|			И Товары.Организация = СчетФактураВыданный.Организация
		|			И (Товары.ДатаСФ = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ)
		|				ИЛИ Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1))
		|			И Товары.Покупатель = СчетФактураВыданный.Контрагент
		|			И (НЕ СчетФактураВыданный.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Товары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА Товары.Ссылка.Контрагент
		|		ИНАЧЕ Товары.Покупатель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Товары.ДатаСФ = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СчетФактураВыданный.Дата
		|		ИНАЧЕ Товары.ДатаСФ
		|	КОНЕЦ");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Выгружаем таблицы из запроса
	
	ТабРаспределния = РезультатыЗапроса[1].Выгрузить();
	ТабТовары       = РезультатыЗапроса[2].Выгрузить();
	ТабУслуги       = РезультатыЗапроса[3].Выгрузить();
	ВидыЗапасов     = РезультатыЗапроса[4].Выбрать();
	ТабПокупатели   = РезультатыЗапроса[5].Выгрузить();
	
	РеквизитыПоиска = "Номенклатура,Характеристика,ДатаСФ,Покупатель";
	
	// Распределение НДС вознаграждения
	
	БазаРаспределенияПоСуммеВознаграждения = ТабРаспределния.ВыгрузитьКолонку("СуммаВознаграждения");
	РаспределениеНДСВознаграждения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеИБ.СуммаНДСВознаграждения, 
		БазаРаспределенияПоСуммеВознаграждения);
	
	Если ЗначениеЗаполнено(РаспределениеНДСВознаграждения) Тогда
		ТабРаспределния.ЗагрузитьКолонку(РаспределениеНДСВознаграждения, "СуммаНДСВознаграждения");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(РеквизитыПоиска + ",СтавкаНДС");
	ЗаполняемыеРеквизиты = "СуммаНДСВознаграждения";
	
	Для Каждого СтрокаТаблицыРаспределения Из ТабРаспределния Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыРаспределения);
		
		Если СтрокаТаблицыРаспределения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли СтрокаТаблицыРаспределения.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			НайденныеСтроки = ТабУслуги.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыРаспределения, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
	КонецЦикла;
	
	// Распределение товаров по видам запасов
	
	СтруктураПоиска = Новый Структура(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	ЗаполняемыеРеквизиты = "НомерГТД,СтранаПроисхождения,ТипЗапасов";
	
	ТабТовары.Индексы.Добавить(РеквизитыПоиска + ",ВидыЗапасовЗаполнены");
	
	Пока ВидыЗапасов.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВидыЗапасов, РеквизитыПоиска);
		СтруктураПоиска.ВидыЗапасовЗаполнены = Ложь;
		
		НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		
		ОсталосьВидаЗапасов = ВидыЗапасов.Количество;
		Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
			
			Если ОсталосьВидаЗапасов = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаДокумента.Количество <= ОсталосьВидаЗапасов Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВидыЗапасов, ЗаполняемыеРеквизиты);
				СтрокаДокумента.ВидыЗапасовЗаполнены = Истина;
				
				ОсталосьВидаЗапасов = ОсталосьВидаЗапасов - СтрокаДокумента.Количество;
				
			Иначе
				
				// Выделение новой строки с заполненным видом запасов.
				НоваяСтрока = ТабТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				
				ДоляВидаЗапасовВСтрокеДокумента = ОсталосьВидаЗапасов / СтрокаДокумента.Количество;
				
				НоваяСтрока.Количество             = ОсталосьВидаЗапасов;
				НоваяСтрока.СуммаПередачи          = Окр(СтрокаДокумента.СуммаПередачи * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.Сумма                  = Окр(СтрокаДокумента.Сумма * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДС               = Окр(СтрокаДокумента.СуммаНДС * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаВознаграждения    = Окр(СтрокаДокумента.СуммаВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				НоваяСтрока.СуммаНДСВознаграждения = Окр(СтрокаДокумента.СуммаНДСВознаграждения * ДоляВидаЗапасовВСтрокеДокумента, 2);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыЗапасов, ЗаполняемыеРеквизиты);
				
				СтрокаДокумента.Количество             = СтрокаДокумента.Количество - НоваяСтрока.Количество;
				СтрокаДокумента.СуммаПередачи          = СтрокаДокумента.СуммаПередачи - НоваяСтрока.СуммаПередачи;
				СтрокаДокумента.Сумма                  = СтрокаДокумента.Сумма - НоваяСтрока.Сумма;
				СтрокаДокумента.СуммаНДС               = СтрокаДокумента.СуммаНДС - НоваяСтрока.СуммаНДС;
				СтрокаДокумента.СуммаВознаграждения    = СтрокаДокумента.СуммаВознаграждения - НоваяСтрока.СуммаВознаграждения;
				СтрокаДокумента.СуммаНДСВознаграждения = СтрокаДокумента.СуммаНДСВознаграждения - НоваяСтрока.СуммаНДСВознаграждения;
				
				ОсталосьВидаЗапасов = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	ТабУслуги.Сортировать("НомерСтрокиДокумента Возр");
	
	// Установление связей между таблицей покупателей и таблицами товаров и услуг.
	
	СтруктураПоиска = Новый Структура("Покупатель,ДатаСФ");
	ЗаполняемыеРеквизиты = "КлючСтроки";
	
	Для Каждого Строка Из ТабПокупатели Цикл
		
		Строка.КлючСтроки = ТабПокупатели.Индекс(Строка) + 1;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтрокиТоваров = ТабТовары.НайтиСтроки(СтруктураПоиска);
		НайденныеСтрокиУслуг   = ТабУслуги.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Строка, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
		Для Каждого СтрокаУслуг Из НайденныеСтрокиУслуг Цикл
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Строка, ЗаполняемыеРеквизиты);
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
			Инструкция.ИмяПКО = "Справочник_КонтрагентыИзФизЛиц_Отправка";
		Иначе
			Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтрДлина(ДанныеИБ.НомерСчета) >  20 
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		// Обход ограничения на длину номера счета в формате.
		НомерСчета = Лев(ДанныеИБ.НомерСчета,20);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.НомерСчета = НомерСчета;
		Иначе
			ДанныеXDTO.НомерСчета = НомерСчета;
		КонецЕсли;
	КонецЕсли;	
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресБанка";
	НоваяСтрока.СвойствоФормата = "АдресБанка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресБанкаДляРасчетов";
	НоваяСтрока.СвойствоФормата = "АдресБанкаДляРасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГородБанка";
	НоваяСтрока.СвойствоФормата = "ГородБанка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчетБанка";
	НоваяСтрока.СвойствоФормата = "КоррСчетБанка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеБанка";
	НоваяСтрока.СвойствоФормата = "НаименованиеБанка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеБанкаДляРасчетов";
	НоваяСтрока.СвойствоФормата = "НаименованиеБанкаДляРасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТелефоныБанка";
	НоваяСтрока.СвойствоФормата = "ТелефоныБанка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТелефоныБанкаДляРасчетов";
	НоваяСтрока.СвойствоФормата = "ТелефоныБанкаДляРасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтрДлина(ДанныеИБ.НомерСчета) >  20 
		И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		// Обход ограничение на длину номера счета в формате.
		НомерСчета = Лев(ДанныеИБ.НомерСчета,20);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.НомерСчета = НомерСчета;
		Иначе
			ДанныеXDTO.НомерСчета = НомерСчета;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыводитьМесяцПрописью", (ДанныеИБ.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	
	Если ДанныеИБ.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах Тогда
		ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах = Истина;
	КонецЕсли;
	
	ИнструкцияВидДоговора = Новый Структура;
	ИнструкцияВидДоговора.Вставить("ИмяПКО",   "Перечисление_ТипыДоговоров_Отправка");
	ИнструкцияВидДоговора.Вставить("Значение", ДанныеИБ.ТипДоговора);
	
	Если ДанныеИБ.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
		|ГДЕ
		|	ТаможеннаяДекларацияИмпорт.Договор = &Договор
		|	И ТаможеннаяДекларацияИмпорт.Проведен");
		Запрос.УстановитьПараметр("Договор", ДанныеИБ.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", "Прочее");
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ИнструкцияВидДоговора);
		КонецЕсли;
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ИнструкцияВидДоговора);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.2") Тогда
		ДанныеXDTO.КлючевыеСвойства.Наименование = СокрЛП(ДанныеИБ.Наименование);
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.0.beta")
		И СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 50 Тогда
		ДанныеXDTO.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 50);
	Иначе
		ДанныеXDTO.Наименование = СокрЛП(ДанныеИБ.Наименование);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") И ДанныеИБ.Свойство("ДополнительныеРеквизиты")
		И ТипЗнч(ДанныеИБ.ДополнительныеРеквизиты) = Тип("ТаблицаЗначений") Тогда
	
		Если ДанныеИБ.ДополнительныеРеквизиты.КОличество() > 0 Тогда
			ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДанныеИБ.ДополнительныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительнаяИнформация";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		
		ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796",,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);	
		Если ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт", Истина,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаПоУмолчанию);
	
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоЕДРПОУ";
	НоваяСтрока.СвойствоФормата = "КодПоЕДРПОУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ГоловнаяОрганизация = ДанныеИБ.Ссылка Тогда
		Если СтекВыгрузки.Количество() > 1 Тогда
			ДанныеXDTO.Вставить("ГоловнаяОрганизация", Неопределено);		
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("ГоловнаяОрганизация", Неопределено);
		КонецЕсли;
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Подразделения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РегистрацияПодразделенияВНалоговомОргане";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_РегистрацииВНалоговомОргане";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "ВышестоящееПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеИБ.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
		ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекущийОтветственный";
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	//Подразделение
	Если ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		СтруктураДанныеПодразделения = Новый Структура("Наименование, РегистрацияПодразделенияВНалоговомОргане", 
									ДанныеИБ.Подразделение.Наименование, Неопределено);
		ДанныеXDTO.Вставить("Подразделение", Новый Структура("Значение, ИмяПКО", СтруктураДанныеПодразделения, "Справочник_Подразделения_ИзСтруктуры"));
	Иначе
		ДанныеXDTO.Вставить("Подразделение", Неопределено);	
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоДРФО";
	НоваяСтрока.СвойствоФормата = "КодПоДРФО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "МестоРождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеСлужебное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФИО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДанныеФИО", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДанныеФИО;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область ФИО
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФИО", ДанныеИБ.Метаданные()) Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.ФИО;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ФИО) Тогда
		ДанныеXDTO.КлючевыеСвойства.ФИО = ДанныеИБ.Наименование;
	КонецЕсли;
	#КонецОбласти
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаРегистрации");
	ДанныеXDTO.Вставить("МестоРождения");
	ДанныеXDTO.Вставить("НаименованиеСлужебное");
	ДанныеXDTO.Вставить("УточнениеНаименования");
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВозвратТоваровОтПокупателя_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтКлиента;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументРеализации";
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РеализацияТоваровУслуг_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийВозвратОтПокупателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаСНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
		
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособКомпенсации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаСНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	КонецЕсли;
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеИзлишковТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДоходов";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Цена",                "Цена");
		ПравилаЗаполнения.Вставить("Характеристика",      "Характеристика");
		ПравилаЗаполнения.Вставить("Сумма",               "Сумма");
		ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",          "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦены) И ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.ВидЦены = ПолученныеДанные.Склад.РозничныйВидЦены;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	КонецЦикла;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ЗаполнитьТаблицуСтатьиДДСИХозОперации(?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ), 
										КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
	
	Если ДанныеИБ = Неопределено Тогда
		ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ПолученныеДанные, КомпонентыОбмена.ПараметрыКонвертации);
		Возврат;
	КонецЕсли;
	
	ДанныеИБСклад = ДанныеИБ.Склад;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
		// Восстанавливаем склад из первоначального документа.
		ДанныеИБ.Склад = ДанныеИБСклад;
	КонецЕсли;
	ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Табличные части
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРаспоряжения";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статус";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ПолученныеДанные.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",                 "Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",                       "Упаковка");
		ПравилаЗаполнения.Вставить("Номенклатура",                   "Номенклатура");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок",             "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Количество",                     "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		Если НЕ (СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") И СтруктураДанныхСтроки.КоличествоУпаковок <> 0) Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	
	
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ПТиУ_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Согласован";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомерГТД_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаСНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Валюта,Контрагент,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.Согласован  = Истина;
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", Строка.НомерГТД, Строка.СтранаПроисхождения));
			КонецЕсли;
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары с другим видом запасов.
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПТиУ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РеализацияТоваровУслуг";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Автор";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПереходаПраваСобственности";
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Менеджер";
	НоваяСтрока.СвойствоФормата = "Продавец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРеализацияТоваров_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРаспоряжения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Согласован";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Статус";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаСНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO);
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаВзаиморасчетов", "ВалютаВзаиморасчетов");
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// Руководитель и главный бухгалтер
	Если ДанныеXDTO.Свойство("Руководитель") И ЗначениеЗаполнено(ДанныеXDTO.Руководитель) Тогда
		
		РуководительСтруктура = Новый Структура;
		РуководительСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		РуководительСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.Руководитель);
		РуководительСтруктура.Вставить("Должность", НСтр("ru='Руководитель';uk='Керівник'"));
		РуководительСтруктура.Вставить("Наименование", НСтр("ru='Руководитель';uk='Керівник'"));
		РуководительСтруктура.Вставить("ОтветственноеЛицо", "Руководитель");
		РуководительСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Руководитель", РуководительСтруктура);
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ГлавныйБухгалтер") И ЗначениеЗаполнено(ДанныеXDTO.ГлавныйБухгалтер) Тогда
		
		ГлавныйБухгалтерСтруктура = Новый Структура;
		ГлавныйБухгалтерСтруктура.Вставить("Владелец", ПолученныеДанные.Организация);
		ГлавныйБухгалтерСтруктура.Вставить("ФизическоеЛицо", ДанныеXDTO.ГлавныйБухгалтер);
		ГлавныйБухгалтерСтруктура.Вставить("Должность", НСтр("ru='Главный бухгалтер';uk='Головний бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("Наименование", НСтр("ru='Главный бухгалтер';uk='Головний бухгалтер'"));
		ГлавныйБухгалтерСтруктура.Вставить("ОтветственноеЛицо", "ГлавныйБухгалтер");
		ГлавныйБухгалтерСтруктура.Вставить("ДатаНачала", Дата(1980,1,1));
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтерСтруктура);
		
	КонецЕсли;
	
	ПолученныеДанные.Проведен    = Истина;
	ПолученныеДанные.ДатаПлатежа = ПолученныеДанные.Дата;
	ПолученныеДанные.Согласован  = Истина;
	
	ПолученныеДанные.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	Если ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
		И Не ЗначениеЗаполнено(ПолученныеДанные.ДатаПереходаПраваСобственности) Тогда
		ПолученныеДанные.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	
	// Товары 
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Услуги  загружаются в ТЧ Товары 
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;		
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	
	// Подразделение
	ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные.ДатаРаспоряжения = ПолученныеДанные.Дата;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
	
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа.
			ДанныеИБ.Склад = ДанныеИБСклад;
		КонецЕсли;
	
		// Табличные части
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
		Для Каждого Строка Из ДанныеИБ.Товары Цикл
			Строка.Склад = ДанныеИБ.Склад;
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.Номенклатура = ЭлементПоУмолчанию_НоменклатураУслуга(КомпонентыОбмена);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВидыЦен", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВидыЦен;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаИзмененаВручную";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("ВидЦены", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ЦенаИзмененаВручную", Истина);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	МассивВидыЦен = Новый Массив;
	МассивВидыЦен.Добавить(Новый Структура("ВидЦены", ДанныеXDTO.ТипЦен));
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидыЦен", МассивВидыЦен);
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец
	// Выбираем ПКО в зависимости от типа владельца
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВариантВыводаМесяца";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ);
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУстановкиКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыВСоглашенияСКлиентами_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыВСоглашенияСКлиентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СоглашенияСКлиентами;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СоглашенияСКлиентами";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Валюта,Контрагент,Организация,Статус,ХозяйственнаяОперация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ВидДоговора = "СКомиссионером"  Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	КонецЕсли;
	ВалютаВзаиморасчетов = ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И Не ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПорядокОплаты) Тогда
		Если ПолученныеДанные.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах
		Иначе
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыВСоглашенияСПоставщик_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыВСоглашенияСПоставщик_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СоглашенияСПоставщиками;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СоглашенияСПоставщиками";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХозяйственнаяОперация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Валюта,Контрагент,Организация,Статус,ХозяйственнаяОперация");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ВидДоговора = "СКомитентом"  Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	КонецЕсли;
	ВалютаВзаиморасчетов = ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов;
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		Если ТипЗнч(ВалютаВзаиморасчетов) = Тип("Структура")
			И Не ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПорядокОплаты) Тогда
		Если ПолученныеДанные.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
		Иначе
			ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыДоговоров_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		ПолученныеДанные.Наименование = НСтр("ru='Основной договор';uk='Основний договір'");
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыДоговоров_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПорядокОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Дата,Контрагент,Наименование,Номер,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.РасчетыВУсловныхЕдиницах Тогда
		ПолученныеДанные.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Контрагенты";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮрФизЛицо_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Используется = Истина;
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
	
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ГоловнойКонтрагент) Тогда
			ПолученныеДанные.ГоловнойКонтрагент = ДанныеИБ.ГоловнойКонтрагент;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.СтранаРегистрации, "Код") <> "643" Тогда
			ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		КонецЕсли;
	ИначеЕсли ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.ЮрФизЛицо = ДанныеИБ.ЮрФизЛицо;
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.СтавкаНДС)
			И Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
			ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИндивидуальныйПредприниматель";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоЕДРПОУ";
	НоваяСтрока.СвойствоФормата = "КодПоЕДРПОУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("КодПоЕДРПОУ");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	// ЮрФизЛицо
	Если ДанныеXDTO.КлючевыеСвойства.ЮридическоеФизическоеЛицо.Значение = "ЮридическоеЛицо" Тогда
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Иначе
		ПолученныеДанные.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	Если Не ДанныеXDTO.Свойство("КонтактнаяИнформация")
		Или Не ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
		Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
				ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
				ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				ВидКИОбъект.Используется = Истина;
				ВидКИОбъект.Записать();
				ТекВидКИ = ВидКИОбъект.Ссылка;
			КонецЕсли;
		ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ИначеЕсли ВидКИСтрокой = "Факс" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		Иначе
			Продолжить;
		КонецЕсли;
		ТекТипКИ = ТекВидКИ.Тип;
		СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
		ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
		СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
		СтрокаКИ.Вид = ТекВидКИ;
		СтрокаКИ.Тип = ТекТипКИ;
		ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
	КонецЦикла;
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтруктураПредприятия;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СтруктураПредприятия";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСклада");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ФизЛица";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоДРФО";
	НоваяСтрока.СвойствоФормата = "КодПоДРФО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ЭтоГруппа,КодПоДРФО");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО") Тогда
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ПодробныеДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	ЗагрузитьДополнительныеСведения(ФизЛицоСсылка, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа
Процедура ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанкиГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Валюты";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаУкраинском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаУкраинском";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецДополнительныхЗначений";
	НоваяСтрока.СвойствоФормата = "ВладелецДополнительныхЗначений";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияИспользуются";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияИспользуются";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияСВесом";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияСВесом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Заголовок";
	НоваяСтрока.СвойствоФормата = "Заголовок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыВыбораЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыВыбораЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаполнятьОбязательно";
	НоваяСтрока.СвойствоФормата = "ЗаполнятьОбязательно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МногострочноеПолеВвода";
	НоваяСтрока.СвойствоФормата = "МногострочноеПолеВвода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подсказка";
	НоваяСтрока.СвойствоФормата = "Подсказка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФорматСвойства";
	НоваяСтрока.СвойствоФормата = "ФорматСвойства";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДополнительноеСведение";
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	ДанныеДляЗаписиВИБ.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вес";
	НоваяСтрока.СвойствоФормата = "Вес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
			"Код,
			|Наименование");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("ФизическоеЛицо,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо,"Справочник_ФизическиеЛица_Отправка"));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФизЛицо = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	Если ФизЛицо <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо", Новый Структура("Значение, ИмяПКО", ФизЛицо,"Справочник_ФизическиеЛица_Получение"));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", ДанныеИБ.Родитель);
		Инструкция.Вставить("ИмяПКО", "Справочник_СтатьиДДС_Группа");
		
		ДанныеXDTO.Вставить("Группа", Инструкция);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Группа
Процедура ДобавитьПКО_Справочник_СтатьиДДС_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС_Группа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Группа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов
Процедура ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДоходов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов
Процедура ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиРасходов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НаименованиеДляВыгрузки = ДанныеИБ.Наименование;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		НаименованиеДляВыгрузки = Лев(ДанныеИБ.Наименование, 100)
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", НаименованиеДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПередЗаписьюСтатьиРасходов(ДанныеИБ, ПолученныеДанные);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Идентификатор";
	НоваяСтрока.СвойствоФормата = "Идентификатор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТочностьОкругления";
	НоваяСтрока.СвойствоФормата = "ТочностьОкругления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Идентификатор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИспользоватьПриПродаже";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗаданияЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", ДанныеИБ.ВалютаЦены);
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
	ПолученныеДанные.ИспользоватьПриПродаже = Истина;
	
	// Если идентификатор, сформированный по наименованию, занят, устанавливается автосгенерированный.
	ПолученныеДанные.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(ПолученныеДанные.Наименование);
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
	
		ЗначениеВалюты = ДанныеXDTO.КлючевыеСвойства.ВалютаЦены; 
		Если ЗначениеВалюты.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ЗначениеВалюты, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		
		// Идентификатор: логика "не перезаполнять".
		Если ЗначениеЗаполнено(ДанныеИБ.Идентификатор) Тогда
			ПолученныеДанные.Идентификатор = ДанныеИБ.Идентификатор;
		КонецЕсли;
		
		// СпособЗаданияЦены: логика "не перезаполнять".
		Если ЗначениеЗаполнено(ДанныеИБ.СпособЗаданияЦены) Тогда
			ПолученныеДанные.СпособЗаданияЦены = ДанныеИБ.СпособЗаданияЦены;
		КонецЕсли;
		
		// ИспользоватьПриПродаже: логика "не перезаполнять".
		ПолученныеДанные.ИспользоватьПриПродаже = ДанныеИБ.ИспользоватьПриПродаже;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки
Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Упаковки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Высота";
	НоваяСтрока.СвойствоФормата = "Высота";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Глубина";
	НоваяСтрока.СвойствоФормата = "Глубина";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Объем";
	НоваяСтрока.СвойствоФормата = "Объем";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ширина";
	НоваяСтрока.СвойствоФормата = "Ширина";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ЕдиницаИзмерения,Коэффициент,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Коэффициент = ?(ДанныеИБ.Знаменатель = 0, ДанныеИБ.Числитель, Окр(ДанныеИБ.Числитель / ДанныеИБ.Знаменатель,3));
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Коэффициент", Коэффициент);
	Иначе
		ДанныеXDTO.Вставить("Коэффициент", Коэффициент);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПартнера, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПартнера, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресСклада, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСклада, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОпераций_ПТиУ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ПТиУ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту, "ЗакупкаПоИмпорту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию, "ПриемНаКомиссию");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийРеализацияТоваров_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРеализацияТоваров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию, "ПередачаНаКомиссию");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту, "РеализацияКлиенту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет, "РеализацияКлиенту");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОформленияПродажи;
		ПравилоКонвертации.ТипXDTO = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыДоговоров_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыДоговоров_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДоговоров;
		ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.Импорт, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СДавальцем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СКомитентом, "СКомитентом");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПереработчиком, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДоговоров.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ТипыСкладов_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыСкладов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.ОптовыйСклад, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОпераций_ПТиУ_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ПТиУ_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийРеализацияТоваров_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРеализацияТоваров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_ВПути", Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_Реализовано", Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыЭД_Реализация_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭД_Реализация_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОформленияПродажи;
		ПравилоКонвертации.ТипXDTO = "ВидыЭД";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АктНаПередачуПрав", Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
		ЗначенияДляПолучения.Вставить("ТОРГ12", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыДоговоров_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыДоговоров_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДоговоров;
		ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ТипыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ТипыДоговоров.СКомиссионером);
		ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ТипыДоговоров.СКомитентом);
		ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ТипыДоговоров.СКомитентом);
		ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ТипыДоговоров.СПокупателем);
		ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ТипыДоговоров.СПоставщиком);
		ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ТипыДоговоров.СПоставщиком);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ЮрФизЛицо_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮрФизЛицо_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыСкладов_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыСкладов_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
		ПравилоКонвертации.ТипXDTO = "ТипыСкладов";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.ОптовыйСклад);
		ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.РозничныйМагазин);
		ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыОперацийВозвратОтПокупателя.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийВозвратОтПокупателя";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратОтПокупателя";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера, "ВозвратОтКомиссионера");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя, "ВозвратОтРозничногоПокупателя");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента, "ВозвратОтКлиента");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратОтКомиссионера", Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	ЗначенияДляПолучения.Вставить("ВозвратОтРозничногоПокупателя", Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ЗначенияДляПолучения.Вставить("ВозвратОтКлиента", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийВозвратПоставщику.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийВозвратПоставщику";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратПоставщику";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту, "ВозвратКомитенту");
	ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику, "ВозвратПоставщику");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратКомитенту", Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	ЗначенияДляПолучения.Вставить("ВозвратПоставщику", Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСборкаТоваров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСборкаТоваров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыОперацийЗаказаНаСборку;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие, "Разборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих, "Сборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие);
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
    ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС14, "НДС14");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС7, "НДС7");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НеНДС, "НеНДС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
    ЗначенияДляПолучения.Вставить("НДС14", Перечисления.СтавкиНДС.НДС14);
	ЗначенияДляПолучения.Вставить("НДС7", Перечисления.СтавкиНДС.НДС7);
	ЗначенияДляПолучения.Вставить("НеНДС", Перечисления.СтавкиНДС.НеНДС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыНоменклатуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара, "МногооборотнаяТара");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисления_ТипыНалогообложенияНДС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисления_ТипыНалогообложенияНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
	ПравилоКонвертации.ТипXDTO = "Налогообложение";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию, "ПоФактическомуИспользованию");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт, "ПродажаНаЭкспорт");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС, "ПродажаОблагаетсяНДС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПоФактическомуИспользованию", Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию);
	ЗначенияДляПолучения.Вставить("ПродажаНаЭкспорт", Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	ЗначенияДляПолучения.Вставить("ПродажаНеОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	ЗначенияДляПолучения.Вставить("ПродажаОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	Если СтрокаВерсии = "1.6.BAS" Тогда
		Возврат ВерсияФорматаЧислом("1.6");
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неправильный формат параметра СтрокаВерсии1: %1';uk='Неправильний формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидКИПартнераПоВидуКИКонтрагента(ВидКИКонтрагента, ИспользоватьПартнеровКакКонтрагентов)
	ВидКиПартнера = Неопределено;
	
	Если ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ИначеЕсли ВидКИКонтрагента = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
		ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	ИначеЕсли ЗначениеЗаполнено(ВидКИКонтрагента) И ИспользоватьПартнеровКакКонтрагентов Тогда
		// Прочие предопределенные виды КИ контрагента не переносятся (нет соответствий предопределенным видам КИ партнера).
		Если ОбщегоНазначения.СсылкаСуществует(ВидКИКонтрагента)
			И ТипЗнч(ВидКИКонтрагента) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИКонтрагента, "Предопределенный") = Истина Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		// Поиск или создание прочих видов КИ.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.ВидыКонтактнойИнформации
		|ГДЕ Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры))
		|	И ПометкаУдаления = Ложь
		|	И Тип = &ТипКИ И Наименование = &НаименованиеКИ";
		
		ЗначенияРеквизитовВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИКонтрагента, "Тип, Наименование");
		Запрос.УстановитьПараметр("ТипКИ", ЗначенияРеквизитовВидаКИ.Тип);
		Запрос.УстановитьПараметр("НаименованиеКИ", ЗначенияРеквизитовВидаКИ.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидКиПартнера = Выборка.Ссылка;
		Иначе
			НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйВидКИ, ВидКИКонтрагента,,"Родитель, Владелец, Предопределенный, ИмяПредопределенныхДанных");
			НовыйВидКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
			НовыйВидКИ.ОбменДанными.Загрузка = Истина;
			НовыйВидКИ.Используется = Истина;
			НовыйВидКИ.Записать();
			ВидКИПартнера = НовыйВидКИ.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидКИПартнера;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO, Подразделение = Неопределено)
	Если Подразделение = Неопределено Тогда
		Подразделение = ДанныеИБ.Подразделение;
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		
		РегистрацияПодразделенияВНалоговомОргане = ОпределитьРегистрациюВНалоговомОргане(Подразделение, ДанныеИБ.Организация);
		
		СтруктураДанныеПодразделения = Новый Структура(
			"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
			Строка(Подразделение),
			РегистрацияПодразделенияВНалоговомОргане);
		
		Инструкция = Новый Структура(
			"Значение, ИмяПКО",
			СтруктураДанныеПодразделения,
			"Справочник_Подразделения_ИзСтруктуры");
		
		ДанныеXDTO.Вставить("Подразделение", Инструкция);
		
	Иначе	
		ДанныеXDTO.Вставить("Подразделение", Неопределено);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена,  ДанныеИБ, ДанныеXDTO, ИмяРеквизитаХраненияПодразделения)
	ДанныеXDTO.Вставить("Подразделение", Неопределено);
	Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		ИсточникДанныхОПодразделении = ДанныеИБ[ИмяРеквизитаХраненияПодразделения];
		Если ЗначениеЗаполнено(ИсточникДанныхОПодразделении) Тогда
		    СоответствиеДляПолученияПодразделений = Неопределено;
		    ТекПодразделение = Неопределено;
		    ДополнитьСоответствие = Истина;
		    КомпонентыОбмена.ПараметрыКонвертации.Свойство("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
		    Если СоответствиеДляПолученияПодразделений = Неопределено Тогда
		    	СоответствиеДляПолученияПодразделений = Новый Соответствие;
		    Иначе 
		    	ТекПодразделение = СоответствиеДляПолученияПодразделений.Получить(ИсточникДанныхОПодразделении);
		    КонецЕсли;
		    Если ТекПодразделение = Неопределено Тогда
		    	ТекПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанныхОПодразделении, "Подразделение");
		    Иначе
		    	ДополнитьСоответствие = Ложь;
		    КонецЕсли;
		    ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO, ТекПодразделение);
			Если ДополнитьСоответствие Тогда
				СоответствиеДляПолученияПодразделений.Вставить(ИсточникДанныхОПодразделении, ТекПодразделение);
				КомпонентыОбмена.ПараметрыКонвертации.Вставить("СоответствиеДляПолученияПодразделений", СоответствиеДляПолученияПодразделений);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		// Выгрузка данных о ФИО.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ИмяПКО = "Справочник_Банки";
		ИмяПКОГруппа = "Справочник_БанкиГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ИмяПКО = "Справочник_СтатьиРасходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен") Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ Из ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтруктураДанныеПодразделения = Новый Структура(
				"Наименование, РегистрацияПодразделенияВНалоговомОргане", 
				Строка(СтрокаТЧ.Значение), Неопределено);
	
			Инструкция = Новый Структура(
				"Значение, ИмяПКО",
				СтруктураДанныеПодразделения,
				"Справочник_Подразделения_ИзСтруктуры");
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = Инструкция;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваXDTO = "Валюта", ИмяДопСвойства = "Валюта")
	Если ДанныеXDTO.Свойство(ИмяСвойстваXDTO)
		И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваXDTO]) Тогда
		
		Если ДанныеXDTO[ИмяСвойстваXDTO].Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO[ИмяСвойстваXDTO], ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваXDTO = "Договор")
	Если ДанныеXDTO.Свойство(ИмяСвойстваXDTO) И ЗначениеЗаполнено(ДанныеXDTO[ИмяСвойстваXDTO]) Тогда
		ЗначениеСвойстваXDTO = ДанныеXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("Структура")
			И ЗначениеСвойстваXDTO.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Договор", Новый Структура("Значение, ИмяПКО", ЗначениеСвойстваXDTO, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Функция ДоговорИнструкцияКонвертацииПоДаннымВзаиморасчетов(ПараметрыПоУмолчанию, КомпонентыОбмена, Заказ = Неопределено, ДанныеИБ = Неопределено)
	// Функция формирует и возвращает инструкция для выгрузки договора
	// по полученным параметрам и настройкам узла плана обмена.
	//
	// Функция, по сформированной инструкции, выполняет принудительную выгрузку договора в файл обмена.
	//
	// Перед вызовом этой функции выполняется проверка наличия договора в выгружаемом документе
	// или в объекте взаиморасчетов, если договор не найден, то выполняется вызов этой функции.
	
	СтруктураДанныеДоговора = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ДоговорЗаполнен = Ложь;
	СтруктураДанныеДоговора.ВидДоговора = ПараметрыПоУмолчанию.ВидДоговора;
	Если ЗначениеЗаполнено(Заказ) И ДанныеИБ <> Неопределено
		И НЕ ДопАналитикаПоДоговорам(КомпонентыОбмена).ДоговорВДоговор Тогда
		Если ТипЗнч(Заказ) = Тип("Структура") Тогда
			// Если в документе соглашение и заказ - 2 разных реквизита, то значения этих реквизитов передаются в структуре:
			// "Заказ" - Ссылка на Заказ клиента (поставщику).
			// "Соглашение" - Ссылка на Соглашение с клиентом (поставщиком).
			// "Сделки" - Ссылка на Сделку с клиентом.
			ЗаказСсылка = Неопределено;
			СоглашениеСсылка = Неопределено;
			СделкаСсылка = Неопределено;
			ЭтоЗаказ = Заказ.Свойство("Заказ", ЗаказСсылка) И ЗначениеЗаполнено(ЗаказСсылка);
			ЭтоСоглашение = Заказ.Свойство("Соглашение", СоглашениеСсылка) И ЗначениеЗаполнено(СоглашениеСсылка);
			ЭтоСделка = Заказ.Свойство("Сделка", СделкаСсылка) И ЗначениеЗаполнено(СделкаСсылка);
		Иначе
			// Подразумевается, что реквизит выгружаемого документа "Заказ" - имеет составной тип
			// и может быть Заказом, Соглашением, Сделкой или другим видом документа/справочника,
			// помимо этого у объекта, указанного в этом реквизите могут быть реквизиты "Соглашение" и/или "Сделка".
			ЗаказСсылка = Заказ;
			СоглашениеСсылка = Заказ;
			СделкаСсылка = Заказ;
			ЭтоЗаказ = ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента")
				//++НЕ УТКА
				ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказДавальца")
				//--НЕ УТКА
				ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику")
				ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента");
			
			РеквизитыЗаказа = ?(Заказ.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено, "Соглашение", "");
			РеквизитыЗаказа = РеквизитыЗаказа + ?(Заказ.Метаданные().Реквизиты.Найти("Сделка") <> Неопределено,
													?(ЗначениеЗаполнено(РеквизитыЗаказа), ", ", "") + "Сделка", "");
			Если ЗначениеЗаполнено(РеквизитыЗаказа) Тогда
				СтруктураЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, РеквизитыЗаказа);
			Иначе
				СтруктураЗаказа = Новый Структура;
			КонецЕсли;
			ЭтоСоглашение = ТипЗнч(Заказ) = Тип("СправочникСсылка.СоглашенияСКлиентами")
				ИЛИ ТипЗнч(Заказ) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
				ИЛИ (СтруктураЗаказа.Свойство("Соглашение", СоглашениеСсылка) И ЗначениеЗаполнено(СоглашениеСсылка));
			ЭтоСделка = ТипЗнч(Заказ) = Тип("СправочникСсылка.СделкиСКлиентами")
				ИЛИ (СтруктураЗаказа.Свойство("Сделка", СделкаСсылка) И ЗначениеЗаполнено(СделкаСсылка));
		КонецЕсли;
		Если ЭтоЗаказ ИЛИ ЭтоСоглашение ИЛИ ЭтоСделка Тогда
			Если ЭтоЗаказ И КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам.ЗаказВДоговор Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗаказКлиента.Ссылка,
					|	ЗаказКлиента.Контрагент,
					|	ЗаказКлиента.Организация,
					|	ЗаказКлиента.Дата,
					|	ЗаказКлиента.Номер,
					|	ЗаказКлиента.Валюта,
					|	ЗаказКлиента.Представление
					|ПОМЕСТИТЬ ВТ_Документ
					|ИЗ
					|	Документ.ЗаказКлиента КАК ЗаказКлиента
					|ГДЕ
					|	ЗаказКлиента.Ссылка = &Ссылка
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Организация,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Дата,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Номер,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
					|	ЗаявкаНаВозвратТоваровОтКлиента.Представление
					|ИЗ
					|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
					|ГДЕ
					|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ЗаказПоставщику.Ссылка,
					|	ЗаказПоставщику.Контрагент,
					|	ЗаказПоставщику.Организация,
					|	ЗаказПоставщику.Дата,
					|	ЗаказПоставщику.Номер,
					|	ЗаказПоставщику.Валюта,
					|	ЗаказПоставщику.Представление
					|ИЗ
					|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
					|ГДЕ
					|	ЗаказПоставщику.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_Документ.Ссылка,
					|	ВТ_Документ.Контрагент,
					|	ВТ_Документ.Организация,
					|	ВТ_Документ.Дата,
					|	ВТ_Документ.Номер,
					|	ВТ_Документ.Валюта КАК ВалютаВзаиморасчетов,
					|	ВТ_Документ.Представление КАК Наименование,
					|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
					|	ВалютаРегламентированногоУчета.Значение <> КурсыВалютСрезПоследних.Валюта КАК РасчетыВУсловныхЕдиницах
					|ИЗ
					|	ВТ_Документ КАК ВТ_Документ
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
					|		ПО ВТ_Документ.Валюта = КурсыВалютСрезПоследних.Валюта,
					|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
				
				Запрос.УстановитьПараметр("ДатаДок", ДанныеИБ.Дата);
				Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
					СтруктураДанныеДоговора.Наименование = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(ЗаказСсылка, Выборка.Номер, Выборка.Дата);
					ДоговорЗаполнен = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоСоглашение И ДопАналитикаПоДоговорам(КомпонентыОбмена).СоглашениеВДоговор Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СоглашенияСКлиентами.Ссылка,
					|	СоглашенияСКлиентами.Контрагент,
					|	СоглашенияСКлиентами.Организация,
					|	СоглашенияСКлиентами.Дата,
					|	СоглашенияСКлиентами.Номер,
					|	СоглашенияСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
					|	СоглашенияСКлиентами.Наименование КАК Наименование,
					|	СоглашенияСКлиентами.Типовое КАК Типовое
					|ПОМЕСТИТЬ ВТ_Соглашение
					|ИЗ
					|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
					|ГДЕ
					|	СоглашенияСКлиентами.Ссылка = &Ссылка
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	СоглашенияСПоставщиками.Ссылка,
					|	СоглашенияСПоставщиками.Контрагент,
					|	СоглашенияСПоставщиками.Организация,
					|	СоглашенияСПоставщиками.Дата,
					|	СоглашенияСПоставщиками.Номер,
					|	СоглашенияСПоставщиками.Валюта,
					|	СоглашенияСПоставщиками.Наименование,
					|	Ложь
					|ИЗ
					|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
					|ГДЕ
					|	СоглашенияСПоставщиками.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СоглашенияСКлиентами.Ссылка,
					|	СоглашенияСКлиентами.Контрагент,
					|	СоглашенияСКлиентами.Организация,
					|	СоглашенияСКлиентами.Дата,
					|	СоглашенияСКлиентами.Номер,
					|	СоглашенияСКлиентами.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
					|	СоглашенияСКлиентами.Наименование КАК Наименование,
					|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
					|	ВалютаРегламентированногоУчета.Значение <> КурсыВалютСрезПоследних.Валюта КАК РасчетыВУсловныхЕдиницах,
					|	СоглашенияСКлиентами.Типовое
					|ИЗ
					|	ВТ_Соглашение КАК СоглашенияСКлиентами
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
					|		ПО СоглашенияСКлиентами.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта,
					|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";
				
				Запрос.УстановитьПараметр("ДатаДок", ДанныеИБ.Дата);
				Запрос.УстановитьПараметр("Ссылка", СоглашениеСсылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
					Если НЕ ЗначениеЗаполнено(СтруктураДанныеДоговора.Контрагент) Тогда
						Если ДанныеИБ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
							СтруктураДанныеДоговора.Контрагент = ДанныеИБ.Контрагент;
						Иначе
							СтруктураДанныеДоговора.Контрагент = ПараметрыПоУмолчанию.Контрагент;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтруктураДанныеДоговора.Организация) Тогда
						Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
							СтруктураДанныеДоговора.Организация = ДанныеИБ.Организация;
						Иначе
							СтруктураДанныеДоговора.Организация = ПараметрыПоУмолчанию.Организация;
						КонецЕсли;
					КонецЕсли;
					Если СоглашениеСсылка.Метаданные().Имя = "СоглашенияСКлиентами" Тогда
						Наименование = ?(Выборка.Типовое, НСтр("ru='Типовое';uk='Типова'"), НСтр("ru='Индивидуальное';uk='Індивідуальна'")) + "; ";
					Иначе
					    Наименование = "";
					КонецЕсли;
					Наименование = Выборка.Наименование
						+ ?(ЗначениеЗаполнено(Выборка.Номер), " №" + Выборка.Номер, "") + " "
						+ ?(ЗначениеЗаполнено(Выборка.Дата), " от " + Формат(Выборка.Дата, "ДЛФ=D"), "");
					СтруктураДанныеДоговора.Наименование = СокрЛП(Наименование);
					ДоговорЗаполнен = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоСделка И ДопАналитикаПоДоговорам(КомпонентыОбмена).СделкаВДоговор Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СделкиСКлиентами.Ссылка,
					|	СделкиСКлиентами.Код КАК Номер,
					|	"""" КАК Контрагент,
					|	"""" КАК Организация,
					|	СделкиСКлиентами.ДатаНачала КАК Дата,
					|	СделкиСКлиентами.ВалютаПервичногоСпроса КАК ВалютаВзаиморасчетов,
					|	СделкиСКлиентами.Наименование КАК Наименование,
					|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
					|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
					|	ВалютаРегламентированногоУчета.Значение <> КурсыВалютСрезПоследних.Валюта КАК РасчетыВУсловныхЕдиницах
					|ИЗ
					|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
					|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДок, ) КАК КурсыВалютСрезПоследних
					|		ПО СделкиСКлиентами.ВалютаПервичногоСпроса = КурсыВалютСрезПоследних.Валюта
					|ГДЕ
					|	СделкиСКлиентами.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("ДатаДок", ДанныеИБ.Дата);
				Запрос.УстановитьПараметр("Ссылка", СделкаСсылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, Выборка);
					СтруктураДанныеДоговора.Организация = ДанныеИБ.Организация;
					Если ДанныеИБ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
						СтруктураДанныеДоговора.Контрагент = ДанныеИБ.Контрагент;
					Иначе
						СтруктураДанныеДоговора.Контрагент = ПараметрыПоУмолчанию.Контрагент;
					КонецЕсли;
					СтруктураДанныеДоговора.Наименование = ?(ЗначениеЗаполнено(СделкаСсылка.Метаданные().ПредставлениеОбъекта),
						СделкаСсылка.Метаданные().ПредставлениеОбъекта, СделкаСсылка.Метаданные().Синоним)
							+ ?(ЗначениеЗаполнено(Выборка.Номер), " " + Выборка.Номер, "");
					ДоговорЗаполнен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоговорЗаполнен Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ПараметрыПоУмолчанию);
		СтруктураДанныеДоговора.Наименование = НСтр("ru='Основной договор';uk='Основний договір'");
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.3") Тогда
		СтруктураДанныеДоговора.ВнешнийИдентификатор = СтруктураДанныеДоговора.Наименование;
	КонецЕсли;
	
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	СтрокаДопРеквизитов = ДопРеквизиты.Добавить();
	СтрокаДопРеквизитов.Свойство = Новый Структура("Наименование", "ВиртуальныйДоговор");
	СтрокаДопРеквизитов.ЗначениеСвойства = "ВиртуальныйДоговор";
	СтруктураДанныеДоговора.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	
	Договор = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
	ИспользуемыеПКО = Новый Массив();
	ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
	ПравилоОбработкиДоговоров = Новый Структура();
	ПравилоОбработкиДоговоров.Вставить("ИспользуемыеПКО", ИспользуемыеПКО);
	ПравилоОбработкиДоговоров.Вставить("ПриОбработке",    "");
	ПравилоОбработкиДоговоров.Вставить("Имя",             "Договоры из структуры");
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныеДоговора, ПравилоОбработкиДоговоров);
	
	Возврат Договор;
КонецФункции
Функция ДоговорФиксированнаяСтруктураКлючей()
	ПараметрыПоУмолчанию = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов, ВидДоговора, РасчетыВУсловныхЕдиницах, Наименование, Дата, Номер, ВнешнийИдентификатор");
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыПоУмолчанию);
КонецФункции
Функция ДопАналитикаПоДоговорам(КомпонентыОбмена)
	НастройкиДопАналитикиПоДоговорам = КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам;
	Если НастройкиДопАналитикиПоДоговорам = Неопределено Тогда
		ПолучитьНастройкиВыгрузкиАналитикиПоДоговорам(НастройкиДопАналитикиПоДоговорам, КомпонентыОбмена);
		КомпонентыОбмена.ПараметрыКонвертации.НастройкиДопАналитикиПоДоговорам = НастройкиДопАналитикиПоДоговорам;
	КонецЕсли;
	
	Возврат НастройкиДопАналитикиПоДоговорам;
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО, ДопРеквизитыСтрока.ТипЗначения);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.3") Тогда
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда
			НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
			Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
				НовЗапись = НаборЗаписейФИО.Добавить();
				ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
				НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
				НовЗапись.Период = СтрокаФИО.НачалоПериода;
			КонецЦикла;
			НаборЗаписейФИО.Записать();
		КонецЕсли;
	Иначе 
		// Запись ФИО по наименованию физ.лица.
		ФИОСтрокой = ПолученныеДанные.Наименование;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(,Новый Структура("ФизическоеЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ТипЗначенияСвойства)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		Возврат;
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "БанкГруппа")>0 Тогда
		ИмяПКО = "Справочник_БанкиГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
		ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
		КонецЕсли;
		ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
		ТипЗначенияСвойства = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Организации");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		ИмяПКО = "Справочник_Подразделения_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Склады");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДоходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
		ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяРасходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиРасходов";
		ТипЗначенияСвойства = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов");
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТипЦен")>0 Тогда
		ИмяПКО = "Справочник_ТипыЦен";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ВидыЦен");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеПартнераВШапкеДокумента(Объект)
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер)
		Или Объект.Партнер <> Партнер Тогда
	
		Объект.Партнер = Партнер;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект)
	// Необходимые проверки перед заполнением соглашения в шапке документа.
	// Проверка на использование соглашений по функциональным опциям
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполненность обязательных, для подбора соглашений реквизитов.
	// Если хотя бы один реквизит не заполнен, невозможно найти или создать соглашение.
	Если Не (ЗначениеЗаполнено(Объект.Партнер)
		И ОбщегоНазначения.СсылкаСуществует(Объект.Партнер)) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск подходящего соглашения.
	// 1. Проверить, заполнено ли соглашение в документе.
	//    Если соглашение в документе заполнено, тогда проверить соответствует ли реквизиты соглашения,
	//    реквизитам документа. При соответствии реквизитов соглашения реквизитам документа,
	//    изменять соглашение в документе не требуется.
	// 2. Если соглашение в документе не заполнено, или реквизиты соглашения не соответствуют
	//    реквизитам документа, осуществим подбор соглашения в документ из уже имеющихся в базе соглашений.
	// 3. Если подобрать соглашение не удалось, создаем новое соглашение.
	
	// Инициализируем ключевые свойства соглашения.
	ИспользоватьТиповыеСоглашения                  = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашения           = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьДоговорыКонтрагентов               = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ОтгрузкаБезПереходаПраваСобственности          = Ложь;
	СоглашениеСодержитДоговор                      = ИспользоватьДоговорыКонтрагентов И ЗначениеЗаполнено(Объект.Договор);
	ПорядокРасчетов                                = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	Иначе
		ХозОперацияСоглашения                 = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ОтгрузкаБезПереходаПраваСобственности = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
	КонецЕсли;
	
	ВалютаВзаиморасчетовСоглашения = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", Объект.Метаданные()), 
		Объект.ВалютаВзаиморасчетов, Объект.Валюта);
		
	Если ВалютаВзаиморасчетовСоглашения = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
	ИначеЕсли ВалютаВзаиморасчетовСоглашения <> Объект.Валюта Тогда
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	Иначе
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
	
	Если СоглашениеСодержитДоговор Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов, ПорядокОплаты, ПорядокРасчетов");
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетовСоглашения = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокОплаты) Тогда
			ПорядокОплаты = РеквизитыДоговора.ПорядокОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокРасчетов) Тогда
			ПорядокРасчетов = РеквизитыДоговора.ПорядокРасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализируем доп. условия для подбора соглашений.
	УсловиеПоОтгрузкеБезПереходаПраваСобственности = "";
	УсловиеПоИспользованиюДоговоровКонтрагентов    = "";
	ШаблонДополнительныхУсловий                    = "%1 %2";
	
	Если ОтгрузкаБезПереходаПраваСобственности Тогда
		УсловиеПоОтгрузкеБезПереходаПраваСобственности = "И СоглашенияСКлиентами.ВозможнаРеализацияБезПереходаПраваСобственности = ИСТИНА";
	КонецЕсли;
	
	Если СоглашениеСодержитДоговор Тогда
		УсловиеПоИспользованиюДоговоровКонтрагентов = "И СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов = ИСТИНА";
	КонецЕсли;
	
	ТекстДополнительныхУсловий = СтрШаблон(ШаблонДополнительныхУсловий,
		УсловиеПоОтгрузкеБезПереходаПраваСобственности, УсловиеПоИспользованиюДоговоровКонтрагентов);
	
	// Пункт 1. Проверим, является ли заполненное в объекте соглашение корректным для данного документа.
	// Если соглашение корректное, то дальнейшего подбора не требуется.
	СоглашениеЗаполненоКорректно = Ложь;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СоглашенияСКлиентами.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСКлиентами.Партнер = &Партнер
			|	И СоглашенияСКлиентами.Валюта = &ВалютаВзаиморасчетов
			|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСКлиентами.Организация = &Организация
			|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СоглашенияСКлиентами.Ссылка
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|ГДЕ
			|	СоглашенияСКлиентами.Ссылка = &СоглашениеВОбъекте
			|	И СоглашенияСКлиентами.Партнер = &Партнер
			|	И СоглашенияСКлиентами.Валюта = &ВалютаВзаиморасчетов
			|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозОперация
			|	И СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	[ДополнительныеУсловия]");
			
		Запрос.УстановитьПараметр("СоглашениеВОбъекте",   Объект.Соглашение);
		Запрос.УстановитьПараметр("Организация",          Объект.Организация);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовСоглашения);
		Запрос.УстановитьПараметр("Партнер",              Объект.Партнер);
		Запрос.УстановитьПараметр("ХозОперация",          ХозОперацияСоглашения);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
		СоглашениеЗаполненоКорректно = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Если СоглашениеЗаполненоКорректно Тогда
		Возврат;
	КонецЕсли;
	
	// Пункт 2. Попробуем подобрать подходящий элемент по умолчанию, среди уже имеющихся в базе соглашений.
	// При формировании наименования по умолчанию, платформенное представление объектов применять нельзя,
	// т.к. организация, партнер или валюта могут отсутствовать в базе,
	// и платформа сформирует представление: «Объект не найден».
	// Необходимо формировать наименование с учетом данного поведения платформы.
	// Если один из объектов формирующих наименование по умолчанию отсутствует в базе,
	// то его наименование должно быть заменено пустой строкой.
	ШаблонНаименованияСоглашенияПоУмолчанию = НСтр("ru='%1 , %2, %3, %4 (по умолчанию)';uk='%1 , %2, %3, %4 (по умовчанню)'");
	
	НаименованиеОрганизации = "";
	НаименованиеПартнера    = "";
	НаименованиеВалюты      = "";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаименованиеПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Партнер, "Наименование");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовСоглашения) Тогда
		НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаВзаиморасчетовСоглашения, "Наименование");
	КонецЕсли;
	
	НаименованиеСоглашенияПоУмолчанию = СтрШаблон(ШаблонНаименованияСоглашенияПоУмолчанию,
		НаименованиеПартнера, ХозОперацияСоглашения, НаименованиеОрганизации, НаименованиеВалюты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Валюта",                  ВалютаВзаиморасчетовСоглашения);
	Запрос.УстановитьПараметр("Партнер",                 Объект.Партнер);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   ХозОперацияСоглашения);
	Запрос.УстановитьПараметр("ТолькоТиповые",           ИспользоватьТиповыеСоглашения И Не ИспользоватьИндивидуальныеСоглашения);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",    Не ИспользоватьТиповыеСоглашения И ИспользоватьИндивидуальныеСоглашения);
	Запрос.УстановитьПараметр("НаименованиеПоУмолчанию", НаименованиеСоглашенияПоУмолчанию);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
		|	СоглашенияСКлиентами.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА СоглашенияСКлиентами.Наименование = &НаименованиеПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗначениеПоУмолчанию
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СоглашенияСКлиентами.Валюта = &Валюта
		|	И (СоглашенияСКлиентами.Организация = &Организация
		|		ИЛИ СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И НЕ СоглашенияСКлиентами.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ТолькоТиповые = ИСТИНА
		|					И &ТолькоИндивидуальные = ЛОЖЬ
		|					И (СоглашенияСКлиентами.Типовое
		|						И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|							ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|								(ВЫБРАТЬ
		|									ПартнерыСегмента.Сегмент
		|								ИЗ
		|									РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|								ГДЕ
		|									ПартнерыСегмента.Партнер = &Партнер)))
		|				ТОГДА ИСТИНА
		|			КОГДА &ТолькоИндивидуальные = ИСТИНА
		|					И НЕ &ТолькоТиповые = ИСТИНА
		|					И (НЕ СоглашенияСКлиентами.Типовое
		|						И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|							ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|								(ВЫБРАТЬ
		|									ПартнерыСегмента.Сегмент
		|								ИЗ
		|									РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|								ГДЕ
		|									ПартнерыСегмента.Партнер = &Партнер)))
		|					И (&Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = &Партнер)
		|				ТОГДА ИСТИНА
		|			КОГДА &ТолькоТиповые = ЛОЖЬ
		|					И &ТолькоИндивидуальные = ЛОЖЬ
		|					И (СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.СегментПартнеров В
		|							(ВЫБРАТЬ
		|								ПартнерыСегмента.Сегмент
		|							ИЗ
		|								РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|							ГДЕ
		|								ПартнерыСегмента.Партнер = &Партнер))
		|					И (&Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|						ИЛИ СоглашенияСКлиентами.Партнер = &Партнер)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	[ДополнительныеУсловия]
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЗначениеПоУмолчанию УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ДополнительныеУсловия]", ТекстДополнительныхУсловий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоздатьСоглашение = Истина;
	
	Если Выборка.Количество() = 1 Тогда
		// Только один подходящий - его подставим.
		Выборка.Следующий();
		СоздатьСоглашение = Ложь;
		Объект.Соглашение = Выборка.Ссылка;
	Иначе
		// Поиск уже созданного ранее соглашения по умолчанию.
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоЗначениеПоУмолчанию Тогда
				СоздатьСоглашение = Ложь;
				Объект.Соглашение = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СоздатьСоглашение Тогда
		// Соглашение подобрано, создавать новое не требуется.
		Возврат;
	КонецЕсли;
	
	// Создадим соглашение по умолчанию.
	НовоеСоглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	НовоеСоглашение.Наименование                                    = НаименованиеСоглашенияПоУмолчанию;
	НовоеСоглашение.Статус                                          = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	НовоеСоглашение.ХозяйственнаяОперация                           = ХозОперацияСоглашения;
	НовоеСоглашение.Валюта                                          = ВалютаВзаиморасчетовСоглашения;
	НовоеСоглашение.Организация                                     = Объект.Организация;
	НовоеСоглашение.Согласован                                      = Истина;
	НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов                = СоглашениеСодержитДоговор;
	НовоеСоглашение.ВозможнаРеализацияБезПереходаПраваСобственности = ОтгрузкаБезПереходаПраваСобственности;
	НовоеСоглашение.ПорядокОплаты                                   = ПорядокОплаты;
	НовоеСоглашение.ПорядокРасчетов                                 = ПорядокРасчетов;
	
	Если ИспользоватьТиповыеСоглашения И Не ИспользоватьИндивидуальныеСоглашения Тогда
		
		НовоеСоглашение.Типовое = Истина;
		
		// Определим сегмент партнера
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПартнерыСегмента.Сегмент
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Партнер = &Партнер";
			
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НовоеСоглашение.СегментПартнеров = Выборка.Сегмент;
		КонецЕсли;
		
	Иначе 
		НовоеСоглашение.Типовое    = Ложь;
		НовоеСоглашение.Партнер    = Объект.Партнер;
		НовоеСоглашение.Контрагент = Объект.Контрагент;
	КонецЕсли;
	
	НовоеСоглашение.Записать();
	Объект.Соглашение = НовоеСоглашение.Ссылка;
КонецПроцедуры
Процедура ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, ПараметрыКонвертации)
	Если ПараметрыКонвертации.ИспользоватьСоглашенияСПоставщиками <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Соглашение) И СокрЛП(Объект.Соглашение.наименование <> "") Тогда
		Возврат;
	КонецЕсли;
	
	// Если хотя бы один реквизит не заполнен, невозможно найти или создать соглашение.
	Если НЕ (ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.Договор)) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "ВалютаВзаиморасчетов, ТипДоговора, ПорядокОплаты, ПорядокРасчетов");
	Если ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетовСоглашения = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетовСоглашения = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", Объект.Метаданные()), 
			ВалютаВзаиморасчетовСоглашения, Объект.Валюта);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ХозОперацияСоглашения = Объект.ХозяйственнаяОперация;
	Иначе
		ХозОперацияСоглашения = ?(РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком, 
			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, 
			Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Объект.Партнер.Наименование) + ", "
		+ СокрЛП(ХозОперацияСоглашения) + ", "
		+ СокрЛП(Объект.Организация.Наименование) + ", ";
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовСоглашения) Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НаименованиеЭлементаДляОбменаПоУмолчанию + НРег(СокрЛП(ВалютаВзаиморасчетовСоглашения.Наименование));
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НаименованиеЭлементаДляОбменаПоУмолчанию + " " + НСтр("ru='(по умолчанию)';uk='(по умовчанню)'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Валюта",                  ВалютаВзаиморасчетовСоглашения);
	Запрос.УстановитьПараметр("Партнер",                 Объект.Партнер);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   ХозОперацияСоглашения);
	Запрос.УстановитьПараметр("НаименованиеПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СправочникСоглашенияСПоставщиками.Ссылка                 КАК Ссылка,
		|	СправочникСоглашенияСПоставщиками.Наименование           КАК Наименование,
		|	ВЫБОР КОГДА Наименование =  &НаименованиеПоУмолчанию Тогда
		|			Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК ЭтоЗначениеПоУмолчанию
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СправочникСоглашенияСПоставщиками
		|ГДЕ
		|	СправочникСоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СправочникСоглашенияСПоставщиками.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СправочникСоглашенияСПоставщиками.Валюта = &Валюта
		|	И СправочникСоглашенияСПоставщиками.Организация = &Организация
		|	И СправочникСоглашенияСПоставщиками.Партнер = &Партнер
		|	И НЕ СправочникСоглашенияСПоставщиками.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО ЭтоЗначениеПоУмолчанию УБЫВ";
	
	// Поиск подходящего соглашения
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеобходимоСоздатьЭлемент = Истина;
	
	Если Выборка.Количество() = 1 Тогда
		// Только один подходящий - его подставим
		Выборка.Следующий();
		Объект.Соглашение = Выборка.Ссылка;
		НеобходимоСоздатьЭлемент = Ложь;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоЗначениеПоУмолчанию Тогда
				Объект.Соглашение = Выборка.Ссылка;
				НеобходимоСоздатьЭлемент = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не НеобходимоСоздатьЭлемент Тогда
		Возврат;
	КонецЕсли;
	
	НовоеСоглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();
	НовоеСоглашение.Наименование                     = НаименованиеЭлементаДляОбменаПоУмолчанию;
	НовоеСоглашение.Статус                           = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
	НовоеСоглашение.ХозяйственнаяОперация            = ХозОперацияСоглашения;
	НовоеСоглашение.Валюта                           = ВалютаВзаиморасчетовСоглашения;
	НовоеСоглашение.Организация                      = Объект.Организация;
	НовоеСоглашение.Согласован                       = Истина;
	НовоеСоглашение.ВариантПриемкиТоваров            = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Истина;
	НовоеСоглашение.Партнер                          = Объект.Партнер;
	НовоеСоглашение.Контрагент                       = Объект.Контрагент;
	
	Если ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту 
		Или ХозОперацияСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
		НовоеСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокОплаты) Тогда
		НовоеСоглашение.ПорядокОплаты = РеквизитыДоговора.ПорядокОплаты;
	Иначе
		Если ВалютаВзаиморасчетовСоглашения = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВГривнахОплатаВГривнах;
		ИначеЕсли ВалютаВзаиморасчетовСоглашения <> Объект.Валюта Тогда
			НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
		Иначе
			НовоеСоглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.ПорядокРасчетов) Тогда
		НовоеСоглашение.ПорядокРасчетов = РеквизитыДоговора.ПорядокРасчетов;
	Иначе
		НовоеСоглашение.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
	НовоеСоглашение.Записать();
	
	Объект.Соглашение = НовоеСоглашение.Ссылка;
КонецПроцедуры
Процедура ЗаполнитьКассуККМПоВалютеСкладуИОрганизации(ПолученныеДанные, ПараметрыКонвертации, НаименованиеСклада = "")
	Если ЗначениеЗаполнено(НаименованиеСклада) Тогда
		Склад = Справочники.Склады.НайтиПоНаименованию(НаименованиеСклада);
	Иначе
		Склад = ПолученныеДанные.Склад;
	КонецЕсли;
		
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "ВалютаДенежныхСредств, Владелец, Склад");
	
	Если РеквизитыКассыККМ.ВалютаДенежныхСредств <> ПолученныеДанные.Валюта 
		Или РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация
		ИЛИ (ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам И РеквизитыКассыККМ.Склад <> Склад) Тогда
		
		КассаККМ = Неопределено;
		Валюта = ПолученныеДанные.Валюта;
		Организация = ПолученныеДанные.Организация;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Валюта", Валюта);
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Склад", Склад);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		Если ОбщегоНазначения.СсылкаСуществует(Организация) И ОбщегоНазначения.СсылкаСуществует(Валюта) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Валюта) + ")";
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ';uk='Основна каса ККМ'");
		КонецЕсли;
		
		СписокСкладов = Новый СписокЗначений();
		СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
		СписокСкладов.Добавить(Склад);
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	Кассы.Ссылка КАК Касса,
			|	ВЫБОР
			|		КОГДА Кассы.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена,
			|	Кассы.Склад КАК Склад
			|ИЗ
			|	Справочник.КассыККМ КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|	И Кассы.Владелец = &Организация
			|	И Кассы.ВалютаДенежныхСредств = &Валюта
			|	И Кассы.Склад В(&СписокСкладов)
	
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ,
			|	Склад УБЫВ");
	
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КассаККМ = Выборка.Касса;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.ВалютаДенежныхСредств	= Валюта;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Склад					= Склад;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНалогообложениеНДСПоПолученнымДанным(ПолученныеДанные, ДанныеXDTO)
	// Заполняем в НалогообложениеНДС документе по полученным из формата данным.
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НалогообложениеНДС",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Налогообложение, "Перечисления_ТипыНалогообложенияНДС"));
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПараметрыДоставки(Объект)
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособДоставки", Объект.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПодразделениеПоУмолчанию(ПолученныеДанные, ДанныеИБ)
	Если ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		Возврат;
	ИначеЕсли ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.Подразделение) Тогда
		// Подразделение было заполнено в данных ИБ - поместим его в ПолученныеДанные чтобы не затерлось.
		ПолученныеДанные.Подразделение = ДанныеИБ.Подразделение;
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Подразделение = ПодразделениеПоУмолчанию();
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	
		СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если XDTOКонтактная.Состав.Состав <> Неопределено
			И ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, СтатьиДДСИХозОперации)
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		Для Каждого Строка Из Объект.ОплатаПоставщикам Цикл
			Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо; 
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из Объект.ПрочиеРасходы Цикл
			Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходыПодотчетногоЛица; 
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтатьяДвиженияДенежныхСредств", Объект.Метаданные())
			И ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
			СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
			СтрокаТаблицы.ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияВРозницу; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств)
			И ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
			СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
			СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		Если ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			Если ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
				СтрокаТаблицы.СтатьяДДС = Объект.СтатьяДвиженияДенежныхСредств;
				СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
			КонецЕсли;
			Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
				Если ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
					СтрокаТаблицы = СтатьиДДСИХозОперации.Добавить();
					СтрокаТаблицы.СтатьяДДС = СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств;
					СтрокаТаблицы.ХозОперация = Объект.ХозяйственнаяОперация; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция КонтрагентИзОрганизации(Знач ОрганизацияДляСозданияКонтрагента, КомпонентыОбмена)
	// Проверим, есть ли в базе контрагент, созданный по организации, если нет, то создадим его и выгрузим.
	СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияДляСозданияКонтрагента.УникальныйИдентификатор());
	Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) ИЛИ СсылкаНаКонтрагента.ПолучитьОбъект() = Неопределено Тогда
		
		ЗапросКонтр = Новый Запрос;
		ЗапросКонтр.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.Контрагенты
		|ГДЕ Наименование = &Наименование 
		|	И ИНН = &ИНН
		|	И КПП = &КПП
		|	И ЮридическоеФизическоеЛицо = &ЮридическоеФизическоеЛицо";
		ЗапросКонтр.УстановитьПараметр("Наименование", ОрганизацияДляСозданияКонтрагента.Наименование);
		ЗапросКонтр.УстановитьПараметр("ИНН", ОрганизацияДляСозданияКонтрагента.ИНН);
		ЗапросКонтр.УстановитьПараметр("КПП", ОрганизацияДляСозданияКонтрагента.КПП);
		ЗапросКонтр.УстановитьПараметр("ЮридическоеФизическоеЛицо", ОрганизацияДляСозданияКонтрагента.ЮридическоеФизическоеЛицо);
		Выборка = ЗапросКонтр.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СсылкаНаКонтрагента = Выборка.Ссылка;
			Возврат СсылкаНаКонтрагента;
		КонецЕсли;
		
		СоздаваемыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СоздаваемыйКонтрагент, ОрганизацияДляСозданияКонтрагента,
			"ПометкаУдаления,ИНН,КодПоОКПО,КПП,НаименованиеПолное,ЮрФизЛицо,Наименование,ОбособленноеПодразделение");
		
		Если СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
			Или СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			СоздаваемыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			
		ИначеЕсли СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			Или СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			
			СоздаваемыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			
		КонецЕсли;
		
		Если СоздаваемыйКонтрагент.ОбособленноеПодразделение Тогда
			ОрганизацияДляСозданияКонтрагента = ОрганизацияДляСозданияКонтрагента.ГоловнаяОрганизация;
			ГоловнойКонтрагент = КонтрагентИзОрганизации(ОрганизацияДляСозданияКонтрагента, КомпонентыОбмена);
			СоздаваемыйКонтрагент.ГоловнойКонтрагент = ГоловнойКонтрагент;
		Иначе
			СоздаваемыйКонтрагент.ГоловнойКонтрагент = СсылкаНаКонтрагента;
		КонецЕсли;
		
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
		СинхронизироватьДанныеПартнераСДаннымиКонтрагента(ПартнерОбъект, СоздаваемыйКонтрагент, КомпонентыОбмена);
		СоздаваемыйКонтрагент.Партнер = ПартнерОбъект.Ссылка;
		
		СоздаваемыйКонтрагент.УстановитьСсылкуНового(СсылкаНаКонтрагента);
		СоздаваемыйКонтрагент.ОбменДанными.Загрузка = Истина;
		СоздаваемыйКонтрагент.Записать();
		
		КомпонентыОбмена.ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты.Добавить(СоздаваемыйКонтрагент.Ссылка);
		
		СсылкаНаКонтрагента = СоздаваемыйКонтрагент.Ссылка;
	КонецЕсли;
	Возврат СсылкаНаКонтрагента;
КонецФункции
Процедура ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO, ОбработатьСуммуВШапке = Ложь)
	// Обход ограничения формата, которое будет устранено в следующей версии.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда 
		Если ОбработатьСуммуВШапке И Не ЗначениеЗаполнено(ДанныеXDTO.Сумма) Тогда
			ДанныеXDTO.Сумма = -1;
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("Товары") Тогда
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.Цена = 0 Тогда
					СтрокаТовары.Цена = -1;
				КонецЕсли;
				Если СтрокаТовары.Сумма = 0 Тогда
					СтрокаТовары.Сумма = -1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ОпределитьРегистрациюВНалоговомОргане(Подразделение, Организация)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК Ссылка
		|ИЗ
		|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Подразделение = &Подразделение
		|	И РегистрацииВНалоговомОргане.Организация = &Организация");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ОбъектМодифицирован)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Контрагенты(Объект, КомпонентыОбмена, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	 
	Если Не ЗначениеЗаполнено(Объект.ЮрФизЛицо) И ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда
		Объект.ЮрФизЛицо = ?(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.ЮрФизЛицо.ЮрЛицо);
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ПартнерОбъект = ?(ЗначениеЗаполнено(Объект.Партнер),
		Объект.Партнер.ПолучитьОбъект(),
		Справочники.Партнеры.СоздатьЭлемент());
		
	Если ПартнерОбъект.ЭтоНовый() Тогда
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
		
		ПартнерОбъект.ГруппаДоступа   = ЭлементПоУмолчанию_ГруппаДоступаПартнера(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект <> Справочники.Партнеры.НеизвестныйПартнер
		И (ПартнерОбъект.ЭтоНовый() Или ИспользоватьПартнеровКакКонтрагентов) Тогда
		ПартнерОбъект.Наименование       = Объект.Наименование;
		ПартнерОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
		
		ПартнерОбъект.ЮрФизЛицо = ?(Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо,
			Перечисления.КомпанияЧастноеЛицо.Компания);
		
		Для Каждого СтрокаКИКонтрагента Из Объект.КонтактнаяИнформация Цикл
			ВидКИПартнера = ВидКИПартнераПоВидуКИКонтрагента(СтрокаКИКонтрагента.Вид, ИспользоватьПартнеровКакКонтрагентов);
			Если ВидКИПартнера = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиКИПартнера = ПартнерОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИКонтрагента.Вид));
			Для Каждого СтрокаКИПартнера Из СтрокиКИПартнера Цикл
				ПартнерОбъект.КонтактнаяИнформация.Удалить(СтрокаКИПартнера);
			КонецЦикла;
			
			СтрокаКИПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКИКонтрагента);
			СтрокаКИПартнера.Вид = ВидКИПартнера;
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		Если БылаПометкаУдаления Тогда
			ПараметрыКлюча = Новый Структура("Партнер", ПартнерОбъект.Ссылка);
			Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
			Справочники.ВидыЗапасов.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		Если Объект.Партнер <> ПартнерОбъект.Ссылка Тогда
			Объект.Партнер = ПартнерОбъект.Ссылка;
		Иначе
			ОбъектМодифицирован = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = ЭлементПоУмолчанию_ГруппаДоступаНоменклатуры(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	#Область ВидНоменклатуры
	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) И ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
		// Вид номенклатуры подбирается по типу.
		ВидНоменклатуры = Неопределено;
		
		ПараметрыПоиска = Новый Структура("ТипНоменклатуры");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Объект);
		НайдСтроки = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.НайтиСтроки(ПараметрыПоиска);
		НайдСтрока = ?(НайдСтроки.Количество() = 0, Неопределено, НайдСтроки[0]);
	
		Если НайдСтрока = Неопределено Тогда
	
			НеобходимоСоздатьЭлемент = Ложь;
	
			Если ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Товар';uk='Товар'",Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
			ИначеЕсли ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Услуга';uk='Послуга'",Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	НЕ ВидыНоменклатуры.ПометкаУдаления
			|	И ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
	
			Запрос.УстановитьПараметр("ТипНоменклатуры", ПараметрыПоиска.ТипНоменклатуры);
			Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
			РезультатЗапроса = Запрос.Выполнить();
	
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
					ВидНоменклатуры = Выборка.ВидНоменклатуры;
				Иначе
					НеобходимоСоздатьЭлемент = Истина;
				КонецЕсли;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
	
			// Создание элемента для обмена с заданными параметрами
			Если НеобходимоСоздатьЭлемент Тогда
				
				ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ПараметрыПоиска);
				
				ВидНоменклатурыОбъект.Наименование                            = НаименованиеЭлементаДляОбменаПоУмолчанию;
				ВидНоменклатурыОбъект.Описание                                = НСтр("ru='#Создан автоматически при обмене на основе универсального формата данных';uk='#Створений автоматично при обміні на основі універсального формату даних'",Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
				ВидНоменклатурыОбъект.ВариантОформленияПродажи                = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
				ВидНоменклатурыОбъект.НастройкаИспользованияСерий             = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
				ВидНоменклатурыОбъект.ТочностьУказанияСрокаГодностиСерии      = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней;
				ВидНоменклатурыОбъект.ШаблонНаименованияДляПечатиНоменклатуры = "[Наименование]";
				ВидНоменклатурыОбъект.ШаблонНаименованияДляПечатиНоменклатуры = "[Наименование]";
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
				
				// Заполнение группы доступа
				Если Не ЗначениеЗаполнено(ВидНоменклатурыОбъект.ГруппаДоступа) И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
					ВидНоменклатурыОбъект.ГруппаДоступа = Объект.ГруппаДоступа;
				КонецЕсли;
				
				Попытка
					ВидНоменклатурыОбъект.Записать();
					ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
				Исключение
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
				КонецПопытки
			КонецЕсли;
			
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
			НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;
			
		Иначе
			ВидНоменклатуры = НайдСтрока.ВидНоменклатуры;
		КонецЕсли;	
		Объект.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
	#КонецОбласти
	Если НЕ ЗначениеЗаполнено(Объект.Качество) Тогда
		Объект.Качество = Перечисления.ГрадацииКачества.Новый;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОформленияПродажи) Тогда
		Объект.ВариантОформленияПродажи   = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ИспользованиеХарактеристик) Тогда
		Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ОбособленноеПодразделение = (Не Объект.ГоловнаяОрганизация = Объект.Ссылка);
	Иначе
		Объект.ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация)
		И Не Объект.ОбособленноеПодразделение Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеТоваровУслуг(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСПоставщикомВШапкеДокумента(Объект, КомпонентыОбмена.ПараметрыКонвертации);
	ЗаполнитьПараметрыДоставки(Объект);
	
	// Перезаполнение вида договора для операции закупки по импорту.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
	
		ДоговорСсылка = Объект.Договор;
	
		Если ЗначениеЗаполнено(ДоговорСсылка)
			И ОбщегоНазначения.СсылкаСуществует(ДоговорСсылка) Тогда
			
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорСсылка, "ТипДоговора, ХозяйственнаяОперация");
			
			ТипДоговораИмпортТребуется = Перечисления.ТипыДоговоров.Импорт;
			ХозяйственнаяОперацияТребуется = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
			
			Если ДанныеДоговора.ТипДоговора <> ТипДоговораИмпортТребуется
				Или ДанныеДоговора.ХозяйственнаяОперация <> ХозяйственнаяОперацияТребуется Тогда
				
				ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
				
				ДоговорОбъект.ТипДоговора           = ТипДоговораИмпортТребуется;
				ДоговорОбъект.ХозяйственнаяОперация = ХозяйственнаяОперацияТребуется;
				
				УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
				ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДоговорОбъект, Истина, Ложь, УзелОбмена);
				
				ДоговорОбъект.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение в ТЧ Товары для услуг
	НаименованиеПодразделенияПоУмолчанию = НСтр("ru='<Подразделение по умолчанию>';uk='<Підрозділ по умовчанню>'");
	Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(НаименованиеПодразделенияПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		НовоеПодразделение = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		НовоеПодразделение.Наименование = НаименованиеПодразделенияПоУмолчанию;
		НовоеПодразделение.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется;
		НовоеПодразделение.Записать();
		Подразделение = НовоеПодразделение.Ссылка;
	КонецЕсли;
	
	// Заполнение пустой статьи расходов и подразделения для услуг
	СтатьяРасходов = Неопределено;
	Для Каждого Строка Из Объект.Товары Цикл
		Если (Строка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
				ИЛИ Строка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа) Тогда
			Если НЕ ЗначениеЗаполнено(Строка.СтатьяРасходов) Тогда
				Если СтатьяРасходов = Неопределено Тогда
					СтатьяРасходов = ЭлементПоУмолчанию_СтатьяРасходов(НСтр("ru='Статья расходов поступление услуг по умолчанию';uk='Стаття витрат надходження послуг по умовчанню'"));
				КонецЕсли;
				Строка.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
				Строка.Подразделение = Подразделение; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьТаблицуСтатьиДДСИХозОперации(Объект, КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияТоваровУслуг(Объект, ОбъектМодифицирован)
	ЗаполнениеПартнераВШапкеДокумента(Объект);
	ЗаполнениеСоглашенияСКлиентомВШапкеДокумента(Объект);
	ЗаполнитьПараметрыДоставки(Объект);
КонецПроцедуры
Процедура ПередЗаписьюСтатьиРасходов(ДанныеИБ, ПолученныеДанные)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	КонецЕсли;
КонецПроцедуры
Процедура ПередКонвертациейУТКАУП(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
			ПараметрыКонвертации.Вставить("ГруппаДоступаНоменклатурыПоУмолчанию");
			ПараметрыКонвертации.Вставить("ГруппаДоступаФизЛицПоУмолчанию");
			ПараметрыКонвертации.Вставить("ИспользоватьСоглашенияСПоставщиками", Истина);
	
			// Виды  номенклатуры по умолчанию.
			ВидыНоменклатурыПоУмолчанию = Новый ТаблицаЗначений;
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ТипНоменклатуры");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("АлкогольнаяПродукция");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ВидНоменклатуры");
			ПараметрыКонвертации.Вставить("ВидыНоменклатурыПоУмолчанию", ВидыНоменклатурыПоУмолчанию);
			
			// Установка признаков использования договоров контрагентов.
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСПоставщиками", Константы.ИспользоватьДоговорыСПоставщиками.Получить());
			ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСКлиентами", Константы.ИспользоватьДоговорыСКлиентами.Получить());
			
			// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
			ДопРеквизитыИСведения = Новый ТаблицаЗначений;
			ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
			ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
			
			// Инициализация таблицы для заполнения хоз.операций в загруженных статьях ДДС.
			СтатьиДДСИХозОперации = Новый ТаблицаЗначений;
			СтатьиДДСИХозОперации.Колонки.Добавить("СтатьяДДС");
			СтатьиДДСИХозОперации.Колонки.Добавить("ХозОперация");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеСтатьиДДСИХозОперации = СтатьиДДСИХозОперации;
	
		ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				ПараметрыКонвертации.СозданныеПриВыгрузкеОбъекты = Новый Массив;
			КонецЕсли;
		КонецЕсли;
	
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Неопределено Тогда
			ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = Истина;
		КонецЕсли;
	
		Если ПараметрыКонвертации.СкладПоУмолчанию = Неопределено Тогда
			ПараметрыКонвертации.СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	
		Если ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Неопределено Тогда
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
		КонецЕсли;
	
	Иначе
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ВыгружатьАналитикуПоСкладам,СкладПоУмолчанию");
		ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = РеквизитыУзлаОбмена.ВыгружатьАналитикуПоСкладам;
		ПараметрыКонвертации.СкладПоУмолчанию = РеквизитыУзлаОбмена.СкладПоУмолчанию;
		
			// Заполнение параметров из узла обмена.
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента,
				"ИспользоватьОтборПоОрганизациям,ВыгружатьУправленческуюОрганизацию");
	
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
			ПараметрыКонвертации.ВыгружатьУправленческуюОрганизацию = РеквизитыУзлаОбмена.ВыгружатьУправленческуюОрганизацию;
	
			СписокОрганизаций = Новый СписокЗначений;
			СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
			ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	
			ВидыЦенНоменклатуры = Новый СписокЗначений;
			ВидыЦенНоменклатуры.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.ВидыЦенНоменклатуры.ВыгрузитьКолонку("ВидЦенНоменклатуры"));
			ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры", ВидыЦенНоменклатуры);
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		Если Не ЗначениеЗаполнено(СтрокаКИ.Вид)
			Или (Не ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И Не ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    
		    ЗначенияПолей = "";
		    
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		    
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиУкраиныФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации          = "ПользовательскаяКИ" + ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодразделениеПоУмолчанию()
	НаименованиеПодразделенияПоУмолчанию = НСтр("ru='<Подразделение по умолчанию>';uk='<Підрозділ по умовчанню>'");
	Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(НаименованиеПодразделенияПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		НовоеПодразделение = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		НовоеПодразделение.Наименование = НаименованиеПодразделенияПоУмолчанию;
		НовоеПодразделение.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется;
		НовоеПодразделение.Записать();
		Подразделение = НовоеПодразделение.Ссылка;
	КонецЕсли;
	
	Возврат Подразделение;
КонецФункции
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			ТекВидКИ = Неопределено;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Используется = Истина;
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;		
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
	
			ТекТипКИ = ТекВидКИ.Тип;	
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПолучитьНастройкиВыгрузкиАналитикиПоДоговорам(НастройкиДопАналитикиПоДоговорам, КомпонентыОбмена)
	НастройкиДопАналитикиПоДоговорам = Новый Структура;
	Если ЗначениеЗаполнено(КомпонентыОбмена.УзелКорреспондента)
		И КомпонентыОбмена.УзелКорреспондента.Метаданные().Реквизиты.Найти("ПравилаСозданияДоговоровКонтрагентов") <> Неопределено Тогда
		АналитикаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ПравилаСозданияДоговоровКонтрагентов");
	Иначе
		АналитикаВзаиморасчетов = "БезРазделения";
	КонецЕсли;
	
	НастройкиДопАналитикиПоДоговорам.Вставить("ЗаказВДоговор", АналитикаВзаиморасчетов = "ПоЗаказам");
	НастройкиДопАналитикиПоДоговорам.Вставить("СоглашениеВДоговор", АналитикаВзаиморасчетов = "ПоСоглашениям");
	НастройкиДопАналитикиПоДоговорам.Вставить("СделкаВДоговор", АналитикаВзаиморасчетов = "ПоСделкам");
	НастройкиДопАналитикиПоДоговорам.Вставить("ДоговорВДоговор",
		 НЕ (НастройкиДопАналитикиПоДоговорам.СоглашениеВДоговор
	 		 ИЛИ НастройкиДопАналитикиПоДоговорам.ЗаказВДоговор
	 		 ИЛИ НастройкиДопАналитикиПоДоговорам.СделкаВДоговор));
КонецПроцедуры
Функция ПрисвоитьНаименованиеБанковскогоСчета(ПолученныеДанные, ДанныеИБ)
	Если ДанныеИБ = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		НомерСчета = Прав(СокрЛП(ПолученныеДанные.НомерСчета), 4);
		Если  ЗначениеЗаполнено(ПолученныеДанные.Банк) Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 в %2 (%3).';uk='%1 у %2 (%3).'"), НомерСчета, ПолученныеДанные.Банк,
						Строка(ПолученныеДанные.ВалютаДенежныхСредств)); 
		Иначе
			СтрокаНаименования = НомерСчета + "(" + Строка(ПолученныеДанные.ВалютаДенежныхСредств) + ")"; 
		КонецЕсли;
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
		ПолученныеДанные.Наименование = СтрокаНаименования;
	Иначе
		ПолученныеДанные.Наименование = ДанныеИБ.Наименование;
	КонецЕсли;
КонецФункции
Процедура ПТиУ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) И НЕ ЗначениеЗаполнено(ПолученныеДанные.Партнер) Тогда
		ПолученныеДанные.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Контрагент, "Партнер");
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
	
		ДанныеИБСклад = ДанныеИБ.Склад;
	
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам Тогда
			// Восстанавливаем склад из первоначального документа
			ДанныеИБ.Склад = ДанныеИБСклад;
		КонецЕсли;
	
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Склад");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("КоличествоУпаковок");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("Цена");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("НомерГТД");
		МассивКлючевыхПолей.Добавить("СуммаСНДС");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"Подразделение, СтатьяРасходов, АналитикаРасходов, ЗаказПоставщику, Сертификат, НомерПаспорта, СписатьНаРасходы");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Для Каждого Строка Из ДанныеИБ.Товары Цикл
			Строка.Склад = ДанныеИБ.Склад;
		КонецЦикла;
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.Номенклатура = ЭлементПоУмолчанию_НоменклатураУслуга(КомпонентыОбмена);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ПТиУ_РасширенныеДанныеИБ(ДанныеИБ)
	Результат = Новый Структура;
	
	#Область ФрагментЗапросаШапкаДокумента
	// Данные шапки документа необходимы для вычисления курса и кратности
	// взаиморасчетов и для вычисления розничных цен товаров.
	ШапкаДокумента = 
		"ВЫБРАТЬ
		|	ДанныеШапкиДокумента.Склад.РозничныйВидЦены КАК РозничныйВидЦены,
		|	ДанныеШапкиДокумента.Валюта,
		|	ДанныеШапкиДокумента.ВалютаВзаиморасчетов,
		|
		|	ВЫБОР КОГДА ДанныеШапкиДокумента.ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
		|		ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК Строка(18))
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(""СобственныеТовары"" КАК Строка(18))
		|	КОНЕЦ                                       КАК ТипЗапасовПоВидуОперации
		|ПОМЕСТИТЬ ДанныеШапкиДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДанныеШапкиДокумента
		|ГДЕ
		|	ДанныеШапкиДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаДанныеОперации
	ДанныеОперации = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		|ИЗ
		|	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Док.ВалютаВзаиморасчетов
		|					ИЗ
		|						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		|		ПО ДанныеШапкиДокумента.ВалютаВзаиморасчетов = КурсВалютыДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаКоэффициентПересчетаИзВалютыДокВВалютуРег
	КоэффициентПересчетаИзВалютыДокВВалютуРег = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютДок.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютДок.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютРег.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютРег.Кратность, 0) > 0
		|			ТОГДА КурсыВалютДок.Курс * КурсыВалютРег.Кратность / (КурсыВалютДок.Кратность * КурсыВалютРег.Курс)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ КоэффициентПересчетаВВалютуРег
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаДок) КАК КурсыВалютДок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаРег) КАК КурсыВалютРег
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаТоварыДокумента
	// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
	// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика.
	ТоварыДокумента = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                                     КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	Товары.Характеристика                                  КАК Характеристика,
		|	Товары.Номенклатура.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
		|	Товары.Количество                                      КАК Количество,
		|	Товары.Сумма                                           КАК Сумма,
		|	ВЫБОР КОГДА Товары.Цена > 0
		|			И Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
		|		ТОГДА 0.01
		|		ИНАЧЕ Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
		|	КОНЕЦ                                                  КАК ЦенаЗаЕдиницу,
		|	Товары.Упаковка                                        КАК Упаковка,
		|	Товары.КоличествоУпаковок                              КАК КоличествоУпаковок,
		|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                                        КАК СуммаНДС,
		|	Товары.СтатьяРасходов                                  КАК СтатьяРасходов,
		|	Товары.СтатьяРасходов.КорреспондирующийСчет            КАК КорреспондирующийСчет,
		|	Товары.Ссылка.ВернутьМногооборотнуюТару                КАК ВернутьМногооборотнуюТару,
		|	Товары.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга);
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаЦеныВРознице
	// Информация о розничных ценах по розничному виду цен, установленному для склада.
	ЦеныВРознице = "
		|ВЫБРАТЬ
		|	ЦеныВРознице.Цена 
		|	/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|	* ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсВалютыДокумента.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсВалютыДокумента.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Кратность, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютВидовЦены.Курс, 0) > 0
		|			ТОГДА
		|				КурсыВалютВидовЦены.Курс 
		|				* КурсВалютыДокумента.Кратность 
		|				/ КурсыВалютВидовЦены.Кратность 
		|				/ КурсВалютыДокумента.Курс
		|	КОНЕЦ                                                        КАК Цена,
		|	ЦеныВРознице.Номенклатура                                    КАК Номенклатура,
		|	ЦеныВРознице.Характеристика                                  КАК Характеристика
		|ПОМЕСТИТЬ ЦеныВРознице
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ВидЦены В
		|					(ВЫБРАТЬ
		|						ДанныеШапкиДокумента.РозничныйВидЦены
		|					ИЗ
		|						ДанныеШапкиДокумента КАК ДанныеШапкиДокумента)
		|				И Номенклатура В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Номенклатура
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)
		|				И Характеристика В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТоварыДокумента.Характеристика
		|					ИЗ
		|						ТоварыДокумента КАК ТоварыДокумента)) КАК ЦеныВРознице
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютВидовЦены
		|		ПО ЦеныВРознице.Валюта = КурсыВалютВидовЦены.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&Дата,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						ДанныеШапкиДокумента.Валюта
		|					ИЗ
		|						ДанныеШапкиДокумента КАК ДанныеШапкиДокумента)) КАК КурсВалютыДокумента
		|		ПО (ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаТоварыДокументаСЦенамиРозницы
	ТоварыДокументаСЦенамиРозницы = "
		|ВЫБРАТЬ
		|	ТоварыДокумента.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокумента.Номенклатура              КАК Номенклатура,
		|	ТоварыДокумента.Характеристика            КАК Характеристика,
		|	ТоварыДокумента.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокумента.Количество                КАК Количество,
		|	ТоварыДокумента.Сумма                     КАК Сумма,
		|	ТоварыДокумента.ЦенаЗаЕдиницу             КАК Цена,
		|	ТоварыДокумента.Упаковка                  КАК Упаковка,
		|	ТоварыДокумента.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ТоварыДокумента.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокумента.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокумента.ТипНоменклатуры           КАК ТипНоменклатуры,
		|
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЦеныВРознице.Цена < 0.01
		|				ТОГДА 0.01
		|			ИНАЧЕ ВЫРАЗИТЬ(ЦеныВРознице.Цена КАК ЧИСЛО(15, 2))
		|		КОНЕЦ, 0)                             КАК ЦенаВРознице,
		|
		|	ТоварыДокумента.Количество 
		|	* ЕСТЬNULL(ЦеныВРознице.Цена, 0)		 КАК СуммаВРознице
		|
		|ПОМЕСТИТЬ ТоварыДокументаСЦенамиРозницы
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныВРознице КАК ЦеныВРознице
		|		ПО ТоварыДокумента.Номенклатура = ЦеныВРознице.Номенклатура
		|			И ТоварыДокумента.Характеристика = ЦеныВРознице.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	// В выборку попадает как товар, так и многооборотная тара (возвратная и не возвратная).
	#КонецОбласти
	#Область ФрагментЗапросаДанныеТаблицыТовары
	ДанныеТаблицыТовары = "
		|ВЫБРАТЬ
		|	ТоварыДокументаРозн.НомерСтрокиДокумента      КАК НомерСтрокиДокумента,
		|	ТоварыДокументаРозн.Номенклатура              КАК Номенклатура,
		|	ТоварыДокументаРозн.Характеристика            КАК Характеристика,
		|	ТоварыДокументаРозн.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
		|	ТоварыДокументаРозн.Количество                КАК Количество,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.СуммаВРознице КАК Число(15,2)) КАК СуммаВРознице,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Сумма КАК Число(15,2))        КАК Сумма,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.Цена КАК Число(15,2))         КАК Цена,
		|	ВЫРАЗИТЬ(ТоварыДокументаРозн.ЦенаВРознице КАК ЧИСЛО(15,2)) КАК ЦенаВРознице,
		|	ТоварыДокументаРозн.Упаковка                  КАК Упаковка,
		|	ТоварыДокументаРозн.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ТоварыДокументаРозн.СтавкаНДС                 КАК СтавкаНДС,
		|	ТоварыДокументаРозн.СуммаНДС                  КАК СуммаНДС,
		|	ТоварыДокументаРозн.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТоварыДокументаРозн.ТипНоменклатуры           КАК ТипНоменклатуры,
		|	ВЫБОР КОГДА ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|		И ТоварыДокументаРозн.ВернутьМногооборотнуюТару ТОГДА
		|		""ВозвратнаяТара""
		|	ИНАЧЕ
		|		ДанныеШапкиДокумента.ТипЗапасовПоВидуОперации
		|	КОНЕЦ                                         КАК ТипЗапасов
		|
		|ИЗ
		|	ТоварыДокументаСЦенамиРозницы КАК ТоварыДокументаРозн
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		ИЛИ ТоварыДокументаРозн.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыДокументаРозн.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	#Область ФрагментЗапросаДанныеТаблицыУслуги
	// Работы и услуги.
	// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
	ДанныеТаблицыУслуги = "
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                    КАК Номенклатура,
		|	Товары.Количество                                      КАК Количество,
		|	Товары.Сумма                                           КАК Сумма,
		|	ВЫБОР КОГДА Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) < 0.01
		|		ТОГДА 0.01
		|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 2)) 
		|	КОНЕЦ                                                  КАК Цена,
		|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                                        КАК СуммаНДС,
		|   Товары.СтатьяРасходов                                  КАК СтатьяЗатрат,
		|   Товары.Подразделение                                   КАК Подразделение,
		|	ВЫБОР КОГДА
		|		НЕ Товары.СтатьяРасходов.ВариантРаспределенияРасходов ЕСТЬ NULL
		|			И Товары.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                  КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	#КонецОбласти
	ТекстЗапроса = ШапкаДокумента
		+ ДанныеОперации
		+ КоэффициентПересчетаИзВалютыДокВВалютуРег
		+ ТоварыДокумента
		+ ЦеныВРознице
		+ ТоварыДокументаСЦенамиРозницы
		+ ДанныеТаблицыТовары
		+ ДанныеТаблицыУслуги;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныВРознице.Упаковка",
		"ЦеныВРознице.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.Валюта);
	Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОперации = РезультатыЗапроса[1].Выбрать();
	
	Результат.Вставить("КурсВзаиморасчетов", 1);
	Результат.Вставить("КратностьВзаиморасчетов", 1);
	Если ДанныеОперации.Следующий() Тогда
		Результат.КурсВзаиморасчетов = ДанныеОперации.КурсВзаиморасчетов;
		Результат.КратностьВзаиморасчетов = ДанныеОперации.КратностьВзаиморасчетов;
	КонецЕсли;
	ТаблицаТовары = РезультатыЗапроса[6].Выгрузить();
	ТаблицаУслуги = РезультатыЗапроса[7].Выгрузить();
	
	// Счет расходов для услуг.
	ТаблицаУслуги.Колонки.Добавить("СчетЗатрат");
	ТаблицаУслуги.Колонки.Добавить("ПодразделениеЗатрат");
	Для Каждого СтрокаУслуги Из ТаблицаУслуги Цикл
		Если ЗначениеЗаполнено(СтрокаУслуги.Подразделение) Тогда
			СтруктураПодразделение = Новый Структура();
			ВыгрузитьПодразделение(ДанныеИБ, СтруктураПодразделение, СтрокаУслуги.Подразделение);
			СтрокаУслуги.ПодразделениеЗатрат = СтруктураПодразделение.Подразделение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.СтатьяЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУслуги.СчетЗатрат = СчетРасходовПоСтатьеРасходов(СтрокаУслуги.СтатьяЗатрат, ДанныеИБ.Организация, СтрокаУслуги.Подразделение);
	КонецЦикла;
	
	Результат.Вставить("Товары", ТаблицаТовары);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	Результат.Вставить("Излишки", Новый ТаблицаЗначений);
	Результат.Вставить("Недостачи", Новый ТаблицаЗначений);
	
	// РасшифровкаДопРасходов
	// Номенклатура, Количество, СтоимостьТоваров, Сумма, СуммаНДС, ДокументПоступления.
	РасшифровкаДопРасходов = ДоходыИРасходыСервер.ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	
	// Удаление строк с пустыми суммами из расшифровки.
	КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
		Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
		Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
			РасшифровкаДопРасходов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Результат.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	// Данные ГТД при поступлении по импорту
	#Область ПоступлениеПоИмпорту
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДвиженияДокумента.Организация КАК Организация,
		|	ДвиженияДокумента.Поставщик КАК Поставщик,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ДвиженияДокумента.ВидЗапасов КАК ВидЗапасов,
		|	СУММА(ДвиженияДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ДвиженияДокумента
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению КАК ДвиженияДокумента
		|ГДЕ
		|	ДвиженияДокумента.Регистратор = &Ссылка
		|	И ДвиженияДокумента.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияДокумента.Организация,
		|	ДвиженияДокумента.Поставщик,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Характеристика,
		|	ДвиженияДокумента.АналитикаУчетаНоменклатуры.Склад,
		|	ДвиженияДокумента.ВидЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Характеристика,
		|	Номенклатура,
		|	ВидЗапасов,
		|	Поставщик,
		|	Склад,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНеоформленныхТоваров.Организация,
		|	ОстаткиНеоформленныхТоваров.Поставщик,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ОстаткиНеоформленныхТоваров.ВидЗапасов,
		|	ОстаткиНеоформленныхТоваров.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению.Остатки(&Дата, ) КАК ОстаткиНеоформленныхТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияДокумента КАК ДвиженияДокумента
		|		ПО ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Характеристика = ДвиженияДокумента.Характеристика
		|			И ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Номенклатура = ДвиженияДокумента.Номенклатура
		|			И ОстаткиНеоформленныхТоваров.ВидЗапасов = ДвиженияДокумента.ВидЗапасов
		|			И ОстаткиНеоформленныхТоваров.Поставщик = ДвиженияДокумента.Поставщик
		|			И ОстаткиНеоформленныхТоваров.АналитикаУчетаНоменклатуры.Склад = ДвиженияДокумента.Склад
		|			И ОстаткиНеоформленныхТоваров.Организация = ДвиженияДокумента.Организация
		|ГДЕ
		|	ОстаткиНеоформленныхТоваров.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОформлениеГТД.Организация,
		|	ОформлениеГТД.Поставщик,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Склад КАК Склад,
		|	ОформлениеГТД.ВидЗапасов,
		|	СУММА(ОформлениеГТД.Количество) КАК Количество,
		|	ОформлениеГТД.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению КАК ОформлениеГТД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияДокумента КАК ДвиженияДокумента
		|		ПО ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика = ДвиженияДокумента.Характеристика
		|			И ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура = ДвиженияДокумента.Номенклатура
		|			И ОформлениеГТД.ВидЗапасов = ДвиженияДокумента.ВидЗапасов
		|			И ОформлениеГТД.Поставщик = ДвиженияДокумента.Поставщик
		|			И ОформлениеГТД.Организация = ДвиженияДокумента.Организация
		|ГДЕ
		|	ОформлениеГТД.МоментВремени > &Дата
		|	И ОформлениеГТД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОформлениеГТД.Организация,
		|	ОформлениеГТД.Поставщик,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Номенклатура,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Характеристика,
		|	ОформлениеГТД.АналитикаУчетаНоменклатуры.Склад,
		|	ОформлениеГТД.ВидЗапасов,
		|	ОформлениеГТД.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.МоментВремени());
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТабТоварыДокумента = ТаблицаТовары.Скопировать();
		ТабТоварыДокумента.Колонки.Добавить("ЕстьНомерГТД", Новый ОписаниеТипов("Булево"));
		ТабТоварыДокумента.Колонки.Добавить("НетКоличества", Новый ОписаниеТипов("Булево"));
		
		ТабОстаткиНеоформленныхТоваров = РезультатыЗапроса[1].Выгрузить();
		ТабОстаткиНеоформленныхТоваров.Колонки.Добавить("ОстаткиЗакрыты", Новый ОписаниеТипов("Булево"));
	
		// Распределение номеров ГТД
		ВыборкаОформлениеГТДКРаспределению = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаОформлениеГТДКРаспределению.Следующий() Цикл
			
			КоличествоКРаспределению = ВыборкаОформлениеГТДКРаспределению.Количество;
			
			СтруктураОтбора = Новый Структура("Организация,Поставщик,Номенклатура,Характеристика,Склад,ВидЗапасов,ОстаткиЗакрыты");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаОформлениеГТДКРаспределению);
			СтруктураОтбора.ОстаткиЗакрыты = Ложь;
			
			ОстаткиНеоформленногоТовараЗакрыты = Истина;
			НеоформленныеТовары = ТабОстаткиНеоформленныхТоваров.НайтиСтроки(СтруктураОтбора);
			Для Каждого Строка Из НеоформленныеТовары Цикл
				
				КоличествоКСписанию = Мин(Строка.Количество, КоличествоКРаспределению);
				Строка.Количество = Строка.Количество - КоличествоКСписанию;
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКСписанию;
				
				Если Строка.Количество = 0 Тогда
					Строка.ОстаткиЗакрыты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураОтбораСтрокДокумента = Новый Структура;
			СтруктураОтбораСтрокДокумента.Вставить("Номенклатура",		СтруктураОтбора.Номенклатура);
			СтруктураОтбораСтрокДокумента.Вставить("Характеристика",	СтруктураОтбора.Характеристика);
			СтруктураОтбораСтрокДокумента.Вставить("ЕстьНомерГТД",		Ложь);
			СтруктураОтбораСтрокДокумента.Вставить("НетКоличества",		Ложь);
			
			СтрокиДокумента = ТабТоварыДокумента.НайтиСтроки(СтруктураОтбораСтрокДокумента);
			
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоКСписанию = Мин(СтрокаДокумента.Количество, КоличествоКРаспределению);
				КоличествоКРаспределению = КоличествоКРаспределению - КоличествоКСписанию;
				
				СуммаКСписанию = ?(СтрокаДокумента.Количество <= КоличествоКСписанию,
				СтрокаДокумента.Сумма, Окр(СтрокаДокумента.Сумма / СтрокаДокумента.Количество * КоличествоКСписанию));
				
				СтрокаДокумента.Количество = СтрокаДокумента.Количество - КоличествоКСписанию;
				СтрокаДокумента.Сумма = СтрокаДокумента.Сумма - СуммаКСписанию;
				
				СтрокаДокументаГТД = ТабТоварыДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокументаГТД, СтрокаДокумента);
				
				СтрокаДокументаГТД.Количество          = КоличествоКСписанию;
				СтрокаДокументаГТД.Сумма               = СуммаКСписанию;
				СтрокаДокументаГТД.СуммаВРознице       = КоличествоКСписанию * СтрокаДокументаГТД.ЦенаВРознице;
				СтрокаДокументаГТД.ЕстьНомерГТД        = Истина;
				
				Если СтрокаДокумента.Количество = 0 Тогда
					СтрокаДокумента.НетКоличества = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		СтруктураОтбора = Новый Структура("НетКоличества", Ложь);
		ТабТовары = ТабТоварыДокумента.Скопировать(СтруктураОтбора);
		ТабТовары.Сортировать("НомерСтрокиДокумента");
		
		// Переопределение таблицы товаров
		Результат.Вставить("Товары", ТабТовары);
	КонецЕсли;
	#КонецОбласти
	
	
	Возврат Результат;
КонецФункции
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	Если КомпонентыОбмена.ВерсияФорматаОбмена = "1.6.BAS" Тогда
		ПространствоИмен = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.6.BAS";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	ИначеЕсли МассивСтрок.Количество() > 1 Тогда
		ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
		ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
		Если ТипФабрики <> Неопределено Тогда
			Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
				ИмяТекОбъекта = МассивСтрок[Сч];
				Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
					ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
				Иначе
					ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
				КонецЕсли;
				Если ТипФабрики = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли
			КонецЦикла;
			Результат = ТипФабрики <> Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура СинхронизироватьДанныеПартнераСДаннымиКонтрагента(ПартнерОбъект, Контрагент, КомпонентыОбмена)
	Если ПартнерОбъект.ЭтоНовый() Тогда
		
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
		ПартнерОбъект.ГруппаДоступа = ЭлементПоУмолчанию_ГруппаДоступаПартнера(КомпонентыОбмена.ПараметрыКонвертации);
		
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект.Ссылка <> Справочники.Партнеры.НеизвестныйПартнер Тогда
		
		ПартнерОбъект.Наименование        = Контрагент.Наименование;
		ПартнерОбъект.НаименованиеПолное  = Контрагент.НаименованиеПолное;
		
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ПартнерОбъект.КонтактнаяИнформация.Очистить();
		Для Каждого СтрокаКИКонтрагента Из Контрагент.КонтактнаяИнформация Цикл
			
			Если СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаКиПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКиКонтрагента);
			СтрокаКИПартнера.Вид = ВидКиПартнера;
			
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		Если БылаПометкаУдаления Тогда
			ПараметрыКлюча = Новый Структура("Партнер", ПартнерОбъект.Ссылка);
			Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
			Справочники.ВидыЗапасов.УстановитьПометкуУдаления(ПараметрыКлюча, Ложь);
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		
	КонецЕсли;
КонецПроцедуры
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации, ПроверятьНаГруппу = Ложь)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Если ПроверятьНаГруппу И СкладИсходный.ЭтоГруппа Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СчетРасходовПоСтатьеРасходов(СтатьяРасходов, Организация = Неопределено, Подразделение = Неопределено, СчетУчета = "")
	Если НЕ ЗначениеЗаполнено(СтатьяРасходов) Тогда
		Возврат "";
	КонецЕсли;
	Если ТипЗнч(СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		Если ЭтоУТ() Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "КорреспондирующийСчет");
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции
Процедура ТаблицаУслугЗаполнитьПринципала(КомпонентыОбмена, ТабУслуги)
	ТабУслуги.Колонки.Добавить("Принципал");
	Для Каждого СтрокаУслуги Из ТабУслуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУслуги.ПринципалСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаУслуги.ПринципалСсылка) = Тип("СправочникСсылка.Организации") Тогда
			СтрокаУслуги.Принципал = КонтрагентИзОрганизации(СтрокаУслуги.ПринципалСсылка, КомпонентыОбмена);
		ИначеЕсли ТипЗнч(СтрокаУслуги.ПринципалСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаУслуги.Принципал = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаУслуги.ПринципалСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ЭлементПоУмолчанию_ГруппаДоступаНоменклатуры(ПараметрыКонвертации)
	ГруппаДоступа = Неопределено;
	Если ПараметрыКонвертации.ГруппаДоступаНоменклатурыПоУмолчанию = Неопределено Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Группа доступа по умолчанию';uk='Група доступу по умовчанню'");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаНоменклатуры.Ссылка КАК ГруппаДоступаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаНоменклатуры.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаНоменклатуры КАК ГруппыДоступаНоменклатуры
		|ГДЕ
		|	НЕ ГруппыДоступаНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ГруппаДоступа = Выборка.ГруппаДоступаНоменклатуры;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаНоменклатуры.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ГруппаДоступа = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
	
		
		ПараметрыКонвертации.ГруппаДоступаНоменклатурыПоУмолчанию = ГруппаДоступа;
		
	Иначе
		ГруппаДоступа = ПараметрыКонвертации.ГруппаДоступаНоменклатурыПоУмолчанию;
	КонецЕсли;
	
	Возврат ГруппаДоступа;
КонецФункции
Функция ЭлементПоУмолчанию_ГруппаДоступаПартнера(ПараметрыКонвертации)
	ГруппаДоступа = Неопределено;
	Если ПараметрыКонвертации.ГруппаДоступаПартнеровПоУмолчанию = Неопределено Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Группа доступа по умолчанию';uk='Група доступу по умовчанню'");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	ГруппыДоступаПартнеров.Ссылка КАК ГруппаДоступаПартнера,
		|	ВЫБОР
		|		КОГДА ГруппыДоступаПартнеров.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
		|ГДЕ
		|	НЕ ГруппыДоступаПартнеров.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ГруппаДоступа = Выборка.ГруппаДоступаПартнера;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			
			ГруппаДоступаОбъект = Справочники.ГруппыДоступаПартнеров.СоздатьЭлемент();
			ГруппаДоступаОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			
			Попытка
				ГруппаДоступаОбъект.Записать();
				ГруппаДоступа = ГруппаДоступаОбъект.Ссылка;
			Исключение
				ГруппаДоступа = Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПараметрыКонвертации.ГруппаДоступаПартнеровПоУмолчанию = ГруппаДоступа;
		
	Иначе
		ГруппаДоступа = ПараметрыКонвертации.ГруппаДоступаПартнеровПоУмолчанию;
	КонецЕсли;
	
	Возврат ГруппаДоступа;
КонецФункции
Функция ЭлементПоУмолчанию_НоменклатураУслуга(КомпонентыОбмена)
	ЭлементПоУмолчанию = Неопределено;
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ПараметрыКонвертации.ЭлементПоУмолчанию_НоменклатураУслуга = Неопределено Тогда
		
		НеобходимоСоздатьЭлемент = Ложь;
		
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Услуга';uk='Послуга'");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Номенклатура.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
		Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
				ЭлементПоУмолчанию = Выборка.Ссылка;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
		
		Если НеобходимоСоздатьЭлемент Тогда
			
			ЭлементПоУмолчаниюОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			ЭлементПоУмолчаниюОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			ЭлементПоУмолчаниюОбъект.НаименованиеПолное = НаименованиеЭлементаДляОбменаПоУмолчанию;
			
			ЭлементПоУмолчаниюОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
			ЭлементПоУмолчаниюОбъект.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			
			ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
			Если ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
				ЕдиницаПоУмолчанию = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт", Истина);
			КонецЕсли;
			ЭлементПоУмолчаниюОбъект.ЕдиницаИзмерения = ЕдиницаПоУмолчанию;
			ЭлементПоУмолчаниюОбъект.ЕдиницаДляОтчетов = ЕдиницаПоУмолчанию;
			ЭлементПоУмолчаниюОбъект.КоэффициентЕдиницыДляОтчетов = 1;
			ЭлементПоУмолчаниюОбъект.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
			
			ЭлементПоУмолчаниюОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ОтложеннаяОбработка_Номенклатура(ЭлементПоУмолчаниюОбъект, КомпонентыОбмена);
				ЭлементПоУмолчаниюОбъект.Записать();
				ЭлементПоУмолчанию = ЭлементПоУмолчаниюОбъект.Ссылка;
			Исключение
				ЭлементПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПараметрыКонвертации.ЭлементПоУмолчанию_НоменклатураУслуга = ЭлементПоУмолчанию;
		
	Иначе
		ЭлементПоУмолчанию = ПараметрыКонвертации.ЭлементПоУмолчанию_НоменклатураУслуга;
	КонецЕсли;
	
	Возврат ЭлементПоУмолчанию;
КонецФункции
Функция ЭлементПоУмолчанию_СтатьяРасходов(НаименованиеЭлементаДляОбменаПоУмолчанию)
	НеобходимоСоздатьЭлемент = Ложь;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
	|	Ссылка КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов 
	|ГДЕ
	|	НЕ ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество() = 1 Или Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
			СтатьяРасходов = Выборка.СтатьяРасходов;
		Иначе
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	Если НеобходимоСоздатьЭлемент Тогда
		
		СтатьяРасходовОбъект = ПланыВидовХарактеристик.СтатьиРасходов.СоздатьЭлемент();
		СтатьяРасходовОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	
		Попытка
			СтатьяРасходовОбъект.Записать();
			СтатьяРасходов = СтатьяРасходовОбъект.Ссылка;
		Исключение
			СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		КонецПопытки
	КонецЕсли;
	
	
	Возврат СтатьяРасходов;
КонецФункции
Функция ЭтоУТ()
	Возврат ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ВыгружатьУправленческуюОрганизацию");
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("Организации");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("ЭлементПоУмолчанию_НоменклатураУслуга");
	ПараметрыКонвертации.Вставить("КонтрагентНашеПредприятие");
	ПараметрыКонвертации.Вставить("КонтрагентНашеПредприятиеБанковскийСчет");
	ПараметрыКонвертации.Вставить("СозданныеПриВыгрузкеОбъекты");
	ПараметрыКонвертации.Вставить("ГруппаДоступаПартнеровПоУмолчанию");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ЗагруженныеСтатьиДДСИХозОперации");
	ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСПоставщиками");
	ПараметрыКонвертации.Вставить("ИспользуютсяДоговорыСКлиентами");
	ПараметрыКонвертации.Вставить("ВидыЦенНоменклатуры");
	ПараметрыКонвертации.Вставить("НастройкиДопАналитикиПоДоговорам");
	ПараметрыКонвертации.Вставить("ТаблицаСБДСДляСозданияКонтрагентов");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеНедостачТоваров_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеНедостачТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВозвратМеждуОрганизациями_ОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ВозвратМеждуОрганизациями_Поставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеУслугПрочихАктивов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияУслугПрочихАктивов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СборкаТоваров_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_ОтчетКомиссияМеждуОрганизациями_Комиссионер_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСКлиентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыВСоглашенияСПоставщик_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Контрагенты" Тогда 
		ОтложеннаяОбработка_Контрагенты(
			Параметры.Объект, Параметры.КомпонентыОбмена, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеТоваровУслуг" Тогда 
		ОтложеннаяОбработка_ПоступлениеТоваровУслуг(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияТоваровУслуг" Тогда 
		ОтложеннаяОбработка_РеализацияТоваровУслуг(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

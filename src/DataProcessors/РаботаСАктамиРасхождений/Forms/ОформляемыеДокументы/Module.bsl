
&НаСервере
Перем ВыведенныеДокументы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьЗаявкиНаВозврат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
	ВыводитьЛегенду = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.РаботаСАктамиРасхождений", "ВыводитьЛегенду", Ложь);
	
	АктОРасхождениях = Параметры.АктОРасхождениях;
	
	СформироватьОтчет();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Активизировать();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_ВозвратТоваровПоставщику"
		Или ИмяСобытия = "Запись_ЗаказКлиента"
		Или ИмяСобытия = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_КорректировкаПоступления"
		Или ИмяСобытия = "Запись_КорректировкаРеализации"
		Или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
		Или ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
		Или ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеНедостачТоваров" Тогда
		
		СформироватьОтчет();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыводитьЛегендуПриИзменении(Элемент)
	
	ВыводитьЛегендуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Область.Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Область.Расшифровка) <> Тип("Структура") Тогда
		ПоказатьЗначение(, Область.Расшифровка);
	Иначе
		
		РасхожденияКлиент.ОбработкаКомандыОтчетаОформлениеДокументов(
			ЭтаФорма,
			Область.Расшифровка.Описание.ИмяКоманды,
			Область.Расшифровка.Описание.АктОРасхождениях,
			Область.Расшифровка.Описание.ОснованиеАкта,
			Область.Расшифровка.Данные);
		
		Если Область.Расшифровка.Описание.ИмяКоманды = "Изменить" Тогда
			Обновить(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	СформироватьОтчет();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

&НаСервере
Процедура СформироватьОтчет()
	
	ЕстьОшибки = Ложь;
	
	ТабличныйДокумент.Очистить();
	Макет = Обработки.РаботаСАктамиРасхождений.ПолучитьМакет("ОформляемыеДокументы");
	
	ВыборкаШапка = ТекстЗапросаШапкаАктаОРасхождениях();
	
	Если Не ЗначениеЗаполнено(ВыборкаШапка) Тогда
		ВывестиОшибку(НСтр("ru='Данные документа недоступны';uk='Дані документа недоступні'"), Макет);
		Возврат;
	КонецЕсли;
	
	Если ВыборкаШапка.ЕстьОшибкиПроведение Тогда
		ВывестиОшибку(НСтр("ru='Документ не проведен. Оформление документов по результатам приемки невозможно.';uk='Документ не проведено. Оформлення документів за результатами приймання неможливо.'"), Макет);
		Возврат;
	КонецЕсли;
	
	Если ВыборкаШапка.ЕстьОшибкиСтатус Тогда
		ВывестиОшибку(НСтр("ru=' Для оформления документов по результатам расхождений необходимо перевести документ в статус ""Отрабатывается"" или ""Отработано"".';uk=' Для оформлення документів за результатами розбіжностей необхідно перекласти документ в статус ""Відпрацьовується"" або ""Відпрацьовано"".'"), Макет);
		Возврат;
	КонецЕсли;
	
	ВыведенныеДокументы = Новый ТаблицаЗначений;
	ВыведенныеДокументы.Колонки.Добавить("Имя");
	ВыведенныеДокументы.Колонки.Добавить("Ссылка");
	ВыведенныеДокументы.Колонки.Добавить("ДополнительныйПараметр");
	
	СпособОтраженияРасхождений   = ВыборкаШапка.СпособОтраженияРасхождений;
	ХозяйственнаяОперацияАкта    = ВыборкаШапка.ХозяйственнаяОперация;
	ТипОснованияАктаОРасхождении = ВыборкаШапка.ТипОснованияАктаОРасхождении;
	
	ПраваДоступаНаТаблицы        = Новый Структура;
	СоответствиеНаборовДанных    = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СпособОтраженияРасхождений) Тогда 
		
		ВывестиОшибку(НСтр("ru='В акте приемки не задан способ отражения расхождений';uk='В акті приймання не заданий спосіб відображення розбіжностей'"), Макет);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеРеализации();
			
		Иначе
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеВозвратаПоставщику();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеНедостачТоваров", ПравоДоступа("Чтение", Метаданные.Документы.СписаниеНедостачТоваров));
		ПраваДоступаНаТаблицы.Вставить("ЧтениеОприходованиеИзлишковТоваров", ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеИзлишковТоваров));
		ПраваДоступаНаТаблицы.Вставить("ЧтениеСписаниеЗадолженности", ПравоДоступа("Чтение", Метаданные.Документы.СписаниеЗадолженности));
		
		Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг Тогда
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеКорректировкаПоступления", ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаПоступления));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеВозвратТоваровПоставщику", ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеЗаказПоставщику", ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеПоступлениеТоваровУслуг", ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг));
			
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПоступленияТоваров(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
			
		Иначе
			
			ПраваДоступаНаТаблицы.Вставить("ЧтениеРеализаций", ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг));
			ПраваДоступаНаТаблицы.Вставить("ЧтениеВозвратТоваровОтКлиента", ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента));
			ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеВозвратаОтКлиента(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных);
			
		КонецЕсли;

		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		ТекстЗапроса = ТекстЗапросаАктОРасхожденияхПослеПеремещения();
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("АктОРасхождениях", АктОРасхождениях);
	Запрос.УстановитьПараметр("СпособОтраженияРасхождений",  СпособОтраженияРасхождений);
	Запрос.УстановитьПараметр("ИспользоватьЗаявкиНаВозврат", ИспользоватьЗаявкиНаВозврат);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		ВывестиОшибку(НСтр("ru='По результатам приемки не выявлено расхождений, требующих оформления документов';uk='За результатами приймання не виявлено розбіжностей, що потребують оформлення документів'"), Макет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуДействий(АктОРасхождениях, РезультатЗапроса);
	ЗаполнитьТаблицыСозданныхДокументов(РезультатЗапроса, ТипОснованияАктаОРасхождении, СоответствиеНаборовДанных);
	
	МассивОформленныхДокументов = Новый Массив;
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
	Область = Макет.ПолучитьОбласть("АктОРасхождениях");
	Область.Параметры.АктОРасхождениях = АктОРасхождениях;
	ТабличныйДокумент.Вывести(Область);
	
	// тут либо реализация либо возврат товаров поставщику
	ВыводитьГруппуОснование = (Действия.Количество() > 1 
	                           И ХозяйственнаяОперацияАкта <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Для Каждого СтрокаДействия ИЗ Действия Цикл
		
		Если ВыводитьГруппуОснование Тогда
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
			
			Область = Макет.ПолучитьОбласть("Основание");
			Область.Параметры.Основание = СтрокаДействия.Основание;
			ТабличныйДокумент.Вывести(Область);
			
			ТабличныйДокумент.НачатьГруппуСтрок("Основание");
			
		КонецЕсли;
		
		Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеОтгрузки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении);
			
		ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеПриемки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы);
			
		ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			
			ВывестиСтрокиДействийПоАктуПослеПеремещения(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении);
			
		КонецЕсли;
		
		Если ВыводитьГруппуОснование Тогда
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабличныйДокумент.ВысотаТаблицы <= 2 Тогда
		ОбластьОшибка = Макет.ПолучитьОбласть("СтрокаОшибка");
		ОбластьОшибка.Параметры.ТекстОшибки = НСтр("ru='Вам недоступно для оформления ни одного документа. Возможно нет необходимых прав.';uk='Вам недоступно для оформлення жодного документу. Можливо немає необхідних прав.'");
		ТабличныйДокумент.Вывести(ОбластьОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДействий(АктОРасхождениях, РезультатЗапроса);
	
	Действия.Очистить();
	
	ВыборкаОснования = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОснования.Следующий() Цикл
		
		НоваяСтрока = Действия.Добавить();
		НоваяСтрока.Основание               = ВыборкаОснования.Основание;
		НоваяСтрока.ПоЗаказам               = ВыборкаОснования.ПоЗаказам;
		НоваяСтрока.Заказ                   = ВыборкаОснования.Заказ;
		
		ВыборкаДействия = ВыборкаОснования.Выбрать();
		Пока ВыборкаДействия.Следующий() Цикл
			
			НоваяСтрока.ВариантыДействий.Добавить(ВыборкаДействия.Действие);
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы
				И ВыборкаДействия.ПоВинеСтороннейКомпании Тогда
				НоваяСтрока.ПоВинеСтороннейКомпании = Истина;
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное Тогда
				
				НоваяСтрока.ЕстьОтражениеИзлишков = Истина;
				
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы Тогда
				
				НоваяСтрока.ЕстьОтражениеНедостач = Истина;
				
			КонецЕсли;
			
			Если ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы
				Или ВыборкаДействия.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть Тогда
				
				НоваяСтрокаВариантыДействийСклады = НоваяСтрока.ДействияСклады.Добавить();
				НоваяСтрокаВариантыДействийСклады.ВариантДействия = ВыборкаДействия.Действие;
				НоваяСтрокаВариантыДействийСклады.Склад           = ВыборкаДействия.Склад;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыСозданныхДокументов(РезультатЗапроса, ТипОснованияАктаОРасхождении, СоответствиеНаборовДанных)
	
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			РеализацииКорректировки.Загрузить(РезультатЗапроса[2].Выгрузить());
			РеализацииВозвраты.Загрузить(РезультатЗапроса[3].Выгрузить());
			РеализацииЗаказы.Загрузить(РезультатЗапроса[4].Выгрузить());
			Допоставки.Загрузить(РезультатЗапроса[5].Выгрузить());
		Иначе
			ДопоступленияПоВозвратамПоставщику.Загрузить(РезультатЗапроса[2].Выгрузить());
			ВозвратыПоВозвратамПоставщику.Загрузить(РезультатЗапроса[3].Выгрузить());
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		Для Каждого ЭлементСоответствия Из СоответствиеНаборовДанных Цикл
			ЭтотОбъект[ЭлементСоответствия.Ключ].Загрузить(РезультатЗапроса[ЭлементСоответствия.Значение].Выгрузить())
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		ПеремещенияПоПеремещениям.Загрузить(РезультатЗапроса[2].Выгрузить());
		ПеремещенияПоПеремещениямНаВозврат.Загрузить(РезультатЗапроса[3].Выгрузить());
		ПеремещенияТоваровЗаказыНаПеремещения.Загрузить(РезультатЗапроса[4].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

&НаСервере
Функция ТекстЗапросаШапкаАктаОРасхождениях()
	
	Запрос = Новый Запрос;
	Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	АктОРасхожденияхПослеОтгрузки.Ссылка,
		|	АктОРасхожденияхПослеОтгрузки.Статус,
		|	АктОРасхожденияхПослеОтгрузки.СпособОтраженияРасхождений,
		|	АктОРасхожденияхПослеОтгрузки.ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеОтгрузки.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеОтгрузки.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхожденияхПослеОтгрузки
		|ГДЕ
		|	АктОРасхожденияхПослеОтгрузки.Ссылка = &АктОРасхождениях";
		
	ИначеЕсли ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	АктОРасхожденияхПослеПеремещения.Ссылка,
		|	АктОРасхожденияхПослеПеремещения.Статус,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов) КАК СпособОтраженияРасхождений,
		|	Неопределено КАК ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПеремещения.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПеремещения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеПеремещения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеПеремещения.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПеремещения КАК АктОРасхожденияхПослеПеремещения
		|ГДЕ
		|	АктОРасхожденияхПослеПеремещения.Ссылка = &АктОРасхождениях";
		
	ИначеЕсли  ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	АктОРасхожденияхПослеПриемки.Ссылка,
		|	АктОРасхожденияхПослеПриемки.Статус,
		|	АктОРасхожденияхПослеПриемки.СпособОтраженияРасхождений,
		|	АктОРасхожденияхПослеПриемки.ТипОснованияАктаОРасхождении,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПриемки.Проведен
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиПроведение,
		|	ВЫБОР
		|		КОГДА АктОРасхожденияхПослеПриемки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению)
		|			ИЛИ АктОРасхожденияхПослеПриемки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	АктОРасхожденияхПослеПриемки.ХозяйственнаяОперация
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхожденияхПослеПриемки
		|ГДЕ
		|	АктОРасхожденияхПослеПриемки.Ссылка = &АктОРасхождениях";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АктОРасхождениях", АктОРасхождениях);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	Возврат ВыборкаШапка;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеРеализации()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК Реализация
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Реализация                     КАК Основание,
	|	Ложь                                    КАК ПоВинеСтороннейКомпании,
	|	Действия.Реализация.РеализацияПоЗаказам КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО                            КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	КорректировкаРеализации.ДокументОснование КАК Реализация,
	|	КорректировкаРеализации.Ссылка КАК Корректировка,
	|	КорректировкаРеализации.ХозяйственнаяОперация
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.АктОРасхожденияхПослеОтгрузкиОснование = &АктОРасхождениях
	|	И КорректировкаРеализации.Проведен
	|	И ВЫБОР
	|			КОГДА &СпособОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов)
	|				ТОГДА КорректировкаРеализации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок)
	|			ИНАЧЕ КорректировкаРеализации.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара),
	|			                                                       ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.ДокументРеализации КАК Реализация,
	|	ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка КАК ДокументВозврата
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.ДокументРеализации = Действия.Реализация
	|ГДЕ
	|	&ИспользоватьЗаявкиНаВозврат
	|	И ЗаявкаНаВозвратТоваровОтКлиентаВозвращаемыеТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
 	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации,
	|	ВозвратТоваровОтКлиентаТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ВозвратТоваровОтКлиентаТовары.ДокументРеализации = Действия.Реализация
	|ГДЕ
	|	НЕ &ИспользоватьЗаявкиНаВозврат
	|	И ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеОтгрузкиТовары.КоличествоУпаковок
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК ОформленнаяРеализация,
	|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.Проведен)
	|			И Действия.Реализация = РеализацияТоваровУслуг.ДопоставкаПоРеализации";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеВозвратаОтКлиента(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие,
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.Основание КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании,
	|	ВЫБОР
	|		КОГДА Действия.Основание.ЗаявкаНаВозвратТоваровОтКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоЗаказам,
	|	Действия.Склад КАК Склад,
	|	Действия.Основание.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|";
	
	ТекущийНомер = 1;
	
	Если ПраваДоступаНаТаблицы.ЧтениеРеализаций Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК Основание,
		|	РеализацияТоваровУслуг.Ссылка КАК Реализация
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО РеализацияТоваровУслуг.ДопоставкаПоРеализации = Действия.Основание
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтКлиентовРеализации", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровОтКлиента Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка КАК Возврат,
		|	Документ.ДовозвратПоВозврату КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Документ
		|		ПО (Документ.Проведен)
		|			И Действия.Основание = Документ.ДовозвратПоВозврату
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ВозвратыОтКлиентовВозвраты", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка КАК Списание,
		|	СписаниеНедостачТоваров.Склад КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО (СписаниеНедостачТоваров.Проведен)
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.Склад     = СписаниеНедостачТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостач", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписаниеЗадолженности.Ссылка КАК Списание,
		|	СписаниеЗадолженности.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеЗадолженности КАК СписаниеЗадолженности
		|		ПО (СписаниеЗадолженности.Проведен)
		|			И Действия.Основание = СписаниеЗадолженности.Основание
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияЗадолженностей", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.Склад     = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеВозвратаПоставщику()

	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Действие,
	|	АктОРасхожденияхПослеОтгрузкиТовары.Реализация КАК ВозвратТоваровПоставщику
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеОтгрузкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеОтгрузкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Действия.Действие                 КАК Действие,
	|	Действия.ВозвратТоваровПоставщику КАК Основание,
	|	Ложь                              КАК ПоВинеСтороннейКомпании,
	|	Ложь                              КАК ПоЗаказам,
	|	НЕОПРЕДЕЛЕНО                      КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	ВозвратТоваровПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.ДопоступлениеПоДокументу КАК Основание,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
	|		ПО ПоступлениеТоваровУслуг.ДопоступлениеПоДокументу = Действия.ВозвратТоваровПоставщику
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ВозвратТоваровПоставщику,
	|	Документ.ДовозвратПоВозврату КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.ВозвратТоваровПоставщику = Документ.ДовозвратПоВозврату";

КонецФункции

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПоступленияТоваров(ПраваДоступаНаТаблицы, СоответствиеНаборовДанных)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Действие,
	|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК Основание,
	|	АктОРасхожденияхПослеПриемкиТовары.Склад КАК Склад,
	|	АктОРасхожденияхПослеПриемкиТовары.ПоВинеСтороннейКомпании КАК ПоВинеСтороннейКомпании
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПриемкиТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПриемкиТовары.Количество <> 0
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления)
	|	И АктОРасхожденияхПослеПриемкиТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Основание                      КАК Основание,
	|	Действия.ПоВинеСтороннейКомпании        КАК ПоВинеСтороннейКомпании,
	|	Действия.Основание.ПоступлениеПоЗаказам КАК ПоЗаказам,
	|	Действия.Склад                          КАК Склад,
	|	НЕОПРЕДЕЛЕНО                            КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|";
	
	ТекущийНомер = 1;
	
	Если ПраваДоступаНаТаблицы.ЧтениеКорректировкаПоступления Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КорректировкаПоступления.ДокументОснование     КАК Основание,
		|	КорректировкаПоступления.Ссылка                КАК Корректировка,
		|	КорректировкаПоступления.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.АктОРасхожденияхПослеПриемкиОснование = &АктОРасхождениях
		|	И КорректировкаПоступления.Проведен
		|	И &СпособОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления)
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияКорректировки", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровПоставщику Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВозвратТоваровПоставщикуТовары.ДокументПоступления КАК ДокументПоступления,
		|	ВозвратТоваровПоставщикуТовары.Ссылка КАК ВозвратПоставщику, 
		|	ВозвратТоваровПоставщикуТовары.Ссылка.Склад КАК Склад
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Действия КАК Действия
		|		ПО ВозвратТоваровПоставщикуТовары.ДокументПоступления = Действия.Основание
		|		И ВозвратТоваровПоставщикуТовары.Ссылка.Склад = Действия.Склад
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.Проведен
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияВозвраты", ТекущийНомер);
	
	КонецЕсли;	
	
	Если ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику КАК ЗаказПоставщику,
		|	АктОРасхожденияхПослеПриемкиТовары.ДокументОснование КАК ДокументПоступления
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
		|ГДЕ
		|	АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеПриемкиТовары.КоличествоУпаковок
		|	И АктОРасхожденияхПослеПриемкиТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу)
		|	И АктОРасхожденияхПослеПриемкиТовары.Ссылка = &АктОРасхождениях
		|	И АктОРасхожденияхПослеПриемкиТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщику УБЫВ
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияЗаказы", ТекущийНомер);
	
	КонецЕсли;
	
	
	Если ПраваДоступаНаТаблицы.ЧтениеПоступлениеТоваровУслуг Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка КАК ОформленноеПоступление,
		|	ПоступлениеТоваровУслуг.ДопоступлениеПоДокументу КАК ДопоставкаПоПоступлению
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|		ПО (ПоступлениеТоваровУслуг.Проведен)
		|			И Действия.Основание = ПоступлениеТоваровУслуг.ДопоступлениеПоДокументу
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ПоступленияПоступления", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписаниеНедостачТоваров.Ссылка КАК Списание,
		|	СписаниеНедостачТоваров.Склад КАК Склад,
		|	СписаниеНедостачТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
		|		ПО (СписаниеНедостачТоваров.Проведен)
		|			И Действия.Основание = СписаниеНедостачТоваров.Основание
		|			И Действия.Склад     = СписаниеНедостачТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияНедостач", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписаниеЗадолженности.Ссылка КАК Списание,
		|	СписаниеЗадолженности.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеЗадолженности КАК СписаниеЗадолженности
		|		ПО (СписаниеЗадолженности.Проведен)
		|			И Действия.Основание = СписаниеЗадолженности.Основание
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияСписанияЗадолженностей", ТекущийНомер);
	
	КонецЕсли;
	
	Если ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
	
		ТекстЗапроса = ТекстЗапроса + РасхожденияКлиентСервер.ТекстЗапросаОбъединить();

		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОприходованиеИзлишковТоваров.Ссылка КАК Оприходование,
		|	ОприходованиеИзлишковТоваров.Склад КАК Склад,
		|	ОприходованиеИзлишковТоваров.Основание КАК Основание
		|ИЗ
		|	Действия КАК Действия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
		|		ПО (ОприходованиеИзлишковТоваров.Проведен)
		|			И Действия.Основание = ОприходованиеИзлишковТоваров.Основание
		|			И Действия.Склад     = ОприходованиеИзлишковТоваров.Склад
		|";
		
		ТекущийНомер = ТекущийНомер + 1;
		СоответствиеНаборовДанных.Вставить("ОснованияОприходования", ТекущийНомер);
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции 

&НаСервере
Функция ТекстЗапросаАктОРасхожденияхПослеПеремещения()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПеремещения.Действие                КАК Действие,
	|	АктОРасхожденияхПослеПеремещения.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	АктОРасхожденияхПослеПеремещения.Ссылка.СкладПолучатель  КАК СкладПолучатель,
	|	АктОРасхожденияхПослеПеремещения.ДокументОснование       КАК Основание
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещения
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещения.Ссылка = &АктОРасхождениях
	|	И АктОРасхожденияхПослеПеремещения.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещения.Количество <> 0
	|	И АктОРасхожденияхПослеПеремещения.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
	|	И АктОРасхожденияхПослеПеремещения.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
	|	И АктОРасхожденияхПослеПеремещения.Действие <> ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Действия.Действие                       КАК Действие,
	|	Действия.Основание                      КАК Основание,
	|	Действия.Основание.ПеремещениеПоЗаказам КАК ПоЗаказам,
	|	Ложь                                    КАК ПоВинеСтороннейКомпании,
	|	Действия.Основание.ЗаказНаПеремещение   КАК Заказ
	|ИЗ
	|	Действия КАК Действия
	|ИТОГИ ПО
	|	Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ПеремещениеТоваров,
	|	Документ.ПеремещениеАктаОРасхождениях КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.Основание = Документ.ПеремещениеАктаОРасхождениях
	|			И Действия.СкладОтправитель = Документ.СкладОтправитель
	|			И Действия.СкладПолучатель = Документ.СкладПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК ПеремещениеТоваров,
	|	Документ.ПеремещениеАктаОРасхождениях КАК Основание
	|ИЗ
	|	Действия КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Документ
	|		ПО (Документ.Проведен)
	|			И Действия.Основание = Документ.ПеремещениеАктаОРасхождениях
	|			И Действия.СкладПолучатель = Документ.СкладОтправитель
	|			И Действия.СкладОтправитель = Документ.СкладПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование КАК ПеремещениеТоваров,
	|	ПеремещениеТоваров.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу <> АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
	|	И АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И ПеремещениеТоваров.ЗаказНаПеремещение IS NOT NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПеремещение УБЫВ
	|";

КонецФункции

#КонецОбласти

#Область ВыводИнформацииВОтчет

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеОтгрузки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении)

	Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов Тогда
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
				//Если есть заказы:
				//+Выводим накладную, которую надо уменьшить. (КнопкаИзменений)
				//+Выводить команду на создание новой накладной на реализацию недопоставленного. (КомандаГиперссылка)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеРеализацииТоваровУслуг(
					СтрокаДействия,
					Макет,
					Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику Тогда
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеВозвратаТоваровПоставщику(
					СтрокаДействия,
					Макет,
					Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				//Если есть заказы:
				//+Выводим накладную, которую надо уменьшить (КнопкаИзменений).
				//+Выводим заказ, в котором строки подлежат отмене. (КнопкаИзменений).
				//Если нет заказов:
				//+Выводим накладную, которую надо уменьшить. (КнопкаИзменений)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
				Если СтрокаДействия.ПоЗаказам Тогда
					ТабличныйДокумент.НачатьГруппуСтрок();
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
						СпособОтраженияРасхождений);
					ВывестиИсправлениеДокументаЗаказ(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
			
			ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику Тогда
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
		
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
				
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
				//+Увеличение накладной сверх заказа (КнопкаИзменений)
				//+Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка  )
				//+Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  )
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику Тогда
				
				// Увеличение возврата (КнопкаИзменений)
				// Оформление поступления перепоставленного. (КомандаГиперссылка  )
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиДокументПоступлениеТоваровУслуг(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
				
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				//+Увеличение накладной сверх заказа. (КнопкаИзменений)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного,
					СпособОтраженияРасхождений);
				
				ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ВозвратПоставщику Тогда
				
				// Увеличение возврата. (КнопкаИзменений)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Изменить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного,
					СпособОтраженияРасхождений);
				
				ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов Тогда

		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				//+Документ "Корректировка реализации" по выявленным расхождениям  (КомандаГиперссылка)
				//+Если есть заявки на возврат, то оформление заявки на возврат перепоставленного (КомандаГиперссылка  )
				//+Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  )
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
					СпособОтраженияРасхождений);
				ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				//+Документ "Корректировка реализации" по выявленным расхождениям (КомандаГиперссылка)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
					СпособОтраженияРасхождений);
				
				ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, Макет, Описание);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
			
				//+Документ "Корректировка реализации" по выявленным расхождениям (КомандаГиперссылка)
				//+Оформление реализации на допоставку недопоставленного товара (КомандаГиперссылка)
				
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, Макет, Описание);
				
				ТабличныйДокумент.НачатьГруппуСтрок();
				Описание = Новый Структура(
					"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
					СтрокаДействия.Основание,
					АктОРасхождениях,
					"Оформить",
					Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
					СпособОтраженияРасхождений);
				ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы Тогда
		
		Если СтрокаДействия.ЕстьОтражениеИзлишков Тогда
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					//+Документ "Корректировка реализации" по реализации перепоставленных товаров (КомандаГиперссылка)
					//+Если есть заявки на возврат, то оформление заявки  на возврат перепоставленного (КомандаГиперссылка  )
					//+Если нет заявок на возврат , то оформление возврата перепоставленного. (КомандаГиперссылка  )
					
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
						СпособОтраженияРасхождений);
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара, Макет, Описание);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
						СпособОтраженияРасхождений);
					ВывестиДокументВозврата(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					//+Документ "Корректировка реализации" по реализации перепоставленных товаров (КомандаГиперссылка)
					
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного,
						СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара, Макет, Описание);
				
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаДействия.ЕстьОтражениеНедостач Тогда
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
				
				Если ТипЗнч(АктОРасхождениях) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
					И РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
					
					//+Оформление корректировки на возврат недопоставленного (КомандаГиперссылка)
					
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
						СпособОтраженияРасхождений);
					
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, Макет, Описание);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
				
				Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Тогда
				
					//+Оформление корректировки на возврат недопоставленного (КомандаГиперссылка)
					//+Оформление реализации на допоставку недопоставленного товара (КомандаГиперссылка)
					
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
						СпособОтраженияРасхождений);
					ВывестиДокументКорректировкаРеализации(СтрокаДействия, Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, Макет, Описание);
					
					ТабличныйДокумент.НачатьГруппуСтрок();
					Описание = Новый Структура(
						"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
						СтрокаДействия.Основание,
						АктОРасхождениях,
						"Оформить",
						Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
						СпособОтраженияРасхождений);
					ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание);
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеПеремещения(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении)

	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка) <> Неопределено Тогда
			
			// Выводим перемещение, которое надо уменьшить.  (КнопкаИзменений)
			// Выводить команду на создание нового перемещения на доперемещение недоперемещенного. (КомандаГиперссылка  )
			
			Описание = Новый Структура(
				"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
				СтрокаДействия.Основание,
				АктОРасхождениях,
				"Изменить",
				Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
				СпособОтраженияРасхождений);
			ВывестиИсправлениеПеремещенияТоваров(
				СтрокаДействия,
				Макет,
				Описание);
				
			Описание = Новый Структура(
				"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
				СтрокаДействия.Основание,
				АктОРасхождениях,
				"Оформить",
				Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка,
				СпособОтраженияРасхождений);
			ВывестиДокументПеремещениеТоваров(
				СтрокаДействия,
				Макет,
				Описание);
			
	КонецЕсли;

	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется) <> Неопределено Тогда
		
		// Если есть заказы:
		//  Выводим перемещение, которое надо уменьшить (КнопкаИзменений).
		//  Выводим заказ на перемещение, в котором строки подлежат отмене. (КомандаГиперссылка ).
		// Если нет заказов:
		//  Выводим перемещение, которое надо уменьшить (КнопкаИзменений).
		
		Описание = Новый Структура(
			"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
			СтрокаДействия.Основание,
			АктОРасхождениях,
			"Изменить",
			Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
			СпособОтраженияРасхождений);
		ВывестиИсправлениеПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
			
		Если СтрокаДействия.ПоЗаказам Тогда
			ТабличныйДокумент.НачатьГруппуСтрок();
			Описание = Новый Структура(
				"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
				СтрокаДействия.Основание,
				АктОРасхождениях,
				"Оформить",
				Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется,
				СпособОтраженияРасхождений);
			ВывестиДокументЗаказНаПеремещение(СтрокаДействия, Макет, Описание);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
			
	КонецЕсли;
		
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного) <> Неопределено Тогда
		
		// Создание нового перемещения на товары сверх заказа (КомандаГиперссылка)
		// Оформление перемещения на возврат переперемещенного. (КомандаГиперссылка)
		
		Описание = Новый Структура(
			"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
			СтрокаДействия.Основание,
			АктОРасхождениях,
			"Изменить",
			Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
			СпособОтраженияРасхождений);
		ВывестиИсправлениеПеремещенияТоваров(
			СтрокаДействия,
			Макет,
			Описание);
		
		Описание = Новый Структура(
			"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения, ПеремещениеНаВозврат",
			СтрокаДействия.Основание,
			АктОРасхождениях,
			"Оформить",
			Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного,
			СпособОтраженияРасхождений,
			Истина);
		ВывестиДокументПеремещениеТоваров(СтрокаДействия, Макет, Описание, Истина);
		
	КонецЕсли;

	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного) <> Неопределено Тогда
		
			//  Выводим перемещение, которое надо увеличить (КнопкаИзменений).
			
			Описание = Новый Структура(
				"ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения",
				СтрокаДействия.Основание,
				АктОРасхождениях,
				"Изменить",
				Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного,
				СпособОтраженияРасхождений);
			ВывестиИсправлениеПеремещенияТоваров(
				СтрокаДействия,
				Макет,
				Описание);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокиДействийПоАктуПослеПриемки(СтрокаДействия, Макет, ТипОснованияАктаОРасхождении, ПраваДоступаНаТаблицы)
	
	Если ТипОснованияАктаОРасхождении = Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровУслуг Тогда
	
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			Если СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов Тогда
				
				Описание.ИмяКоманды       = "Изменить";
				ВывестиИсправлениеПоступлениеТоваровУслуг(СтрокаДействия, Макет, Описание);
				
			ИначеЕсли СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления
				И ПраваДоступаНаТаблицы.ЧтениеКорректировкаПоступления Тогда
				
				Описание.ИмяКоманды       = "Оформить";
				ВывестиДокументКорректировкаПоступления(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеВозвратТоваровПоставщику Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументВозвратТоваровПоставщику(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам 
				И СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов
				И ПраваДоступаНаТаблицы.ЧтениеЗаказПоставщику Тогда

				ТабличныйДокумент.НачатьГруппуСтрок();
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеДокументаЗаказПоставщику(СтрокаДействия, Макет, Описание);
				
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено
			И ПраваДоступаНаТаблицы.ЧтениеПоступлениеТоваровУслуг Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДопоставкиПоПоступлению(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено
			Или СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			Описание.ИмяКоманды       = "Изменить";
			ВывестиИсправлениеВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументРеализацииПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу) <> Неопределено Тогда
			
			Если СтрокаДействия.ПоЗаказам Тогда
				
				Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
				
				Описание.ОснованиеАкта    = СтрокаДействия.Основание;
				Описание.АктОРасхождениях = АктОРасхождениях;
				Описание.ИмяКоманды       = "Оформить";
				Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть;
				Описание.СпособОтражения  = СпособОтраженияРасхождений;
				
				ВывестиИсправлениеЗаявкаНаВозвратТоваров(СтрокаДействия, Макет, Описание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку) <> Неопределено Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументДоВозвратаПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы) <> Неопределено Тогда
		
		Если ПраваДоступаНаТаблицы.ЧтениеСписаниеНедостачТоваров Тогда
		
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументСписаниеНедостачТоваров(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
		Если СтрокаДействия.ПоВинеСтороннейКомпании 
			И ПраваДоступаНаТаблицы.ЧтениеСписаниеЗадолженности Тогда
			
			Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
			
			Описание.ОснованиеАкта    = СтрокаДействия.Основание;
			Описание.АктОРасхождениях = АктОРасхождениях;
			Описание.ИмяКоманды       = "Оформить";
			Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы;
			Описание.СпособОтражения  = СпособОтраженияРасхождений;
			
			ВывестиДокументСписаниеЗадолженности(СтрокаДействия, Макет, Описание);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДействия.ВариантыДействий.НайтиПоЗначению(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы) <> Неопределено 
		И ПраваДоступаНаТаблицы.ЧтениеОприходованиеИзлишковТоваров Тогда
		
		Описание = СтруктурыОписанияВыводимогоВОтчетДействия();
		
		Описание.ОснованиеАкта    = СтрокаДействия.Основание;
		Описание.АктОРасхождениях = АктОРасхождениях;
		Описание.ИмяКоманды       = "Оформить";
		Описание.ВариантДействия  = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы;
		Описание.СпособОтражения  = СпособОтраженияРасхождений;
		
		ВывестиДокументОприходованиеИзлишков(СтрокаДействия, Макет, Описание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКорректировкаРеализации(СтрокаДействия, ХозяйственнаяОперация, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументКорректировкаРеализации", СтрокаДействия.Основание, ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = РеализацииКорректировки.НайтиСтроки(Новый Структура("Реализация, ХозяйственнаяОперация",
	                                                                           СтрокаДействия.Основание,
	                                                                           ХозяйственнаяОперация));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		СтруктураКОформлению = Новый Структура(
			"Реализация, ХозяйственнаяОперация",
			Документы.КорректировкаРеализации.ПустаяСсылка(),
			ХозяйственнаяОперация);
		
		МассивОформленныхДокументов.Добавить(СтруктураКОформлению);
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Корректировка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаРеализации",
		1,
		Макет,
		МассивОформленныхДокументов,
		ХозяйственнаяОперация,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКорректировкаПоступления(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументКорректировкаПоступления", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ПоступленияКорректировки.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.КорректировкаПоступления.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Корректировка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"КорректировкаПоступления",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);


КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеРеализацииТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеРеализацииТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеРеализации", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеПоступлениеТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПоступлениеТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПоступления", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеВозвратаТоваровПоставщику(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратаТоваровПоставщику", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеВозвратаТоваровПоставщику", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеВозвратТоваровОтКлиента(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеВозвратаТоваровОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеВозвратаТоваровОтКлиента", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеПеремещенияТоваров(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеПеремещенияТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Основание);
	
	ВывестиДокументКОформлению("ИсправлениеПеремещенияТоваров", 1, Макет, МассивОформленныхДокументов, , Ложь, Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозврата(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозврата", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = РеализацииВозвраты.НайтиСтроки(Новый Структура("Реализация", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(
			?(ИспользоватьЗаявкиНаВозврат,
				Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(),
				Документы.ВозвратТоваровОтКлиента.ПустаяСсылка()));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ДокументВозврата);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ДокументВозврата",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПоступлениеТоваровУслуг(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументПоступлениеТоваровУслуг", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ДопоступленияПоВозвратамПоставщику.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПоступлениеТоваровУслуг);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ПоступлениеТоваровУслуг",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДопоставкиПоПоступлению(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументДопоставкиПоПоступлению", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ПоступленияПоступления.НайтиСтроки(Новый Структура("ДопоставкаПоПоступлению", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленноеПоступление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ПоступлениеТоваровУслугДопоставкаПоПоступлению",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание)
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументПеремещениеТоваров(СтрокаДействия, Макет, Описание, НаВозврат = Ложь)
	
	Если НеВыводитьВОтчет("ВывестиДокументПеремещениеТоваров", СтрокаДействия.Основание, НаВозврат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	Если Не НаВозврат Тогда
		ОформленныеДокументы = ПеремещенияПоПеремещениям.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	Иначе
		ОформленныеДокументы = ПеремещенияПоПеремещениямНаВозврат.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	КонецЕсли;
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Новый Структура("ПеремещениеТоваров, ЭтоПереперемещение", Документы.ПеремещениеТоваров.ПустаяСсылка(), НаВозврат));
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ПеремещениеТоваров);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаВозврат Тогда
		ВывестиДокументКОформлению(
			"ПеремещениеТоваровВозврат",
			2,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
	Иначе
		ВывестиДокументКОформлению(
			"ПеремещениеТоваров",
			2,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументРеализацияНаДопоставкуНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = Допоставки.НайтиСтроки(Новый Структура("ДопоставкаПоРеализации", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ОформленнаяРеализация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"РеализацияТоваровИУслуг",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументРеализацииПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание);

	Если НеВыводитьВОтчет("ВывестиДокументРеализацииПоВозвратуОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтКлиентовРеализации.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Реализация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"РеализацияТоваровИУслугПоВозвратуОтКлиента",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеЗаявкаНаВозвратТоваров(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеЗаявкаНаВозвратТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	МассивОформленныхДокументов.Добавить(СтрокаДействия.Заказ);
	
	ВывестиДокументКОформлению("ИсправлениеЗаявкаНаВозвратТоваров", 2, Макет, МассивОформленныхДокументов, , Ложь, Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументДовозвратаПоВозвратуОтКлиента(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументДовозвратаПоВозвратуОтКлиента", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыОтКлиентовВозвраты.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ВозвратТоваровОтКлиента.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Возврат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровОтКлиентаДовозврат",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);


КонецПроцедуры


&НаСервере
Процедура ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументВозвратТоваровПоставщикуДляВозвратаНедопоставленногоТовара", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;

	ОформленныеДокументы = ВозвратыПоВозвратамПоставщику.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.ВозвратТоваровПоставщику.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ВозвратТоваровПоставщику);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ВозвратТоваровПоставщику",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеДокументаЗаказ(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиИсправлениеДокументаЗаказ", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = РеализацииЗаказы.НайтиСтроки(Новый Структура("Реализация", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказКлиента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ЗаказКлиента",
		2,
		Макет,
		МассивОформленныхДокументов,,Ложь,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИсправлениеДокументаЗаказПоставщику(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиИсправлениеДокументаЗаказ", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = ПоступленияЗаказы.НайтиСтроки(Новый Структура("ДокументПоступления", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказПоставщику);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ЗаказПоставщику",
		2,
		Макет,
		МассивОформленныхДокументов,,Ложь,
		Описание);

КонецПроцедуры

&НаСервере
Процедура ВывестиДокументЗаказ(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументЗаказ", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = РеализацииЗаказы.НайтиСтроки(Новый Структура("Реализация", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		Возврат;
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ЗаказКлиента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"ЗаказКлиента",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументЗаказНаПеремещение(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументЗаказНаПеремещение", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	НайденныеСтроки = ПеремещенияТоваровЗаказыНаПеремещения.НайтиСтроки(Новый Структура("ПеремещениеТоваров", СтрокаДействия.Основание));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		МассивОформленныхДокументов.Добавить(НайденнаяСтрока.ЗаказНаПеремещение);
	КонецЦикла;
	
	ВывестиДокументКОформлению(
		"ЗаказНаПеремещение",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументСписаниеНедостачТоваров(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументСписаниеНедостачТоваров", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы);
	НайденныеСтроки = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовСписания = Новый Массив;
	Для Каждого СтрокаСоСписанием Из НайденныеСтроки Цикл
	
		Если МассивСкладовСписания.Найти(СтрокаСоСписанием.Склад) = Неопределено Тогда
			МассивСкладовСписания.Добавить(СтрокаСоСписанием.Склад);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СкладСписания Из МассивСкладовСписания Цикл
		
		Описание.Склад = СкладСписания;
		Описание.ВыводитьСклад = (МассивСкладовСписания.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ОснованияСписанияНедостач.НайтиСтроки(Новый Структура("Основание, Склад",
		                                                                               СтрокаДействия.Основание,
		                                                                               СкладСписания));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.СписаниеНедостачТоваров.ПустаяСсылка(),
			                                                     СкладСписания));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВывестиДокументКОформлению(
			"СписаниеНедостачТоваров",
			1,
			Макет,
			МассивОформленныхДокументов,,,
			Описание);
		
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура ВывестиДокументСписаниеЗадолженности(СтрокаДействия, Макет, Описание)
	
	Если НеВыводитьВОтчет("ВывестиДокументСписаниеЗадолженности", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ОформленныеДокументы = ОснованияСписанияЗадолженностей.НайтиСтроки(Новый Структура("Основание", СтрокаДействия.Основание));
	
	Если ОформленныеДокументы.Количество() = 0 Тогда
		
		МассивОформленныхДокументов.Добавить(Документы.СписаниеЗадолженности.ПустаяСсылка());
		
	Иначе
		
		Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
			
			МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Списание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДокументКОформлению(
		"СписаниеЗадолженности",
		1,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументОприходованиеИзлишков(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументОприходованиеИзлишков", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы);
	НайденныеСтроки        = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовСписания  = Новый Массив;
	Для Каждого СтрокаСоСписанием Из НайденныеСтроки Цикл
	
		Если МассивСкладовСписания.Найти(СтрокаСоСписанием.Склад) = Неопределено Тогда
			МассивСкладовСписания.Добавить(СтрокаСоСписанием.Склад);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СкладСписания Из МассивСкладовСписания Цикл
		
		Описание.Склад = СкладСписания;
		Описание.ВыводитьСклад = (МассивСкладовСписания.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ОснованияОприходования.НайтиСтроки(Новый Структура("Основание, Склад",
		                                                                               СтрокаДействия.Основание,
		                                                                               СкладСписания));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.ОприходованиеИзлишковТоваров.ПустаяСсылка(),
			                                                     СкладСписания));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.Оприходование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		 ВывестиДокументКОформлению("ОприходованиеИзлишковТоваров",
		                            1,
		                            Макет,
		                            МассивОформленныхДокументов,,,
		                            Описание);
		
	КонецЦикла;
	
	МассивОформленныхДокументов = Новый Массив;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументВозвратТоваровПоставщику(СтрокаДействия, Макет, Описание)

	Если НеВыводитьВОтчет("ВывестиДокументВозвратТоваровПоставщику", СтрокаДействия.Основание) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОформленныхДокументов = Новый Массив;
	
	ПараметрыПоискаСкладов = Новый Структура("ВариантДействия", Перечисления.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть);
	НайденныеСтроки = СтрокаДействия.ДействияСклады.НайтиСтроки(ПараметрыПоискаСкладов);
	МассивСкладовВозврата = Новый Массив;
	Для Каждого СтрокаСВозвратом Из НайденныеСтроки Цикл
		
		Если МассивСкладовВозврата.Найти(СтрокаСВозвратом.Склад) = Неопределено Тогда
			МассивСкладовВозврата.Добавить(СтрокаСВозвратом.Склад);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СкладВозврата Из МассивСкладовВозврата Цикл
		
		Описание.Склад = СкладВозврата;
		Описание.ВыводитьСклад = (МассивСкладовВозврата.Количество() > 1);
		
		МассивОформленныхДокументов = Новый Массив;
	
		ОформленныеДокументы = ПоступленияВозвраты.НайтиСтроки(Новый Структура("ДокументПоступления, Склад",
		                                                                       СтрокаДействия.Основание,
		                                                                       СкладВозврата));
		
		Если ОформленныеДокументы.Количество() = 0 Тогда
			
			МассивОформленныхДокументов.Добавить(Новый Структура("ОформляемыйДокумент, Склад",
			                                                     Документы.ВозвратТоваровПоставщику.ПустаяСсылка(),
			                                                     СкладВозврата));
			
		 Иначе
			
			Для Каждого ОформленныйДокумент Из ОформленныеДокументы Цикл
				
				МассивОформленныхДокументов.Добавить(ОформленныйДокумент.ВозвратПоставщику);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВывестиДокументКОформлению(
		"ВозвратТоваровПоставщикуПоПоступлению",
		2,
		Макет,
		МассивОформленныхДокументов,,,
		Описание);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиОшибку(ТекстСообщения, Макет)
	
	ОбластьОшибка = Макет.ПолучитьОбласть("СтрокаОшибка");
	ОбластьОшибка.Параметры.ТекстОшибки = ТекстСообщения;
	ТабличныйДокумент.Вывести(ОбластьОшибка);
	
	ЕстьОшибка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДокументКОформлению(ВидДокумента, Уровень, Макет,
	                                 МассивОформленныхДокументов,
	                                 ХозяйственнаяОперация = Неопределено,
	                                 ВыводитьШапкуОформленныеДокументы = Истина,
	                                 Описание = Неопределено)
	
	ОбластьПустаяСтрока       = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьТонкаяПустаяСтрока = Макет.ПолучитьОбласть("ТонкаяПустаяСтрока");
	ОбластьШапкаДокумента     = Макет.ПолучитьОбласть("ШапкаУровень"   + Строка(Уровень));
	ОбластьЛегендаДокумента   = Макет.ПолучитьОбласть("ЛегендаУровень" + Строка(Уровень));
	ОбластьСтрокаДокумента    = Макет.ПолучитьОбласть("СтрокаУровень"  + Строка(Уровень));
	
	ЖирныйШрифтTahoma9                 = Новый Шрифт("Tahoma", 9, Истина, Ложь,   Истина);
	ОбычныйШрифтTahoma9                = Новый Шрифт("Tahoma", 9, Ложь,   Ложь,   Истина);
	ЖирныйШрифтTahoma8                 = Новый Шрифт("Tahoma", 8, Ложь,   Истина, Ложь);
	
	ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
	ОбластьШапкаДокумента.Параметры.Текст = ТекстШапки(ВидДокумента, Описание, ХозяйственнаяОперация);
	ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
	
	Если ВыводитьЛегенду Тогда
		ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
		ОбластьЛегендаДокумента.Параметры.Текст = ТекстЛегенды(ВидДокумента, ХозяйственнаяОперация);
		ТабличныйДокумент.Вывести(ОбластьЛегендаДокумента);
		ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
	КонецЕсли;
	
	//строки
	
	ВыведеныОформленныеДокументы = Ложь;
	
	Для Каждого ЭлементМассива Из МассивОформленныхДокументов Цикл
		
		Если ТипЗнч(ЭлементМассива) <> Тип("Структура") И ЗначениеЗаполнено(ЭлементМассива) Тогда
			
			Если Не ВыведеныОформленныеДокументы И ВыводитьШапкуОформленныеДокументы Тогда
				ОбластьСтрокаДокумента.Параметры.Текст = Строка(НСтр("ru='Оформленные документы:';uk='Оформлені документи:'"));
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].ЦветТекста = Новый Цвет(0, 0, 0);
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].Шрифт = ЖирныйШрифтTahoma8;
				ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
				ТабличныйДокумент.Вывести(ОбластьТонкаяПустаяСтрока);
			КонецЕсли;
			
			ОбластьСтрокаДокумента.Параметры.Текст = Строка(ЭлементМассива);
			ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].ЦветТекста = Новый Цвет(0, 0, 0);
			ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].Шрифт = ОбычныйШрифтTahoma9;
			
			ВыведеныОформленныеДокументы = Истина;
			
			ОбластьСтрокаДокумента.Параметры.Данные = ЭлементМассива;
			ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Описание <> Неопределено Тогда
		
		ИспользоватьГиперссылку = Ложь;
		Если Описание.ИмяКоманды = "Изменить" Тогда
			
			Результат = РасхожденияСервер.ДокументОснованиеСоответствуетАкту(Описание.АктОРасхождениях, Описание.ОснованиеАкта);
			Если Результат.СостояниеДокумента = "ТребуютсяИзменения" Тогда
				ЦветНадписи = ЦветаСтиля.ЦветГиперссылки;
				ТекстГиперссылки = НСтр("ru='Изменить';uk='Змінити'");
				ИспользоватьГиперссылку = Истина;
			ИначеЕсли Результат.СостояниеДокумента = "ИзмененияНеТребуются" Тогда
				ЦветНадписи = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
				ТекстГиперссылки = НСтр("ru='Изменения не требуются';uk='Зміни не потрібні'");
			ИначеЕсли Результат.СостояниеДокумента = "ИзмененияВыполнены" Тогда
				ЦветНадписи = ЦветаСтиля.РезультатУспехЦвет;
				ТекстГиперссылки = НСтр("ru='Изменения выполнены';uk='Зміни виконані'");
			ИначеЕсли Результат.СостояниеДокумента = "ОснованиеНеСоответствуетАкту" Тогда
				ЦветНадписи = ЦветаСтиля.ПоясняющийОшибкуТекст;
				ТекстГиперссылки = НСтр("ru='Основание не соответствует акту';uk='Підстава не відповідає акту'");
			КонецЕсли;
			
		ИначеЕсли Описание.ИмяКоманды = "Оформить" Тогда
			ЦветНадписи = ЦветаСтиля.ЦветГиперссылки;
			ТекстГиперссылки = НСтр("ru='Оформить';uk='Оформити'");
			ИспользоватьГиперссылку = Истина;
		КонецЕсли;
		
		Если (ВыведеныОформленныеДокументы И Описание.ИмяКоманды = "Изменить")
			ИЛИ (Описание.ИмяКоманды = "Оформить" И Не ВыведеныОформленныеДокументы) Тогда
		
			ОбластьСтрокаДокумента = Макет.ПолучитьОбласть(
				"СтрокаУровень" + Строка(Уровень) + ?(ИспользоватьГиперссылку, "", "БезГиперссылки"));
			ОбластьСтрокаДокумента.Параметры.Текст = ТекстГиперссылки;
			
			Если ИспользоватьГиперссылку Тогда
				
				ОбластьСтрокаДокумента.Параметры.Данные = Новый Структура(
					"Описание, Данные", Описание, ЭлементМассива);
				
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].Шрифт = ЖирныйШрифтTahoma9;
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень)].ЦветТекста = ЦветНадписи;
				
			Иначе
				
				ОбластьСтрокаДокумента.Области["СтрокаУровень" + Строка(Уровень) + "БезГиперссылки"].ЦветТекста = ЦветНадписи;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаДокумента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОформленныхДокументов.Очистить();

КонецПроцедуры

#КонецОбласти

#Область ИнформационныеНадписи

&НаСервере
Функция ТекстШапки(ТипДокумента, Описание , ХозяйственнаяОперация = Неопределено)
	
	Если ТипДокумента = "КорректировкаРеализации" Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
			ТекстШапки = НСтр("ru='Документ ""Корректировка реализации (исправление ошибок)""';uk='Документ ""Коригування реалізації (виправлення помилок)""'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
			ТекстШапки = НСтр("ru='Документ ""Корректировка реализации (реализация перепоставленного товара)""';uk='Документ ""Коригування реалізації (реалізація перепоставленного товару)""'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
			ТекстШапки = НСтр("ru='Документ ""Корректировка реализации (возврат недопоставленного товара)""';uk='Документ ""Коригування реалізації (повернення недопоставленого товару)""'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "КорректировкаПоступления" Тогда
		ТекстШапки = НСтр("ru='Документ ""Корректировка поступления""';uk='Документ ""Коригування надходження""'");
	ИначеЕсли ТипДокумента = "ИсправлениеРеализации" Тогда
		ТекстШапки = НСтр("ru='Отразить расхождения в документе ""Реализация товаров и услуг""';uk='Відобразити розбіжності в документі ""Реалізація товарів і послуг""'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровПоставщику" Тогда
		ТекстШапки = НСтр("ru='Отразить расхождения в документе ""Возврат товаров поставщику""';uk='Відобразити розбіжності в документі ""Повернення товарів постачальнику""'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтКлиента" Тогда
		ТекстШапки = НСтр("ru='Отразить расхождения в документе ""Возврат товаров от клиента""';uk='Відобразити розбіжності в документі ""Повернення товарів від клієнта""'");
	ИначеЕсли ТипДокумента = "ИсправлениеПеремещенияТоваров" Тогда
		ТекстШапки = НСтр("ru='Отразить расхождения в документе ""Перемещение товаров""';uk='Відобразити розбіжності в документі ""Переміщення товарів""'");
	ИначеЕсли ТипДокумента = "ДокументВозврата" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			ТекстШапки = НСтр("ru='Документ ""Заявка на возврат товаров от клиента"" по перепоставленным товарам к возврату';uk='Документ ""Заявка на повернення товарів від клієнта"" за перепоставленими товарами до повернення'");
		Иначе
			ТекстШапки = НСтр("ru='Документ ""Возврат товаров от клиента"" по перепоставленным товарам к возврату';uk='Документ ""Повернення товарів від клієнта"" по перепоставлених товарах до повернення'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКлиентаДовозврат" Тогда
		ТекстШапки = НСтр("ru='Документ ""Возврат товаров от клиента"" по недовозвращенным товарам';uk='Документ ""Повернення товарів від клієнта"" за недоповернутими товарами'");
	ИначеЕсли ТипДокумента = "ЗаказКлиента" Тогда
		ТекстШапки = НСтр("ru='Отменить строки документов ""Заказ клиента"" по недопоставленным товарам';uk='Скасувати рядки документів ""Замовлення клієнта"" по недопоставлених товарах'");
	ИначеЕсли ТипДокумента = "ЗаказПоставщику" Тогда
		ТекстШапки = НСтр("ru='Отменить строки документов ""Заказ поставщику"" по недопоставленным товарам';uk='Скасувати рядки документів ""Замовлення постачальнику"" по недопоставлених товарів'");
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		ТекстШапки = НСтр("ru='Отменить строки документов ""Заказ на перемещение"" по недопоставленным товарам';uk='Скасувати рядки документів ""Замовлення на переміщення"" по недопоставлених товарів'");
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваров" Тогда
		ТекстШапки = НСтр("ru='Отменить строки документов ""Заявка на возврат товаров от клиента"" по недостачам при возврате';uk='Скасувати рядки документів ""Заявка на повернення товарів від клієнта"" за нестачами при поверненні'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		ТекстШапки = НСтр("ru='Документ ""Реализация товаров и услуг"" для реализации недопоставленного товара';uk='Документ ""Реалізація товарів і послуг"" для реалізації недопоставленого товару'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслугПоВозвратуОтКлиента" Тогда 
		ТекстШапки = НСтр("ru='Документ ""Реализация товаров и услуг"" для реализации излишков возврата от клиента';uk='Документ ""Реалізація товарів і послуг"" для реалізації надлишків повернення від клієнта'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщику" Тогда
		ТекстШапки = НСтр("ru='Документ ""Возврат товаров поставщику"" для довозврата недовозращенного товара';uk='Документ ""Повернення товарів постачальнику"" для доповернення неповерненого товару'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровУслуг" Тогда
		ТекстШапки = НСтр("ru='Документ ""Поступление товаров и услуг"" для поступления перепоставленного товара';uk='Документ ""Надходження товарів і послуг"" для надходження перепоставленого товару'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровУслугДопоставкаПоПоступлению" Тогда
		ТекстШапки = НСтр("ru='Документ ""Поступление товаров и услуг"" для поступления недопоставленного товара';uk='Документ ""Надходження товарів і послуг"" для надходження недопоставленого товару'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваров" Тогда
		ТекстШапки = НСтр("ru='Документ ""Перемещение товаров"" на допоставку недопоставленного товара';uk='Документ ""Переміщення товарів"" на поставку недопоставленого товару'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваровВозврат" Тогда
		ТекстШапки = НСтр("ru='Документ ""Перемещение товаров"" на возврат перепоставленного товара';uk='Документ ""Переміщення товарів"" на повернення перепоставленого товару'");
	ИначеЕсли ТипДокумента = "СписаниеНедостачТоваров" Тогда
		ТекстШапки = НСтр("ru='Документ ""Списание недостач товаров"" для списания непризнанных недостач';uk='Документ ""Списання нестач товарів"" для списання невизнаних нестач'");
	ИначеЕсли ТипДокумента = "СписаниеЗадолженности" Тогда
		ТекстШапки = НСтр("ru='Документ ""Списание задолженности"" для отражения задолженности сторонней компании';uk='Документ ""Списання заборгованості"" для відображення заборгованості сторонньої компанії'");
	ИначеЕсли ТипДокумента = "ОприходованиеИзлишковТоваров" Тогда
		ТекстШапки = НСтр("ru='Документ ""Оприходование излишков товаров"" для оприходования излишков поставленных товаров';uk='Документ ""Оприбуткування надлишків товарів"" для оприбуткування надлишків поставлених товарів'");
	ИначеЕсли ТипДокумента = "ИсправлениеПоступления" Тогда
		ТекстШапки = НСтр("ru='Отразить расхождения в документе ""Поступление товаров и услуг""';uk='Відобразити розбіжності в документі ""Надходження товарів і послуг""'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению" Тогда
		ТекстШапки = НСтр("ru='Документ ""Возврат товаров поставщику"" для возврата перепоставленного товара';uk='Документ ""Повернення товарів постачальнику"" для повернення перепоставленого товару'");
	КонецЕсли;
	
	Если ТипДокумента = "СписаниеНедостачТоваров" Или ТипДокумента = "ОприходованиеИзлишковТоваров" Или ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению" Тогда
		
		Если Описание.ВыводитьСклад Тогда
			
			СтрокаСклад = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='для склада ""%1"".';uk='для складу ""%1"".'"), Описание.Склад);
			ТекстШапки = ТекстШапки + " " + СтрокаСклад;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстШапки;
	
КонецФункции

&НаСервере
Функция ТекстЛегенды(ТипДокумента, ХозяйственнаяОперация = Неопределено)
	
	Если ТипДокумента = "КорректировкаРеализации" Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
			Возврат НСтр("ru='Необходимо оформить документ ""Корректировка реализации (исправление ошибок)"" для отражения излишков и недостач. Документ является основанием для выставления исправленных первичных документов и исправительного счета-фактуры.';uk='Необхідно оформити документ ""Коригування реалізації (виправлення помилок)"" для відображення надлишків і недостач. Документ є підставою для виставлення виправлених первинних документів і виправного рахунку-фактури.'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
			Возврат НСтр("ru='Необходимо оформить документ ""Корректировка реализации (реализация перепоставленного товара)"" для отражения в учете факта продажи излишне доставленных товаров. Документ является основанием для выставления первичных документов и счета-фактуры. Оформляется на строки акта приемки с вариантами отработки: ""Оформить"" и ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Коригування реалізації (реалізація перепоставленного товару)"" для відображення в обліку факту продажу надміру доставлених товарів. Документ є підставою для виставлення первинних документів та рахунку-фактури. Оформляється на рядки акта приймання з варіантами відпрацювання: ""Оформити"" і ""Оформити і повернути"".'");
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
			Возврат НСтр("ru='Необходимо зарегистрировать документ ""Корректировка реализации (возврат недопоставленного товара)"". Выполняется сторнирование в учете факта продажи товаров, которые были отражены при реализации, но не были доставлены. Документ регистрируется на основании первичных документов и счета-фактуры, полученных от клиента. Оформляется на строки акта приемки с вариантами отработки: ""Оформить"" и ""Оформить и допоставить"".';uk='Необхідно зареєструвати документ ""Коригування реалізації (повернення недопоставленого товару)"". Виконується сторнування в обліку факту продажу товарів, які були відображені при реалізації, але не були доставлені. Документ реєструється на підставі первинних документів та рахунку-фактури, отриманих від клієнта. Оформляється на рядки акта приймання з варіантами відпрацювання: ""Оформити"" і ""Оформити і допоставити"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "КорректировкаПоступления" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Корректировка поступления"" для отражения излишков и недостач. Документ является основанием для регистрации исправленных первичных документов и исправительного счета-фактуры.';uk='Необхідно оформити документ ""Коригування надходження"" для відображення надлишків і недостач. Документ є підставою для реєстрації виправлених первинних документів і виправного рахунку-фактури.'");
	ИначеЕсли ТипДокумента = "ИсправлениеРеализации" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документ ""Реализация товаров и услуг"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".';uk='Необхідно скоригувати документ ""Реалізація товарів і послуг"", відобразивши в ньому кількість за фактом. Слід виконати для рядків акта про розбіжності з варіантами відпрацювання: ""Оформити і повернути"", ""Оформити"", ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровПоставщику" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документ ""Возврат товаров поставщику"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".';uk='Необхідно скоригувати документ ""Повернення товарів постачальнику"", відобразивши в ньому кількість за фактом. Слід виконати для рядків акта про розбіжності з варіантами відпрацювання: ""Оформити і повернути"", ""Оформити"", ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеВозвратаТоваровОтКлиента" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документ ""Возврат товаров поставщику"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".';uk='Необхідно скоригувати документ ""Повернення товарів постачальнику"", відобразивши в ньому кількість за фактом. Слід виконати для рядків акта про розбіжності з варіантами відпрацювання: ""Оформити і повернути"", ""Оформити"", ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеПеремещенияТоваров" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документ ""Перемещение товаров"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и допоставить"".';uk='Необхідно скоригувати документ ""Переміщення товарів"", відобразивши в ньому кількість за фактом. Слід виконати для рядків акта про розбіжності з варіантами відпрацювання: ""Оформити і повернути"", ""Оформити"", ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "ДокументВозврата" Тогда
		Если ИспользоватьЗаявкиНаВозврат Тогда
			Возврат НСтр("ru='Необходимо оформить документ ""Заявка на возврат товаров от клиента"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Заявка на повернення товарів від клієнта"" по надлишках, що зазначені до повернення клієнтом. Оформлюються на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
		Иначе
			Возврат НСтр("ru='Необходимо оформить документ ""Возврат товаров от клиента"" по излишкам, отмеченным к возврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Повернення товарів від клієнта"" по надлишках, які зазначені до повернення клієнтом. Оформлюються на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
		КонецЕсли;
	ИначеЕсли ТипДокумента = "ВозвратТоваровОтКлиентаДовозврат" Тогда
			Возврат НСтр("ru='Необходимо оформить документ ""Возврат товаров от клиента"" по недостачам, отмеченным к довозврату клиентом. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".';uk='Необхідно оформити документ ""Повернення товарів від клієнта"" за нестачами, які зазначені до довозврату клієнтом. Оформлюються на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і чекати допоставку"".'");
	ИначеЕсли ТипДокумента = "ЗаказКлиента" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документы ""Заказ клиента"", отменив строки с товарами, которые были отражены при реализации, но не были доставлены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".';uk='Необхідно скоригувати документи ""Замовлення клієнта"", скасувавши рядки з товарами, які були відображені при реалізації, але не були доставлені. Слід виконати для рядків акта про розбіжності з варіантом відпрацювання ""Оформити"".'");
	ИначеЕсли ТипДокумента = "ЗаказПоставщику" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документы ""Заказ поставщику"", отменив строки с товарами, которые были отражены при поступлении, но не были доставлены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".';uk='Необхідно скоригувати документи ""Замовлення постачальнику"", скасувавши рядки з товарами, які були відображені при надходженні, але не були доставлені. Слід виконати для рядків акта про розбіжності з варіантом відпрацювання ""Оформити"".'");
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документы ""Заказ на перемещение"", отменив строки с товарами, которые были отражены при перемещении, но не были перемещены. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".';uk='Необхідно скоригувати документи ""Замовлення на переміщення"", скасувавши рядки з товарами, які були відображені при переміщенні, але не були переміщені. Слід виконати для рядків акта про розбіжності з варіантом відпрацювання ""Оформити"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеЗаявкаНаВозвратТоваров" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документы ""Заявка на возврат товаров от клиента"", отменив строки с товарами, по которым были выявлены недостачки при возврате. Следует выполнить для строк акта о расхождениях с вариантом отработки ""Оформить"".';uk='Необхідно скоригувати документи ""Заявка на повернення товарів від клієнта"", скасувавши рядки з товарами, за якими були виявлені недопоставки при поверненні. Слід виконати для рядків акта про розбіжності з варіантом відпрацювання ""Оформити"".'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Реализация товаров и услуг"" по недостачам, отмеченным к допоставке клиенту. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".';uk='Необхідно оформити документ ""Реалізація товарів і послуг"" за нестачами, які зазначені до допоставленню клієнту. Оформлюються на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслугПоВозвратуОтКлиента" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Реализация товаров и услуг"" по излишкам, отмеченным к возврату клиенту. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Реалізація товарів і послуг"" по надлишках, які зазначені до повернення клієнту. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщику" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Возврат товаров поставщику"" по недостачам, отмеченным к допоставке поставщику. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и допоставить"".';uk='Необхідно оформити документ ""Повернення товарів постачальнику"" за нестачами, які зазначені до допоставлення постачальнику. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і допоставити"".'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровУслуг" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Поступление товаров и услуг"" по излишкам, отмеченным к возврату поставщиком. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Надходження товарів і послуг"" по надлишках, які зазначені до повернення постачальником. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
	ИначеЕсли ТипДокумента = "ПоступлениеТоваровУслугДопоставкаПоПоступлению" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Поступление товаров и услуг"" по недостачам, для которых требуется допоставка. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и ожидать допоставку"".';uk='Необхідно оформити документ ""Надходження товарів і послуг"" за нестачами, для яких потрібно допоставка. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і чекати допоставку"".'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваров" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Перемещение товаров"" на допоставку недопоставленного товара на склад-получатель. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"", ""Оформить"".';uk='Необхідно оформити документ ""Переміщення товарів"" на поставку недопоставленого товару на склад-одержувач. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"", ""Оформити"".'");
	ИначеЕсли ТипДокумента = "ПеремещениеТоваровВозврат" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Перемещение товаров"" на возврат излишков со склада-получателя на склад-отправитель. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Переміщення товарів"" на повернення надлишків зі складу-одержувача на склад-відправник. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
	ИначеЕсли ТипДокумента = "СписаниеНедостачТоваров" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Списание недостач товаров"" для списания на прочие расходы непризнанных недостач. Оформляется на строки акта о расхождениях с вариантом отработки ""По вине сторонней компании"" или ""За наш счет"".';uk='Необхідно оформити документ ""Списання нестач товарів"" для списання на інші витрати невизнаних нестач. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""З вини сторонньої компанії"" або ""За наш рахунок"".'");
	ИначеЕсли ТипДокумента = "СписаниеЗадолженности" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Списание задолженности"" для отражения задолженности сторонней компании по недостачам, произошедшим по её вине. Оформляется на строки акта о расхождениях с вариантом отработки ""По вине сторонней компании"" в случае, если установлен флаг ""По вине сторонней компании"".';uk='Необхідно оформити документ ""Списання заборгованості"" для відображення заборгованості сторонньої компанії за нестачами, які сталися з її вини. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""З вини сторонньої компанії"" у разі, якщо встановлений прапор ""З вини сторонньої компанії"".'");
	ИначеЕсли ТипДокумента = "ОприходованиеИзлишковТоваров" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Оприходование излишков товаров"" для оприходования излишков товаров. Оформляется на строки акта о расхождениях с вариантом отработки ""На прочие доходы"".';uk='Необхідно оформити документ ""Оприбуткування надлишків товарів"" для оприбуткування надлишків товарів. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""На інші доходи"".'");
	ИначеЕсли ТипДокумента = "ИсправлениеПоступления" Тогда
		Возврат НСтр("ru='Необходимо скорректировать документ ""Поступление товаров и услуг"", отразив в нем количество по факту. Следует выполнить для строк акта о расхождениях с вариантами отработки: ""Оформить и вернуть"", ""Оформить"", ""Оформить и ожидать допоставку"".';uk='Необхідно скоригувати документ ""Надходження товарів і послуг"", відобразивши в ньому кількість за фактом. Слід виконати для рядків акта про розбіжності з варіантами відпрацювання: ""Оформити і повернути"", ""Оформити"", ""Оформити і чекати допоставку"".'");
	ИначеЕсли ТипДокумента = "ВозвратТоваровПоставщикуПоПоступлению" Тогда
		Возврат НСтр("ru='Необходимо оформить документ ""Возврат товаров поставщику"" по перепоставленному товару, отмеченному к возврату поставщику. Оформляется на строки акта о расхождениях с вариантом отработки ""Оформить и вернуть"".';uk='Необхідно оформити документ ""Повернення товарів постачальнику"" за перепоставленному товару, зазначеного до повернення постачальнику. Оформлюється на рядки акта про розбіжності з варіантом відпрацювання ""Оформити і повернути"".'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ВыводитьЛегендуПриИзмененииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.РаботаСАктамиРасхождений", "ВыводитьЛегенду", ВыводитьЛегенду);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.ТабличныйДокумент.ТолькоПросмотр = ЕстьОшибка;

КонецПроцедуры 

&НаСервере
Функция НеВыводитьВОтчет(Имя, Ссылка, ДополнительныйПараметр = Неопределено)
	
	Отбор = Новый Структура(
		"Имя, Ссылка, ДополнительныйПараметр", Имя, Ссылка, ДополнительныйПараметр);
	
	НайденныеСтроки = ВыведенныеДокументы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВыведенныеДокументы.Добавить(), Отбор);
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктурыОписанияВыводимогоВОтчетДействия()
	
	СтруктураОписания = Новый Структура(
	                 "ОснованиеАкта, АктОРасхождениях, ИмяКоманды, ВариантДействия, СпособОтражения, Склад, ВыводитьСклад");
	
	СтруктураОписания.ВыводитьСклад = Ложь;
	
	Возврат СтруктураОписания;
	
КонецФункции

#КонецОбласти


#КонецОбласти

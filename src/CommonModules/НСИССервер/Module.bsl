//Возвращает адрес сервера
//
Функция АдресСерверНСИС() Экспорт
	
	Возврат "rdi.bas-soft.eu";
	
КонецФункции

//Возвращает адрес ресурса в зависимости от вида сервиса
//
Функция АдресРесурсаНСИС(Сервис) Экспорт
	
	Ресурс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("RDI",
			"RDI_Ресурс",
			"");
	Если НЕ ЗначениеЗаполнено(Ресурс) Тогда
		Ресурс = "rdi/hs/";
	КонецЕсли;
	
	Если Сервис = "КурсыВалют" Тогда
		Возврат Ресурс + "GetRate";
	ИначеЕсли Сервис = "НормативныеВеличины" Тогда
		Возврат Ресурс + "GetData";
	ИначеЕсли Сервис = "Файлы" Тогда
		Возврат Ресурс + "GetFile";
	ИначеЕсли Сервис = "Новости" Тогда
		Возврат Ресурс + "GetNews";	
	ИначеЕсли Сервис = "Календарь" Тогда
		Возврат Ресурс + "GetCalendar";		
	ИначеЕсли Сервис = "ТестДоступа" Тогда
		Возврат Ресурс + "Test";
	ИначеЕсли Сервис = "ПолучитьСписокФайлов" Тогда
		Возврат Ресурс + "GetExtFiles";	
	КонецЕсли;	
	
КонецФункции

//Имя сервиса для авторизации
//
Функция ИмяСервиса() Экспорт
	
	Возврат "rdi";
	
КонецФункции


//Получение настроек загрузки
//
Функция ПолучитьНастройкиЗагрузок() Экспорт
	
	Результат = НСИСПереопределяемый.ПолучитьНастройкиПоУмолчанию();
	
	НаборЗаписей = РегистрыСведений.НСИСНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, НаборЗаписей[0]);
	
	Возврат Результат;
	
КонецФункции	

//Получение настроек для регистров и сравнение с настройками по умолчанию 
//
Функция ПолучитьНастройкиРегистров() Экспорт
	
	Настройки = РегистрыСведений.НСИСНастройки.Получить();
	СписокРегистров = Настройки.СписокРегистров.Получить();
	
	Если СписокРегистров = Неопределено Тогда
		СписокРегистров = Новый СписокЗначений();
	КонецЕсли;	
		
	СписокРегистровПоУмолчанию = СписокДоступныхРегистров();
	
	Счетчик = 0;
	Пока Счетчик < СписокРегистровПоУмолчанию.Количество() Цикл
		
		Если СписокРегистров.НайтиПоЗначению(СписокРегистровПоУмолчанию[Счетчик].Значение) = Неопределено Тогда
			НовыйЭлемент = СписокРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СписокРегистровПоУмолчанию[Счетчик]); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < СписокРегистров.Количество() Цикл
		
		Если СписокРегистровПоУмолчанию.НайтиПоЗначению(СписокРегистров[Счетчик].Значение) = Неопределено Тогда
			СписокРегистров.Удалить(Счетчик); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	СписокРегистров.СортироватьПоПредставлению();
	
	Возврат СписокРегистров; 
	
КонецФункции

//Получение настроек для классификаторов и сравнение с настройками по умолчанию 
//
Функция ПолучитьНастройкиКлассификаторов() Экспорт
	
	Настройки = РегистрыСведений.НСИСНастройки.Получить();
	СписокКлассификаторов = Настройки.СписокКлассификаторов.Получить();
	
	Если СписокКлассификаторов = Неопределено Тогда
		СписокКлассификаторов = Новый СписокЗначений();
	КонецЕсли;
	
	СписокКлассификаторовПоУмолчанию = СписокДоступныхКлассификаторов();
	
	Счетчик = 0;
	Пока Счетчик < СписокКлассификаторовПоУмолчанию.Количество() Цикл
		
		Если СписокКлассификаторов.НайтиПоЗначению(СписокКлассификаторовПоУмолчанию[Счетчик].Значение) = Неопределено Тогда
			НовыйЭлемент = СписокКлассификаторов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СписокКлассификаторовПоУмолчанию[Счетчик]); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < СписокКлассификаторов.Количество() Цикл
		
		Если СписокКлассификаторовПоУмолчанию.НайтиПоЗначению(СписокКлассификаторов[Счетчик].Значение) = Неопределено Тогда
			СписокКлассификаторов.Удалить(Счетчик); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	СписокКлассификаторов.СортироватьПоПредставлению();
	
	Возврат СписокКлассификаторов; 
	
КонецФункции

//Получение настроек для классификаторов и сравнение с настройками по умолчанию 
//
Функция ПолучитьНастройкиНовостей() Экспорт
	
	Настройки = РегистрыСведений.НСИСНастройки.Получить();
	СписокНовостей = Настройки.СписокНовостей.Получить();
	
	Если СписокНовостей = Неопределено Тогда
		СписокНовостей = Новый СписокЗначений();
	КонецЕсли;
	
	СписокНовостейПоУмолчанию = СписокДоступныхНовостей();
	
	Счетчик = 0;
	Пока Счетчик < СписокНовостейПоУмолчанию.Количество() Цикл
		
		Если СписокНовостей.НайтиПоЗначению(СписокНовостейПоУмолчанию[Счетчик].Значение) = Неопределено Тогда
			НовыйЭлемент = СписокНовостей.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СписокНовостейПоУмолчанию[Счетчик]); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < СписокНовостей.Количество() Цикл
		
		Если СписокНовостейПоУмолчанию.НайтиПоЗначению(СписокНовостей[Счетчик].Значение) = Неопределено Тогда
			СписокНовостей.Удалить(Счетчик); 
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	СписокНовостей.СортироватьПоПредставлению();
	
	Возврат СписокНовостей; 
	
КонецФункции

//Из справочника валют получаем список обновляемых через интернет 
//
Функция ПолучитьНастройкиВалют()
	
	Возврат НСИСПереопределяемый.ПолучитьНастройкиВалют();
	
КонецФункции

// Получаем пользователя из сохраненных настроек или проходим авторизацию
//
Функция ПолучитьПользователя(ВФоне)
	
	Пользователь = Новый Структура("ИмяПользователя, Пароль", "", "");
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("RDI",
			"RDI_Пользователь",
			Неопределено);
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		Пользователь.ИмяПользователя = ИмяПользователя;
		Возврат Пользователь;
	КонецЕсли;	
	
	ПараметрыАвторизации = ПолучитьПараметрыАвторизации();
	
	Если ПараметрыАвторизации.АвторизацияЧерезТикет Тогда 
		Если ПараметрыАвторизации.Авторизация.Тикет = "" ИЛИ ПараметрыАвторизации.Авторизация.Тикет = Неопределено  Тогда
			ВыводСообщения(ПараметрыАвторизации.Авторизация.СообщениеОбОшибке, ВФоне);
		КонецЕсли;	
		
		Пользователь.ИмяПользователя = ПараметрыАвторизации.Авторизация.Тикет;
	Иначе
		Пользователь.ИмяПользователя = ПараметрыАвторизации.ИмяПользователя;
		Пользователь.Пароль = ПараметрыАвторизации.Пароль;
		
	КонецЕсли;	
	
	Возврат Пользователь;
	
КонецФункции

//Функция по телу запроса читает JSON.
//В результате получаем структуру
Функция ПрочитатьJSONИзЗапроса(ТелоЗапроса) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПрокси(НастройкиПрокси, Протокол)
	
	Прокси = Новый ИнтернетПрокси;
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, НастройкиПрокси["Сервер"], НастройкиПрокси["Порт"]);
	Прокси.Пользователь	= НастройкиПрокси["Пользователь"];
	Прокси.Пароль		= НастройкиПрокси["Пароль"];
	
	Возврат Прокси;
	
КонецФункции

//Функция выполняет запрос к северу, возвращает разобранный результат
//
Функция ВыполнитьЗапросКСерверу(Сервис, Параметры, ВФоне) Экспорт
	
	Если НСИСПереопределяемый.ПроверкаПередПодключением(ВФоне) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Пользователь = ПолучитьПользователя(ВФоне);
	Если НЕ ЗначениеЗаполнено(Пользователь.ИмяПользователя) Тогда
		ВыводСообщения(НСтр("ru='Обновление данных не выполнено';uk= 'Оновлення даних не виконано'"), ВФоне);
		Возврат Неопределено;
	КонецЕсли;	
	
	ПараметрыКонфигурации = ПолучитьПараметрыКонфигурации();
	
	Сервер = АдресСерверНСИС();
	Ресурс = АдресРесурсаНСИС(Сервис);

	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	
	// инициализируем настройки прокси, если они определены
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = СформироватьПрокси(НастройкаПроксиСервера, "https");
	Иначе
		Прокси = Новый ИнтернетПрокси;
	КонецЕсли;
	
	Попытка
		HTTP =  Новый HTTPСоединение(Сервер, 443,,,Прокси,,ЗащищенноеСоединение);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		ВыводСообщения(ОписаниеОшибки, ВФоне);
		Возврат Неопределено;	
	КонецПопытки;	
		
		
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства("Конфигурация");
	Запись.ЗаписатьЗначение(ПараметрыКонфигурации.ИмяКонфигурации);
	Запись.ЗаписатьИмяСвойства("Редакция");
	Запись.ЗаписатьЗначение(ПараметрыКонфигурации.Редакция);
	
	Для Каждого Параметр из Параметры Цикл 
		Запись.ЗаписатьИмяСвойства(Параметр.Ключ);
		ЗаписатьJSON(Запись, Параметр.Значение);
	КонецЦикла; 
	
	Запись.ЗаписатьКонецОбъекта();
	ТелоЗапроса = Запись.Закрыть();

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("user", Пользователь.ИмяПользователя);
	Если ЗначениеЗаполнено(Пользователь.Пароль) Тогда
		Заголовки.Вставить("password", Пользователь.Пароль);	
	КонецЕсли;	
	
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Попытка
		Результат = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ВыводСообщения(НСтр("ru='Не удалось выполнить запрос к серверу RDI';uk= 'Не вдалося виконати запит до серверу RDI'"), ВФоне);
		Возврат Неопределено;
	КонецПопытки;	
		
	Если Результат.КодСостояния <> 200 Тогда
		
		ОписаниеОшибки = "";
		РезультатЗапроса = "";
		ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
		Попытка
			ОтветСтруктура = ПрочитатьJSONИзЗапроса(ТекстОтвета);
		Исключение
			ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обновление данных не выполнено (код ошибки %1)';uk= 'Оновлення даних не виконано (код помилки %1)'"), Результат.КодСостояния), ВФоне);
			Возврат Неопределено;
		КонецПопытки;	
		Если ОтветСтруктура.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
			ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;	
	
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Возврат ПрочитатьJSONИзЗапроса(ТекстОтвета);
	
КонецФункции	

//Вывод сообщения пользователю или в журнал регистрации
//
Процедура ВыводСообщения(ТекстСообщения, ВФоне, Уровень = Неопределено) Экспорт
	
	Если ВФоне Тогда
		Если Уровень = Неопределено Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;	
		ЗаписьЖурналаРегистрации("RDI", Уровень,,, ТекстСообщения);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецЕсли;	
	
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// Переопределяемые функции

//Список доступных для конфигурации регистров с нормативной информацией
//
Функция СписокДоступныхРегистров() Экспорт
	
	Возврат НСИСПереопределяемый.СписокДоступныхРегистров();
	
КонецФункции

//Список доступных для конфигурации классификаторов
//
Функция СписокДоступныхКлассификаторов() Экспорт
	
	Возврат НСИСПереопределяемый.СписокДоступныхКлассификаторов();
	
КонецФункции

//Список доступных для конфигурации разделеов новостей
//
Функция СписокДоступныхНовостей() Экспорт
	
	Возврат НСИСПереопределяемый.СписокДоступныхНовостей();
	
КонецФункции

//Соответствие доступных для конфигурации классификаторов и макетов конфигурации.
//Используется для актуализации
//
Функция СоответствиеКлассификаторовИМакетов()
	
	Возврат НСИСПереопределяемый.СоответствиеКлассификаторовИМакетов();
	
КонецФункции	

//Получает параметры конфигурации - имя и редакцию
//
Функция ПолучитьПараметрыКонфигурации()
	
	Возврат НСИСПереопределяемый.ПолучитьПараметрыКонфигурации();
	
КонецФункции	

//Получает параметры авторизации
//
Функция ПолучитьПараметрыАвторизации()
	
	Возврат НСИСПереопределяемый.ПолучитьПараметрыАвторизации();
	
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// Функции для обновления регистров

Функция ПолучитьМенеджерПоТипу(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если МетаданныеТипа = Неопределено Тогда
		// нет такого типа - скорее всего он примитивный
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
	 	// Это справочник
		Менеджер = Справочники[МетаданныеТипа.Имя];	
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		// Это перечисление
		Менеджер = Перечисления[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
	 	// Это план счетов
		Менеджер = ПланыСчетов[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
	 	// Это план Видов Характеристик
		Менеджер = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
	 	// Это план ВидовРасчета
		Менеджер = ПланыВидовРасчета[МетаданныеТипа.Имя];
	Иначе
		//Для примитивных типов менеджер не нужен,
		Менеджер = Неопределено; 
	КонецЕсли; 
	
	Возврат Менеджер;
	
КонецФункции

Функция СформированиеЗначениеСсылочногоТипа(Менеджер, Значение)
	
	Попытка 
		Возврат Менеджер[Значение];	
	Исключение
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

Функция СформироватьЗначение(СоответствиеТипов, Ключ, Значение)
	
	ДоступныйТип = СоответствиеТипов.Получить(Ключ);
	
	Если ДоступныйТип = "Дата" Тогда
			Возврат Дата(Число(Сред(Значение,7,4)), Число(Сред(Значение,4,2)), Число(Сред(Значение,1,2)));
	ИначеЕсли ДоступныйТип = "Булево" Тогда
			Если Значение = "Истина" или Значение = "Істина" Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
	ИначеЕсли ДоступныйТип <> Неопределено Тогда
		Возврат СформированиеЗначениеСсылочногоТипа(ДоступныйТип, Значение);
	Иначе
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Попытка
				Если СтрНайти(Значение, "T00") > 0 Тогда
					Возврат Дата(Число(Сред(Значение,1,4)), Число(Сред(Значение,6,2)), Число(Сред(Значение,9,2)));
				КонецЕсли;
			Исключение
				Возврат Значение;
			КонецПопытки;	
			Возврат Значение;
		Иначе	
			Возврат Значение;
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Процедура ОбновитьРегистр(ИмяРегистра, Синоним, Структура, Записи, ВыводитьПротокол, ВФоне)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	//Формирование соответстввия типов
	СоответствиеТипов = Новый Соответствие;
	Для Каждого ЭлементСтруктуры из Структура Цикл
		Колонка = ТаблицаЗаписей.Колонки.Найти(ЭлементСтруктуры); 
		Если Колонка <> Неопределено Тогда
			ДоступныеТипы = ТаблицаЗаписей.Колонки[ЭлементСтруктуры].ТипЗначения.Типы();
			Для Каждого ДоступныйТип Из ДоступныеТипы  Цикл
				СоответствиеТипов.Вставить(ЭлементСтруктуры, ПолучитьМенеджерПоТипу(ДоступныйТип));
			КонецЦикла;	
		Иначе
			//Лишняя колонка
			СоответствиеТипов.Вставить(ЭлементСтруктуры, Неопределено);
		КонецЕсли;		
	КонецЦикла;	
	
	//чтение и преобразование записей
	Для Каждого Запись ИЗ Записи Цикл
		СтруктураСтрока = Новый Структура();
		Для Каждого ЭлементСтруктуры из Структура Цикл
			Значение = СформироватьЗначение(СоответствиеТипов, ЭлементСтруктуры, Запись[ЭлементСтруктуры]);
			СтруктураСтрока.Вставить(ЭлементСтруктуры, Значение);
		КонецЦикла;	
		ЗаписьВНаборе = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьВНаборе, СтруктураСтрока); 
	КонецЦикла;
	
	//запись в регистр
	Если ТаблицаЗаписей.Количество() > 0 тогда
		Если ВыводитьПротокол Тогда
			ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Записаны обновления регистра ""%1""';uk='Записані оновлення регістру ""%1""'", Локализация.КодЯзыкаИнтерфейса()), Синоним), ВФоне, УровеньЖурналаРегистрации.Информация);
		КонецЕсли;
		Для Каждого Запись из ТаблицаЗаписей Цикл
			ТекущаяЗапись = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ТекущаяЗапись, Запись);
			ТекущаяЗапись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// Функции работы с файлами 

Функция ПолучитьВерсиюВстроенногоМакета(ВстроенныйМакет)
	
	ТекстовыйДокумент = (ТипЗнч(ВстроенныйМакет) = Тип("ТекстовыйДокумент") );
	
	Если ТекстовыйДокумент Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ВстроенныйМакет.ПолучитьТекст());
		
		// Прочитаем первый узел и проверим его.
		Если Не Чтение.Прочитать() Тогда
			ВызватьИсключение НСтр("ru='Пустой XML';uk='Порожній XML'");
		ИначеЕсли Чтение.Имя <> "Items" Тогда
			ВызватьИсключение НСтр("ru='Ошибка в структуре XML';uk='Помилка в структурі XML'");
		КонецЕсли;
		
		Версия = Чтение.ПолучитьАтрибут("VersionRDI");
		
		Если Версия = Неопределено Тогда
			Версия = Чтение.ПолучитьАтрибут("Version");
			
			Если Версия = Неопределено Тогда
				Возврат 0;
			Иначе
				Возврат Число(Версия);
			КонецЕсли;
		Иначе
			Возврат Число(Версия);	
		КонецЕсли;	
	Иначе
	    Область = ВстроенныйМакет.Область(1,1);
		Версия = СтрЗаменить(ВРЕГ(Область.ПараметрРасшифровки), ВРЕГ("Version"), "");
		Если Не ЗначениеЗаполнено(Версия) Тогда
			Возврат 0;
		Иначе
			Возврат Число(Версия);
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьВерсиюВнешнегоМакета(Идентификатор)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НСИСФайлы.Версия КАК Версия
	               |ИЗ
	               |	РегистрСведений.НСИСФайлы КАК НСИСФайлы
	               |ГДЕ
	               |	НСИСФайлы.Идентификатор = &Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Версия = 0;
	Пока Выборка.Следующий() Цикл
		Версия = Выборка.Версия;	
	КонецЦикла;
	
	Возврат Версия;
	
КонецФункции

Функция ПолучитьМакет (Идентификатор, ВстроенныйМакет) Экспорт
	
	ВерсияВстроенный = ПолучитьВерсиюВстроенногоМакета(ВстроенныйМакет);
	ВерсияВнешний = ПолучитьВерсиюВнешнегоМакета(Идентификатор);
	
	Если ВерсияВстроенный >= ВерсияВнешний Тогда
		Возврат ВстроенныйМакет;
	Иначе
		Возврат ПрочитатьДокументИзБазы(Идентификатор);
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаписатьФайлВБазу(Идентификатор, Представление, Данные, Версия, Тип, ВыводитьПротокол, ВФоне)
	
	НоваяЗапись = РегистрыСведений.НСИСФайлы.СоздатьМенеджерЗаписи();;
	НоваяЗапись.Идентификатор = Идентификатор;
	НоваяЗапись.Версия = Версия;
	
	
	Если Тип = "txt" или Тип = "mxl" Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		Данные.Записать(ИмяФайла);
		
		Файл = ?(Тип = "mxl", Новый ТабличныйДокумент(), Новый ТекстовыйДокумент());
		Файл.Прочитать(ИмяФайла);	
		НоваяЗапись.Файл = Новый ХранилищеЗначения(Файл);
		
		УдалитьФайлы(ИмяФайла);
		
	Иначе	
		НоваяЗапись.Файл = Новый ХранилищеЗначения(Данные);
	КонецЕсли;	
	НоваяЗапись.Записать(Истина);

	Если ВыводитьПротокол Тогда
		ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Записаны обновления файла ""%1""';uk='Записані оновлення файлу ""%1""'", Локализация.КодЯзыкаИнтерфейса()), Представление), ВФоне, УровеньЖурналаРегистрации.Информация);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДокументИзБазы(Идентификатор) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НСИСФайлы.Файл КАК Файл
	               |ИЗ
	               |	РегистрСведений.НСИСФайлы КАК НСИСФайлы
	               |ГДЕ
	               |	НСИСФайлы.Идентификатор = &Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();

	Файл = Неопределено;
	Пока Выборка.Следующий() Цикл
		Файл = Выборка.Файл;
		Возврат Файл.Получить();
	КонецЦикла;
	
	Возврат Файл;
	
КонецФункции

Процедура ЗаписатьДополнительныйФайлВБазу(Идентификатор, Данные, Версия, Тип, Описание, ОписаниеДоп, ВыводитьПротокол, ВФоне)
	
	НоваяЗапись = Справочники.НСИСДополнительныеФайлы.СоздатьЭлемент();
	НоваяЗапись.Идентификатор = Идентификатор;
	НоваяЗапись.Версия = Версия;
	НоваяЗапись.Тип = Тип;
	НоваяЗапись.Наименование = НСтр(Описание, Локализация.КодЯзыкаИнформационнойБазы());
	НоваяЗапись.ПодробноеОписание = НСтр(ОписаниеДоп, Локализация.КодЯзыкаИнформационнойБазы());
	
	НоваяЗапись.Файл = Новый ХранилищеЗначения(Данные);
	НоваяЗапись.ДанныеЗагружены = Истина;
	НоваяЗапись.ДатаЗагрузки = ТекущаяДата();
	НоваяЗапись.Записать();

	Если ВыводитьПротокол Тогда
		ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Записаны обновления файла ""%1""';uk='Записані оновлення файлу ""%1""'", Локализация.КодЯзыкаИнтерфейса()), НоваяЗапись.Наименование ), ВФоне, УровеньЖурналаРегистрации.Информация);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//Функции для запуска сервисов

Процедура ПроверитьДоступ(ВыводитьПротокол = Ложь, ВФоне = Ложь) Экспорт
	
	ОтветСервера = ВыполнитьЗапросКСерверу("ТестДоступа", Новый Структура(), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Доступ = "";
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Если ОтветСервера.Свойство("Доступ", Доступ) Тогда
		Если ВыводитьПротокол Тогда
			ВыводСообщения(НСтр(Доступ, Локализация.КодЯзыкаИнтерфейса()), ВФоне, УровеньЖурналаРегистрации.Информация);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры	

Процедура ВыполнитьОбновлениеРегистров(ВыводитьПротокол = Ложь, ВФоне = Ложь) Экспорт
	
	СписокРегистров = ПолучитьНастройкиРегистров();
	
	ФС = Новый ФиксированнаяСтруктура("ИмяРегистра, ДатаАктуальности", "", "");
	МассивРегистров = Новый Массив();
	
	Для Каждого Регистр из СписокРегистров Цикл
		
		Если НЕ Регистр.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураРегистров = Новый Структура(ФС); 
		СтруктураРегистров.Вставить("ИмяРегистра", Регистр.Значение);
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(Регистр.Период) КАК Период
		               |ИЗ
		               |	РегистрСведений." + Регистр.Значение + " КАК Регистр";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			СтруктураРегистров.Вставить("ДатаАктуальности", "19000101");
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.Период) Тогда
				СтруктураРегистров.Вставить("ДатаАктуальности", Формат(Выборка.Период,"ДФ=yyyyMMdd"));
			Иначе
				СтруктураРегистров.Вставить("ДатаАктуальности", "19000101");
			КонецЕсли;	
		КонецЕсли;	
		МассивРегистров.Добавить(СтруктураРегистров);
		
	КонецЦикла;
	
	ОтветСервера = ВыполнитьЗапросКСерверу("НормативныеВеличины", Новый Структура("СписокРегистров", МассивРегистров), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	РезультатЗапроса = "";
	
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтветСервера.Свойство("РезультатЗапроса", РезультатЗапроса) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Массив") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Для Каждого Регистр из РезультатЗапроса Цикл
		Если ТипЗнч(Регистр) <> Тип("Структура") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		ИмяРегистра = "";
		Статус = "";
		Структура = "";
		Записи = "";
		
		Если НЕ Регистр.Свойство("ИмяРегистра", ИмяРегистра) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;	
		
		Синоним = Метаданные.РегистрыСведений[ИмяРегистра].Синоним;
		
		Если НЕ Регистр.Свойство("Статус", Статус) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		Если Регистр.Статус = "НетОбновлений" Тогда
			Если ВыводитьПротокол Тогда
				ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет обновлений регистра ""%1""';uk='Немає оновлення регістру ""%1""'", Локализация.КодЯзыкаИнтерфейса()), Синоним), ВФоне, УровеньЖурналаРегистрации.Информация);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;	
		Если НЕ Регистр.Свойство("Записи", Записи) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;	
        Если ТипЗнч(Записи) <> Тип("Массив") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		Если НЕ Регистр.Свойство("Структура", Структура) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;	
        Если ТипЗнч(Структура) <> Тип("Массив") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;

		ОбновитьРегистр(ИмяРегистра, Синоним, Структура, Записи, ВыводитьПротокол, ВФоне);
		
	КонецЦикла	

	
КонецПроцедуры	

Процедура ВыполнитьОбновлениеКурсовВалют(ДатаС = Неопределено, ДатаПо = Неопределено, СписокВалют = Неопределено, ВыводитьПротокол = Ложь, ВФоне = Ложь) Экспорт
	
	Если СписокВалют = Неопределено Тогда
		СписокВалют = ПолучитьНастройкиВалют();
	КонецЕсли;	
	Если СписокВалют.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Если ДатаС = Неопределено И ДатаПо = Неопределено Тогда
		ДатаС = ТекущаяДата();
		ДатаПо = ТекущаяДата();
	Иначе	
		Если ДатаС = Неопределено Тогда
			ДатаС = Дата(2019,1,1);
		КонецЕсли;
		Если ДатаПо = Неопределено Тогда
			ДатаПо = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	ОтветСервера = ВыполнитьЗапросКСерверу("КурсыВалют", Новый Структура("СписокВалют, ДатаС, ДатаПо", СписокВалют, Формат(ДатаС, "ДФ=yyyyMMdd"), Формат(ДатаПо, "ДФ=yyyyMMdd")), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
		ОписаниеОшибки = "";
	Статус = "";
	РезультатЗапроса = "";
	
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если НЕ ОтветСервера.Свойство("Статус", Статус) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ОтветСервера.Статус = "НетОбновлений" Тогда
		Если ВыводитьПротокол Тогда
			ВыводСообщения(НСтр("ru='Нет обновлений курсов валют';uk='Немає оновлення курсів валют'", Локализация.КодЯзыкаИнтерфейса()), ВФоне, УровеньЖурналаРегистрации.Информация);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	Если НЕ ОтветСервера.Свойство("РезультатЗапроса", РезультатЗапроса) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Массив") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	ЕстьЗаписи = Ложь;
	
	Для Каждого Запись из РезультатЗапроса Цикл
		Если ТипЗнч(Запись) <> Тип("Структура") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Валюта = "";
		Период = "";
		Курс = "";
		Кратность = "";
		
		Если НЕ Запись.Свойство("Валюта", Валюта) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;	
		Если НЕ Запись.Свойство("Период", Период) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		ТекущаяЗапись = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ТекущаяЗапись, Запись);
		Валюта = Справочники.Валюты.НайтиПоКоду(Строка(Запись.Валюта));
		Если Валюта.Пустая() Тогда
			Валюта = Справочники.Валюты.НайтиПоКоду("0"+Строка(Запись.Валюта));	
		КонецЕсли;	
		Если НЕ Валюта.Пустая() Тогда
			ТекущаяЗапись.Валюта = Валюта;
			ТекущаяЗапись.Записать(Истина);
			ЕстьЗаписи = Истина;
		КонецЕсли;
		
	КонецЦикла;	

	Если ВыводитьПротокол И ЕстьЗаписи Тогда
		ВыводСообщения(НСтр("ru='Обновлены курсы валют';uk='Оновлені курси валют'", Локализация.КодЯзыкаИнтерфейса()), ВФоне, УровеньЖурналаРегистрации.Информация);
	КонецЕсли;	

	
КонецПроцедуры	

Процедура ВыполнитьОбновлениеКлассификаторов(ВыводитьПротокол = Ложь, ВФоне = Ложь, СписокФайлов = Неопределено) Экспорт
	
	ФС = Новый ФиксированнаяСтруктура("ИмяФайла, Версия", "", "");
	МассивФайлов = Новый Массив();

	
	Если СписокФайлов = Неопределено Тогда
		
		СписокКлассификаторов = ПолучитьНастройкиКлассификаторов();
	
		Для Каждого Файл из СписокКлассификаторов Цикл
			
			Если НЕ Файл.Пометка Тогда
				Продолжить;
			КонецЕсли;	
			
			Версия = ПолучитьВерсиюВнешнегоМакета(Файл.Значение);
			
			СтруктураФайлов = Новый Структура(ФС);
			
			СтруктураФайлов.Вставить("ИмяФайла", Файл.Значение);
			СтруктураФайлов.Вставить("Версия", Версия);
			
			МассивФайлов.Добавить(СтруктураФайлов);
			
		КонецЦикла;
		
	Иначе	
		
		Для Каждого Файл из СписокФайлов Цикл
			
			СтруктураФайлов = Новый Структура(ФС);
			
			СтруктураФайлов.Вставить("ИмяФайла", Файл);
			СтруктураФайлов.Вставить("Версия", 0);
			
			МассивФайлов.Добавить(СтруктураФайлов);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	
		
	ОтветСервера = ВыполнитьЗапросКСерверу("Файлы", Новый Структура("СписокФайлов", МассивФайлов), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеОшибки = "";
	РезультатЗапроса = "";
		
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
		
	Если НЕ ОтветСервера.Свойство("Данные", РезультатЗапроса) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Массив") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	
	Для Каждого Файл из РезультатЗапроса Цикл
		
		Если ТипЗнч(Файл) <> Тип("Структура") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Статус = "";
		Данные = "";
		Версия = "";
		ИмяФайла = "";
		Тип = "";
		Дополнительный = "";
		Описание = "";
		ОписаниеДоп = "";
		
		Если НЕ Файл.Свойство("Статус", Статус) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		Если Файл.Статус = "НетОбновлений" Тогда
			Если ВыводитьПротокол Тогда
				ВыводСообщения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нет обновлений файла ""%1""';uk='Немає оновлень файлу ""%1""'", Локализация.КодЯзыкаИнтерфейса()), НСтр(СписокДоступныхКлассификаторов().НайтиПоЗначению(Файл.ИмяФайла).Представление, Локализация.КодЯзыкаИнтерфейса())), ВФоне, УровеньЖурналаРегистрации.Информация);
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Данные", Данные) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("ИмяФайла", ИмяФайла) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Версия", Версия) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Тип", Тип) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Дополнительный", Дополнительный) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Описание", Описание) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("ОписаниеДоп", ОписаниеДоп) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = Base64Значение(Данные);
		Если ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Дополнительный Тогда
			ЗаписатьДополнительныйФайлВБазу(ИмяФайла, ДвоичныеДанные, Версия, Тип, Описание, ОписаниеДоп, ВыводитьПротокол, ВФоне);
		Иначе	
			ЗаписатьФайлВБазу(ИмяФайла, НСтр(СписокДоступныхКлассификаторов().НайтиПоЗначению(ИмяФайла).Представление, Локализация.КодЯзыкаИнтерфейса()), ДвоичныеДанные, Версия, Тип, ВыводитьПротокол, ВФоне);
		КонецЕсли;	
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ВыполнитьОбновлениеНовостей(ВыводитьПротокол = Ложь, ВФоне = Ложь) Экспорт
	
	
	СписокНовостей = ПолучитьНастройкиНовостей();
	
	МассивНовостей = Новый массив();
	Для каждого Раздел Из СписокНовостей Цикл
		Если Раздел.Пометка Тогда
			МассивНовостей.Добавить(Раздел.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	
	ОтветСервера = ВыполнитьЗапросКСерверу("Новости", Новый Структура("Количество, Разделы", ПолучитьНастройкиЗагрузок().КоличествоНовостей, МассивНовостей), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеОшибки = "";
	Данные = "";
		
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
		
	Если НЕ ОтветСервера.Свойство("Данные", Данные) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
		
	Статус = "";
	Новости = "";
			
	Если НЕ Данные.Свойство("Статус", Статус) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если Данные.Статус = "НетОбновлений" Тогда
		Если ВыводитьПротокол Тогда
			ВыводСообщения(НСтр("ru='Нет обновлений новостей';uk='Немає оновлень новин'", Локализация.КодЯзыкаИнтерфейса()), ВФоне, УровеньЖурналаРегистрации.Информация);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
		
	Если НЕ Данные.Свойство("Новости", Новости) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Новости);
	
	ЗаписатьФайлВБазу("Новости", НСтр("ru='Новости';uk='Новини'", Локализация.КодЯзыкаИнтерфейса()), ТекстовыйДокумент, 1, "", ВыводитьПротокол, ВФоне);
	
КонецПроцедуры	

Процедура ВыполнитьОбновлениеКалендаря(ДатаС = Неопределено, ДатаПо = Неопределено, ВыводитьПротокол = Ложь, ВФоне = Ложь) Экспорт
	
	
	Если ДатаС = Неопределено И ДатаПо = Неопределено Тогда
		ДатаС = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -1);
		ДатаПо = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), 1);
	КонецЕсли;
	
	ОтветСервера = ВыполнитьЗапросКСерверу("Календарь", Новый Структура("ДатаС, ДатаПо", Формат(ДатаС, "ДФ=yyyyMMdd"), Формат(ДатаПо, "ДФ=yyyyMMdd")), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеОшибки = "";
	Данные = "";
		
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
		
	Если НЕ ОтветСервера.Свойство("Данные", Данные) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
		
	Статус = "";
	Календарь = "";
			
	Если НЕ Данные.Свойство("Статус", Статус) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если Данные.Статус = "НетОбновлений" Тогда
		Если ВыводитьПротокол Тогда
			ВыводСообщения(НСтр("ru='Нет обновлений новостей';uk='Немає оновлень новин'", Локализация.КодЯзыкаИнтерфейса()), ВФоне, УровеньЖурналаРегистрации.Информация);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
		
	Если НЕ Данные.Свойство("Календарь", Календарь) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Календарь) <> Тип("Массив") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись из Календарь Цикл
		ИмяФайла = "";
		ДанныеКалендаря = "";
		Если НЕ Запись.Свойство("ИмяФайла", ИмяФайла) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		Если НЕ Запись.Свойство("Данные", ДанныеКалендаря) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ДанныеКалендаря);
		
		ЗаписатьФайлВБазу(ИмяФайла, ИмяФайла, ТекстовыйДокумент, 1, "", ВыводитьПротокол, ВФоне);

	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПолучитьСписокДополнительныхФайлов(ВыводитьПротокол, ВФоне) Экспорт
	
	ОтветСервера = ВыполнитьЗапросКСерверу("ПолучитьСписокФайлов", Новый Структура(), ВФоне);
	Если ОтветСервера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	РезультатЗапроса = "";
	
	Если ОтветСервера.Свойство("ОписаниеОшибки", ОписаниеОшибки) Тогда
		ВыводСообщения(НСтр(ОписаниеОшибки, Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтветСервера.Свойство("РезультатЗапроса", РезультатЗапроса) Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Массив") Тогда
		ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Массив;
	ФС = Новый Структура("ИмяФайла, Версия, Описание, ПодробноеОписание");
	
	Для Каждого Файл из РезультатЗапроса Цикл
		Если ТипЗнч(Файл) <> Тип("Структура") Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		ИмяФайла = "";
		ДоступнаяВерсия = "";
		Описание = "";
		ПодробноеОписание = "";
		
		Если НЕ Файл.Свойство("ИмяФайла", ИмяФайла) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;	
	
		Если НЕ Файл.Свойство("Версия", ДоступнаяВерсия) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("Описание", Описание) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;
		
		Если НЕ Файл.Свойство("ПодробноеОписание", ПодробноеОписание) Тогда
			ВыводСообщения(НСтр("ru='Ошибка в структуре ответа сервера';uk='Помилка в структурі відповіді серверу'", Локализация.КодЯзыкаИнтерфейса()), ВФоне);
			Возврат;
		КонецЕсли;

		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Продолжить;
		КонецЕсли;	
		
		ФС = Новый Структура("ИмяФайла, Версия, Описание, ПодробноеОписание");
		
		ФС.ИмяФайла = ИмяФайла;
		ФС.Версия = ДоступнаяВерсия;
		ФС.Описание = НСтр(Описание, Локализация.КодЯзыкаИнтерфейса());
		ФС.ПодробноеОписание = НСтр(ПодробноеОписание, Локализация.КодЯзыкаИнтерфейса());
		
		Результат.Добавить(ФС);
		
	КонецЦикла;
	
	ЗаписатьФайлВБазу("СписокДополнительныхФайлов", "СписокДополнительныхФайлов", Результат, 1, "", ВыводитьПротокол, ВФоне);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Регламентные процедуры

//Запуск сервисов из регламентного задания
//
Процедура ВыполнитьОбновлениеДанныхРегламентноеЗадание() Экспорт
	
	
	Настройка = ПолучитьНастройкиЗагрузок(); 
			
	Если Настройка.ЗагружатьНормативныеВеличины Тогда		
		ВыполнитьОбновлениеРегистров(Истина, Истина);
	КонецЕсли;
	Если Настройка.ЗагружатьКурсыВалют Тогда
		ВыполнитьОбновлениеКурсовВалют(,,,Истина, Истина);
	КонецЕсли;
	Если Настройка.ЗагружатьКлассификаторы Тогда		
		ВыполнитьОбновлениеКлассификаторов(Истина, Истина);
	КонецЕсли;
	Если Настройка.ЗагружатьНовости Тогда		
		ВыполнитьОбновлениеНовостей(Истина, Истина);
	КонецЕсли;
	Если Настройка.ЗагружатьКалендарь Тогда		
		ВыполнитьОбновлениеКалендаря(,,Истина, Истина);
	КонецЕсли;
	
	
КонецПроцедуры

//Необходимо вызывать при первом запуске конфигурации и обновлении релиза, если менялся какой-то классификатор.
//Процедура актуализирует данные о версиях встроенных классификаторов.
//
Процедура ПриОбновленииРелиза() Экспорт
	
	СоотвествиеКлассификаторов = СоответствиеКлассификаторовИМакетов();
	
	Для Каждого Классификатор из СоотвествиеКлассификаторов Цикл
		
		ВерсияВстроенный = ПолучитьВерсиюВстроенногоМакета(Классификатор.Значение);
		ВерсияВнешний = ПолучитьВерсиюВнешнегоМакета(Классификатор.Ключ);
			
		Если ВерсияВстроенный >= ВерсияВнешний Тогда
			НоваяЗапись = РегистрыСведений.НСИСФайлы.СоздатьМенеджерЗаписи();;
			НоваяЗапись.Идентификатор = Классификатор.Ключ;
			НоваяЗапись.Версия = ВерсияВстроенный;
			НоваяЗапись.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
//Поставляемые профили пользователей

Процедура ЗаполнитьПоставляемыеПрофилиПользователей(ОписанияПрофилей) Экспорт	
	
	// Описание для заполнения профиля "Настройка сервиса RDI".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "7109de84-d442-48f1-8921-ec9f96524c1c";
	ОписаниеПрофиля.Наименование  = НСтр("ru='Настройка сервиса RDI';uk= 'Настройка сервісу RDI'", Локализация.КодЯзыкаИнформационнойБазы());
	ОписаниеПрофиля.Роли.Добавить           (  "НСИСНастройка"                   						);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

	// Описание для заполнения профиля "Использование сервиса RDI".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "f834f515-d5d4-4d83-8eec-789f3612cff4";
	ОписаниеПрофиля.Наименование  = НСтр("ru='Использование сервиса RDI';uk= 'Використання сервісу RDI'", Локализация.КодЯзыкаИнформационнойБазы());
	ОписаниеПрофиля.Роли.Добавить("НСИСИспользование");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	МодульРаботаВБезопасномРежиме =  ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	НовыеРазрешения = Новый Массив;

	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"rdi.bas-soft.eu",
		443,
		НСтр("ru='Получение данных из сервиса RDI.';uk='Отримання даних із сервісу RDI.'"));
	НовыеРазрешения.Добавить(Разрешение);

	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

&НаКлиенте
Перем ВыполняетсяУдаление;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	РегНомер = Константы.РегистрационныйНомерПрограммы.Получить();
	ВключеноОграничениеДоступаНаУровнеЗаписей = Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	Организация= Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Получить();
	НазваниеКонфигурации = СокрЛП(Метаданные.Синоним);
	ВерсияКонфигурации = СокрЛП(Метаданные.Версия);
	ПоставщикКонфигурации = СокрЛП(Метаданные.Поставщик);
	ЭтоФайловаяБаза = СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Если ЭтоФайловаяБаза Тогда
		Элементы.ГруппаТипСУБД.Видимость = Ложь;
		Элементы.АнкетаКоличествоБазНаСУБД.Видимость = Ложь;
		Элементы.ГруппаИспользованиеСерверов.Видимость = Ложь;
		Элементы.АнкетаПараметрыПроцессораИПамяти.Видимость = Ложь;
	КонецЕсли;
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПользователиКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	АдресEMailДляОтветаПоУмолчанию = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АдресEMailДляОтветаПоУмолчанию = СокрЛП(ВыборкаДетальныеЗаписи.АдресЭП);
	КонецЦикла;

	EMailОтправителяДляОтвета = АдресEMailДляОтветаПоУмолчанию;
	ИмяОтправителя = ТекПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормы();
#Если ВебКлиент Тогда
	Элементы.ГруппаОбновлениеОбщая.Видимость = Ложь;
#КонецЕсли
#Если Не ВебКлиент Тогда
	УстановитьИнформациюОбАктуальностиВерсииКонфигурации();
#КонецЕсли
	УправлениеВидимостьюКоманд();
	ЗагрузитьСписокАдресовДляОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьЗначенияКонстант();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УчетныеЗаписиЭлектроннойПочты" Тогда
		ЗагрузитьСписокАдресовДляОтправки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбращениеПоИнымПричинамТекстОбращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ОбращениеПоИнымПричинамТекстОбращения",
		НСтр("ru='Текст Вашего обращения';uk='Текст Вашого звернення'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОПроблемахСБыстродействиемОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОПроблемахСБыстродействиемОписание",
		НСтр("ru='Описание проблемы';uk='Опис проблеми'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОРаботеСПрограммойФормулировкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ВопросОРаботеСПрограммойФормулировка",
		НСтр("ru='Ваш вопрос';uk='Ваше запитання'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюОписаниеЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюОписаниеЗадач",
		НСтр("ru='Описание задач';uk='Опис задач'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыЧтоВызываетТрудностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыЧтоВызываетТрудности",
		НСтр("ru='Что неудобно?';uk='Що незручно?'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдобствоРаботыОжидаемоеПоведениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"УдобствоРаботыОжидаемоеПоведение",
		НСтр("ru='Ожидаемое поведение';uk='Очікувана поведінка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОписаниеОшибкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"СообщениеОбОшибкеОписаниеОшибки",
		НСтр("ru='Описание ошибки';uk='Опис помилки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюУдачныеПримерыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"ПожеланияПоРазвитиюУдачныеПримеры",
		НСтр("ru='Удачные примеры реализации задач';uk='Вдалі приклади реалізації задач'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АнкетаПараметрыПроцессораИПамятиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"АнкетаПараметрыПроцессораИПамяти",
		НСтр("ru='Характеристики серверов';uk='Характеристики серверів'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если УчетнаяЗаписьЭП <> ВыбранноеЗначение Тогда
		УчетнаяЗаписьЭП = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		ПараметрыОтбора = Новый Структура("УчетнаяЗапись", ЭлементСписка.Значение);
		МассивСтрок = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(ПараметрыОтбора);
		АдресПоУмолчанию = МассивСтрок[0].АдресЭлектроннойПочты;
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			УчетнаяЗаписьЭППредставление = ЭлементСписка.Представление;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭППредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбновленияКонфигурацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновлениеКонфигурацииКлиент.ПоказатьПоискИУстановкуОбновлений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦельОбращенияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПожеланияПоРазвитиюГотовДатьПоясненияПриИзменении(Элемент)
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодготовкиПисьмаВнутреннаяПочтаПриИзменении(Элемент)

	УправлениеДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодготовкиПисьмаВнешняяПочтаПриИзменении(Элемент)

	УправлениеДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВложенияВыборРасширениеПодключено",
		ЭтотОбъект,
		Новый Структура("ИмяФайла", Элемент.ТекущиеДанные.ИмяФайлаНаДиске));
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Удалить ""%1""?';uk='Вилучити ""%1""?'"),
		ТекущиеДанные.Представление);
		
	Если Не ВыполняетсяУдаление Тогда
	    Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ИндексСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Вложения.Удалить(ИндексСтроки);
		Если ТекущиеДанные.Расположение = "ВременноеХранилище"
			И ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда
			УдалитьИзВременногоХранилища(ТекущиеДанные.Адрес);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	ОтобразитьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	ОчиститьСообщения();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Не ЗначениеЗаполнено(РегНомер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен регистрационный номер программы!';uk='Не заповнений реєстраційний номер програми!'"), , "РегНомер");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено название организации, на которую зарегистрирована программа!';uk='Не заповнена назва організації, на яку зареєстрована програма!'"),, "Организация");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено имя отправителя!';uk='Не заповнено ім''я відправника!'"),, "ИмяОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(EMailОтправителяДляОтвета) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен адрес электронной почты для ответа на обращение!';uk='Не заповнена адреса електронної пошти для відповіді на звернення!'"),, "EMailОтправителяДляОтвета");
			НеобходимаяИнформацияВведена = Ложь;
		Иначе
			Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СокрЛП(EMailОтправителяДляОтвета)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не корректно заполнен адрес электронной почты для ответа на обращение!';uk='Не коректно заповнена адреса електронної пошти для відповіді на звернення!'"),, "EMailОтправителяДляОтвета");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РегионИГородОтправителя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен регион и город отправителя!';uk='Не заповнений регіон і місто відправника!'"),, "РегионИГородОтправителя");
			НеобходимаяИнформацияВведена = Ложь;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
		КонецЕсли;
		Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка") Тогда
			ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке");
		КонецЕсли;
		УправлениеВидимостью();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		НеобходимаяИнформацияВведена = Истина;
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке Тогда
			Если Не ЗначениеЗаполнено(СообщениеОбОшибкеОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено описание ошибки!';uk='Не заповнений опис помилки!'"),, "СообщениеОбОшибкеОписаниеОшибки");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы Тогда
			Если Не ЗначениеЗаполнено(УдобствоРаботыЧтоВызываетТрудности) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описан функционал, работа с которым вызывает трудности!';uk='Не описаний функціонал, робота з якими викликає труднощі!'"),, "УдобствоРаботыЧтоВызываетТрудности");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(УдобствоРаботыОжидаемоеПоведение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описано ожидаемое поведение программы!';uk='Не описано очікувану поведінку програми!'"),, "УдобствоРаботыОжидаемоеПоведение");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы Тогда
			Если Не ЗначениеЗаполнено(ПожеланияПоРазвитиюОписаниеЗадач) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описаны задачи, которые не удается решить с помощью существующего функционала!';uk='Не описані задачі, які не вдається вирішити за допомогою існуючого функціоналу!'"),, "ПожеланияПоРазвитиюОписаниеЗадач");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой Тогда
			Если Не ЗначениеЗаполнено(ВопросОРаботеСПрограммойФормулировка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не сформулирован вопрос о работе с программой!';uk='Не сформульоване питання про роботу з програмою!'"),, "ВопросОРаботеСПрограммойФормулировка");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
			Если Не ЗначениеЗаполнено(СообщениеОПроблемахСБыстродействиемОписание) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не описана проблема с быстродействием!';uk='Не описана проблема з швидкодією!'"),, "СообщениеОПроблемахСБыстродействиемОписание");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		ИначеЕсли Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам Тогда
			Если Не ЗначениеЗаполнено(ОбращениеПоИнымПричинамТекстОбращения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен текст обращения!';uk='Не заповнений текст звернення!'"),, "ОбращениеПоИнымПричинамТекстОбращения");
				НеобходимаяИнформацияВведена = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НеобходимаяИнформацияВведена Тогда
			Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием Тогда
				Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияПраво;
				Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета;
			Иначе
				Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст;
				УстановитьЗаголовокФормы();
				СформироватьТекстПисьма();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Если Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействиемАнкета Тогда
			Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
			Элементы.ШапкаЦельОбращения.ТекущаяСтраница = Элементы.ГруппаЦельОбращенияЛево;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация;
		КонецЕсли;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение;
	КонецЕсли;
	УстановитьЗаголовокФормы();
	УправлениеВидимостьюКоманд();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтИТС(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://its.bas-soft.eu/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУправлениеРегламентными(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://its.bas-soft.eu/");
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ПараметрыПодготовкиПисьма = 0 Тогда
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭП) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбрана учетная запись электронной почты для отправки письма';uk='Не вибраний обліковий запис електронної пошти для відправки листа'"),, "УчетнаяЗаписьЭППредставление");
			Возврат;
		КонецЕсли;
		НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗаписьЭП));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбранная учетная запись не доступна для отправки писем';uk='Вибраний обліковий запис не доступний для відправки листів'"),, "УчетнаяЗаписьЭППредставление");
			Возврат;
		Иначе
			Результат = ВыполнитьОтправкуСервер();
			Если Результат = "" Тогда
				ПоказатьОповещениеПользователя(НСтр("ru='Письмо отправлено!';uk='Лист відправлено!'"),,,БиблиотекаКартинок.Информация32);
			Иначе
				ПоказатьПредупреждение(Неопределено, Результат);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыПодготовкиПисьма = 1 Тогда
		
		Сообщение = Новый ПочтовоеСообщение;
		Сообщение.Текст = ИтоговыйТекстПисьма.ПолучитьТекст();
		Сообщение.Тема =СокрЛП(ЦельОбращения);
		Сообщение.Получатели.Добавить("hotline@bas-soft.eu");
		Для Каждого Вложение Из Вложения Цикл
			Сообщение.Вложения.Добавить(ПолучитьИзВременногоХранилища(Вложение.Адрес), Вложение.Представление);
		КонецЦикла;
		Сообщение.Вложения.Добавить(ПолучитьИзВременногоХранилища(АдресТехническогоФайла), "TehInfo.xml");
		
		Почта = Новый Почта;

		Попытка
			Почта.Подключиться();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;

		Попытка
			Почта.Послать(Сообщение,Ложь);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки; 

		Почта.Отключиться();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПрикрепитьФайлРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресВременногоХранилищаФайла = "";
	ПолноеИмяФайла = "";
	НачатьПомещениеФайла(
		Новый ОписаниеОповещения("ПрикрепитьФайлЗавершение", ЭтотОбъект, Новый Структура("АдресВременногоХранилищаФайла, ПолноеИмяФайла", АдресВременногоХранилищаФайла, ПолноеИмяФайла)), 
		АдресВременногоХранилищаФайла,
		ПолноеИмяФайла,
		Истина,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлЗавершение(Результат, Адрес, ПолноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    Если Не Результат Тогда
        Возврат;
    КонецЕсли;
    
    Размер = РазмерФайлаВоВременномХранилище(Адрес);
    
    ИмяФайлаИнфо = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
    
    ВложенияСтрока = Вложения.Добавить();
    ВложенияСтрока.Ссылка = Неопределено;
    ВложенияСтрока.Представление = ИмяФайлаИнфо.Имя;
    ВложенияСтрока.ИмяФайла = ИмяФайлаИнфо.ИмяБезРасширения;
    ВложенияСтрока.ИмяФайлаНаДиске = ПолноеИмяФайла;
    
    ВложенияСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ИмяФайлаИнфо.Расширение);
    
    ВложенияСтрока.Размер = Размер;
    ВложенияСтрока.РазмерПредставление = РазмерСтрокой(Размер);
    ВложенияСтрока.Адрес = Адрес;
    
    ОтобразитьКоличествоФайлов();

КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиЭП(Команда)
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТехнологическийЖурнал(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://its.bas-soft.eu/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗамерПроизводительности(Команда)
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата("http://its.bas-soft.eu/");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыПодготовкиПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчетнаяЗаписьЭППредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыПодготовкиПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетнаяЗаписьЭППредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#Область УправлениеВидимостьюИДоступностью

&НаКлиенте
Процедура УправлениеВидимостью()

	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПустаяСсылка")
		ИЛИ ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеОПовышенииУдобстваРаботы;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ПожеланиеПоРазвитиюПрограммы;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаДопКонтакты;
		Иначе
			Элементы.ГруппаДопПояснения.ТекущаяСтраница = Элементы.ГруппаПустая;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ВопросОРаботеСПрограммой;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.СообщениеОПроблемахСБыстродействием;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		Элементы.ЦелиОбращения.ТекущаяСтраница = Элементы.ОбращениеПоИнымПричинам;
	КонецЕсли;
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПрикрепитьФайл = НСтр("ru='Вы можете прикрепить к письму файлы с информацией об ошибке, например картинку экрана';uk='Ви можете прикріпити до листа файли з інформацією про помилку, наприклад картинку екрану'");
	Иначе
		ТекстПрикрепитьФайл = НСтр("ru='Вы можете прикрепить к письму файлы с дополнительной информацией';uk='Ви можете прикріпити до листа файли з додатковою інформацією'");
	КонецЕсли;
	
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКоманд()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТехническаяИнформация Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыТехИнфо;
		Элементы.ТехИнфоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Обращение Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращение;
		Элементы.ОбращениеДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст Тогда
		Элементы.ГруппаПанелей.ТекущаяСтраница = Элементы.КомандыОбращениеОтправить;
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ИтоговыйТекст Тогда
		Если ПараметрыПодготовкиПисьма = 0 Тогда
			Элементы.УчетнаяЗаписьЭППредставление.Доступность = Истина;
		Иначе
			Элементы.УчетнаяЗаписьЭППредставление.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТекстаПисьма

&НаСервере
Процедура СформироватьТекстПисьма()

	ИмяФайлаXML = КаталогВременныхФайлов() + "TehInfo.xml";
	ТекстФайлаXML = Новый ЗаписьXML;
	ТекстФайлаXML.ОткрытьФайл(ИмяФайлаXML);
	ТекстФайлаXML.ЗаписатьОбъявлениеXML();
	ТекстФайлаXML.ЗаписатьНачалоЭлемента(НСтр("ru='Корневой';uk='Кореневий'"));
	
	//Формирование основного текста письма
	ТекстПисьма = НСтр("ru='Тема:';uk='Тема:'") + " " + ЦельОбращения + Символы.ПС
		+ НСтр("ru='Контактные данные:';uk='Контактні дані:'") + " " + СокрЛП(ИмяОтправителя) + НСтр("ru=', ответ прошу прислать на адрес';uk=', відповідь прошу надіслати на адресу'") + " " + СокрЛП(EMailОтправителяДляОтвета) + Символы.ПС
		+ НСтр("ru='Регион/город:';uk='Регіон/місто:'") + " " + СокрЛП(РегионИГородОтправителя) + Символы.ПС
		+ НСтр("ru='Рег. номер:';uk='Реєстр. номер:'") + " " + СокрЛП(РегНомер) + НСтр("ru=', продукт зарегистрирован на';uk=', продукт зареєстрований на'") + " " + СокрЛП(Организация) + Символы.ПС + Символы.ПС
		+ НСтр("ru='Текст обращения:';uk='Текст звернення:'") + Символы.ПС + Символы.ПС;
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ЦельОбращения), НСтр("ru='ЦельОбращения';uk='ЦельОбращения'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(ИмяОтправителя), НСтр("ru='ИмяОтправителя';uk='ИмяОтправителя'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(EMailОтправителяДляОтвета), НСтр("ru='EMailОтправителяДляОтвета';uk='EMailОтправителяДляОтвета'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегионИГородОтправителя), НСтр("ru='РегионИГородОтправителя';uk='РегионИГородОтправителя'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(РегНомер), НСтр("ru='РегНомер';uk='РегНомер'"));
	ЗаписатьXML(ТекстФайлаXML, СокрЛП(Организация), НСтр("ru='Организация';uk='Організація'"));
	Если ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОбОшибке") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(СообщениеОбОшибкеОписаниеОшибки) + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОбОшибкеОписаниеОшибки), НСтр("ru='СообщениеОбОшибкеОписаниеОшибки';uk='СообщениеОбОшибкеОписаниеОшибки'"));
		Если СообщениеОбОшибкеГдеВоспроизводится = 0 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru='Согласно указанной последовательности действий ошибку можно воспроизвести на Демо-базе';uk='Відповідно до зазначеної послідовності дій помилку можливо відтворити на Демо-базі'")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru='На Демо-базе';uk='На Демо-базі'"), НСтр("ru='ОшибкаВоспроизводится';uk='ОшибкаВоспроизводится'"));
		ИначеЕсли СообщениеОбОшибкеГдеВоспроизводится = 1 Тогда
			ТекстПисьма = ТекстПисьма + Символы.ПС
			+ НСтр("ru='Согласно указанной последовательности действий ошибка воспроизводится на моей базе, которую могу предоставить в случае необходимости';uk='Відповідно до зазначеної послідовності дій помилка відтворюється на моїй базі, яку можу надати в разі необхідності'")
			+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru='На базе пользователя';uk='На базі користувача'"), НСтр("ru='ОшибкаВоспроизводится';uk='ОшибкаВоспроизводится'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеПоРазвитиюПрограммы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru='При планировании работ по развитию программы прошу учесть, что следующие задачи не удается решить с помощью существующего в данный момент функционала';uk='При плануванні робіт з розвитку програми прошу врахувати, що наступні задачі не вдається вирішити за допомогою існуючого в даний момент функціоналу'")
			+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюОписаниеЗадач), НСтр("ru='ПожеланияПоРазвитиюОписаниеЗадач';uk='ПожеланияПоРазвитиюОписаниеЗадач'"));
		Если ЗначениеЗаполнено(ПожеланияПоРазвитиюУдачныеПримеры) Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Мне известны следующие удачные примеры реализации указанных задач:';uk='Мені відомі такі вдалі приклади реалізації зазначених задач:'")+ Символы.ПС + Символы.ПС
			+ СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры)
			+ Символы.ПС+ Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(ПожеланияПоРазвитиюУдачныеПримеры), НСтр("ru='ПожеланияПоРазвитиюУдачныеПримеры';uk='ПожеланияПоРазвитиюУдачныеПримеры'"));
		КонецЕсли;
		Если ПожеланияПоРазвитиюГотовДатьПояснения Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='При необходимости могу дать дополнительные пояснения по указанным задачам';uk='При необхідності можу дати додаткові пояснення щодо зазначених задач'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Да';uk='Так'"), НСтр("ru='ГотовДатьПояснения';uk='ГотовДатьПояснения'"));
			Если ЗначениеЗаполнено(ДругиеСпособыСвязи) Тогда
				ТекстПисьма = ТекстПисьма
				+ НСтр("ru='Мои дополнительные контакты:';uk='Мої додаткові контакти:'") + " " + СокрЛП(ДругиеСпособыСвязи) + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(ДругиеСпособыСвязи), НСтр("ru='ДопКонтакты';uk='ДопКонтакти'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ПожеланиеОПовышенииУдобстваРаботы") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Работа со следующим функицоналом вызывает трудности:';uk='Робота з наступним функицоналом викликає труднощі:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыЧтоВызываетТрудности) + Символы.ПС + Символы.ПС
			+ НСтр("ru='Удобным видится следующее поведение программы:';uk='Зручним бачиться наступна поведінка програми:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(УдобствоРаботыОжидаемоеПоведение) + Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыЧтоВызываетТрудности), НСтр("ru='УдобствоРаботыЧтоВызываетТрудности';uk='УдобствоРаботыЧтоВызываетТрудности'"));
			ЗаписатьXML(ТекстФайлаXML, СокрЛП(УдобствоРаботыОжидаемоеПоведение), НСтр("ru='УдобствоРаботыОжидаемоеПоведение';uk='УдобствоРаботыОжидаемоеПоведение'"));
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.СообщениеОПроблемахСБыстродействием") Тогда
		ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Выполнение следующей последовательности действий приводит к недопустимому снижению быстродействия программы:';uk='Виконання наступної послідовності дій призводить до неприпустимого зниження швидкодії програми:'") + Символы.ПС + Символы.ПС
			+ СокрЛП(СообщениеОПроблемахСБыстродействиемОписание) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(СообщениеОПроблемахСБыстродействиемОписание), НСтр("ru='СообщениеОПроблемахСБыстродействиемОписание';uk='СообщениеОПроблемахСБыстродействиемОписание'"));
		Если СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='В случае необходимости могу предоставить базу для анализа в отдел технической поддержки';uk='У разі потреби можу надати базу для аналізу у відділ технічної підтримки'")
			+ Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Да';uk='Так'"), НСтр("ru='СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу';uk='СообщениеОПроблемахСБыстродействиемГотовПредоставитьБазу'"));
		КонецЕсли;
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru='Дополнительная информация:';uk='Додаткова інформація:'") + Символы.ПС;
		Если НЕ ЭтоФайловаяБаза Тогда
			Если СообщениеОПроблемахСБыстродействиемТипСУБД = 0 Тогда
				НазваниеСУБД = "MS SQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 1 Тогда
				НазваниеСУБД = "PostgreSQL";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 2 Тогда
				НазваниеСУБД = "IBM DB2";
			ИначеЕсли СообщениеОПроблемахСБыстродействиемТипСУБД = 3 Тогда
				НазваниеСУБД = "Oracle";
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru='Тип СУБД:';uk='Тип СУБД:'") + " " + НазваниеСУБД + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НазваниеСУБД, НСтр("ru='ТипСУБД';uk='ТипСУБД'"));
			Если АнкетаКоличествоБазНаСУБД > 0 Тогда
				ТекстПисьма = ТекстПисьма 
				+ НСтр("ru='Количество баз, одновременно работающих на СУБД:';uk='Кількість баз, що одночасно працюють на СУБД:'") + " " + АнкетаКоличествоБазНаСУБД + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, АнкетаКоличествоБазНаСУБД, НСтр("ru='КоличествоБазНаСУБД';uk='КоличествоБазНаСУБД'"));
			КонецЕсли;
			Если АнкетаСерверБДСерверПриложений = 0 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийРаздельно.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 1 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийВместе.Заголовок;
			ИначеЕсли АнкетаСерверБДСерверПриложений = 2 Тогда
				РасположениеСерверовБДИПриложений = Элементы.АнкетаСерверБДСерверПриложенийНеИзвестно.Заголовок;
			КонецЕсли;
			ТекстПисьма = ТекстПисьма 
			+ НСтр("ru='Расположение сервера базы данных и сервера приложений:';uk='Розташування сервера бази даних, сервера додатків:'") + " " + РасположениеСерверовБДИПриложений + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, РасположениеСерверовБДИПриложений, НСтр("ru='РасположениеСерверовБДИПриложений';uk='РасположениеСерверовБДИПриложений'"));
			Если ЗначениеЗаполнено(АнкетаПараметрыПроцессораИПамяти) Тогда
				ТекстХарактеристики = НСтр("ru='Аппаратные характеристики сервера базы данных и сервера приложений:';uk='Апаратні характеристики сервера бази даних і сервера прикладних програм:'") + " " + СокрЛП(АнкетаПараметрыПроцессораИПамяти);
				ТекстПисьма = ТекстПисьма + ТекстХарактеристики + Символы.ПС;
				ЗаписатьXML(ТекстФайлаXML, СокрЛП(АнкетаПараметрыПроцессораИПамяти), НСтр("ru='ПараметрыПроцессораИПамятиСерверовБДИПриложений';uk='ПараметрыПроцессораИПамятиСерверовбдиприложений'"));
			КонецЕсли;
		КонецЕсли;
		Если СообщениеОПроблемахСБыстродействиемКоличествоПользователей > 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Количество одновременно работающих в базе пользователей в момент снижения быстродействия:';uk='Кількість одночасно працюючих в базі користувачів в момент зниження швидкодії:'") + " "
			+ СообщениеОПроблемахСБыстродействиемКоличествоПользователей + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, СообщениеОПроблемахСБыстродействиемКоличествоПользователей, НСтр("ru='КоличествоОдновременноРаботающихПользователей';uk='КоличествоОдновременноРаботающихпользователей'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПриОтключенииРегламентных = 0 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Снижение быстродействия наблюдается также при отключенных регламентных заданиях';uk='Зниження швидкодії спостерігається також при відключених регламентних завданнях'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru='ЗамедлениеПриОтключенныхРегламентныхЗаданиях';uk='ЗамедлениеПриОтключенныхРегламентныхзаданиях'"));
		ИначеЕсли АнкетаЗамедлениеПриОтключенииРегламентных = 1 Тогда
			ЗамедлениеПриОтключенныхРегламентных = Элементы.АнкетаЗамедлениеПриОтключенииРегламентныхНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='При отключенных регламентных заданиях снижение быстродействия не наблюдается';uk='При відключених регламентних завданнях зниження швидкодії не спостерігається'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПриОтключенныхРегламентных, НСтр("ru='ЗамедлениеПриОтключенныхРегламентныхЗаданиях';uk='ЗамедлениеПриОтключенныхРегламентныхзаданиях'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодПолнымиПравами = 0 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Снижение быстродействия наблюдается при работе с полными правами';uk='Зниження швидкодії спостерігається при роботі з повними правами'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru='ЗамедлениеПодПолнымиПравами';uk='ЗамедлениеПодПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодПолнымиПравами = 1 Тогда
			ЗамедлениеПодПолнымиПравами = Элементы.АнкетаЗамедлениеПодПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='При работе с полными правами снижение быстродействия не наблюдается';uk='При роботі з повними правами зниження швидкодії не спостерігається'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодПолнымиПравами, НСтр("ru='ЗамедлениеПодПолнымиПравами';uk='ЗамедлениеПодПолнымиПравами'"));
		КонецЕсли;
		Если АнкетаЗамедлениеПодНеПолнымиПравами = 0 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиДа.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Снижение быстродействия наблюдается при работе с неполными правами';uk='Зниження швидкодії спостерігається при роботі з неповними правами'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru='ЗамедлениеПодНеПолнымиПравами';uk='ЗамедлениеПодНеПолнымиПравами'"));
		ИначеЕсли АнкетаЗамедлениеПодНеПолнымиПравами = 1 Тогда
			ЗамедлениеПодНеПолнымиПравами = Элементы.АнкетаЗамедлениеПодНеПолнымиПравамиНет.Заголовок;
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='При работе с неполными правами снижение быстродействия не наблюдается';uk='При роботі з неповними правами зниження швидкодії не спостерігається'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ЗамедлениеПодНеПолнымиПравами, НСтр("ru='ЗамедлениеПодНеПолнымиПравами';uk='ЗамедлениеПодНеПолнымиПравами'"));
		КонецЕсли;
		Если ВключеноОграничениеДоступаНаУровнеЗаписей Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='В базе включено ограничение доступа на уровне записей';uk='В базі включено обмеження доступу на рівні записів'") + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, ?(ВключеноОграничениеДоступаНаУровнеЗаписей, НСтр("ru='Да';uk='Так'"), НСтр("ru='Нет';uk='Ні'")), НСтр("ru='ВключеноОграничениеДоступаНаУровнеЗаписей';uk='ВключеноОграничениеДоступаНаУровнезаписей'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ВопросОРаботеСПрограммой") Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru='При работе с программой возник следующий вопрос:';uk='При роботі з програмою виникло наступне питання:'") + Символы.ПС + Символы.ПС
		+ СокрЛП(ВопросОРаботеСПрограммойФормулировка) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ВопросОРаботеСПрограммойФормулировка), НСтр("ru='ВопросОРаботеСПрограммой';uk='ВопросОРаботеСПрограммой'"));
		Если ВопросОРаботеСПрограммойЧтениеДокументации = 0 Тогда
			ТекстПисьма = ТекстПисьма
			+ НСтр("ru='Перед написанием письма мною были изучены материалы в документации, встроенной справке,
            |статьях ИТС, однако полученной информации для решения моих вопросов не хватило'
            |;uk='Перед написанням листа мною були вивчені матеріали в документації, вбудованій довідці,
            |статтях ІТС, однак отриманої інформації для вирішення моїх запитань не вистачило'")+Символы.ПС + Символы.ПС;
			ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Нет';uk='Ні'"), НСтр("ru='ДостаточностьИнформацииВДокументации';uk='ДостаточностьИнформацииВДокументации'"));
		КонецЕсли;
	ИначеЕсли ЦельОбращения = ПредопределенноеЗначение("Перечисление.ЦелиОбращенияВТехподдержку.ОбращениеПоИнымПричинам") Тогда
		ТекстПисьма = ТекстПисьма
			+ СокрЛП(ОбращениеПоИнымПричинамТекстОбращения) +Символы.ПС+Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, СокрЛП(ОбращениеПоИнымПричинамТекстОбращения), НСтр("ru='ОбращениеПоИнымПричинамТекстОбращения';uk='ОбращениеПоИнымПричинамТекстОбращения'"));
	КонецЕсли;
	
	Если НуженДоступНаФТП Тогда
		ТекстПисьма = ТекстПисьма
		+ НСтр("ru='Также прошу предоставить доступ на FTP-сервер для отправки больших файлов';uk='Також прошу надати доступ на FTP-сервер для відправки великих файлів'") + Символы.ПС + Символы.ПС;
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Да';uk='Так'"), НСтр("ru='НуженДоступНаФТП';uk='НуженДоступНаФТП'"));
	КонецЕсли;
	
	//добавляем техническую информацию
	СистемИнфо = Новый СистемнаяИнформация;
	
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияПриложения, НСтр("ru='Версия1СПредприятия8';uk='Версія1СПідприємства8'"));
	ЗаписатьXML(ТекстФайлаXML, НазваниеКонфигурации, НСтр("ru='Конфигурация';uk='Конфігурація'"));
	ЗаписатьXML(ТекстФайлаXML, ВерсияКонфигурации, НСтр("ru='ВерсияКонфигурации';uk='ВерсіяКонфігурації'"));
	ЗаписатьXML(ТекстФайлаXML, ПоставщикКонфигурации, НСтр("ru='ПоставщикКонфигурации';uk='ПоставщикКонфигурации'"));
	Если ЭтоФайловаяБаза Тогда
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Файловый';uk='Файловий'"), НСтр("ru='ВариантРаботы';uk='ВариантРаботы'"));
	Иначе
		ЗаписатьXML(ТекстФайлаXML, НСтр("ru='Клиент-серверный';uk='Клієнт-Серверний'"), НСтр("ru='ВариантРаботы';uk='ВариантРаботы'"));
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения"   ,"");
	ДопПараметры.Вставить("Логин"         , "");
	ДопПараметры.Вставить("Пароль"        , "");
	ДопПараметры.Вставить("ПарольЗаполнен", Ложь);
	
	ДопПараметрыОтправкиСообщения = ИнтернетПоддержкаПользователейВызовСервера.ДопПараметрыОтправкиСообщения(ДопПараметры);
	Если ЗначениеЗаполнено(ДопПараметрыОтправкиСообщения) Тогда
		ДопТехИнформация = ДопПараметрыОтправкиСообщения.Вложения[0].Текст;
		ДопТехИнформация = Лев(ДопТехИнформация, СтрНайти(ДопТехИнформация, "Идентификатор конфигурации:")-1);
	Иначе
		ДопТехИнформация = "";
	КонецЕсли;
	ТекстПисьма = ТекстПисьма + Символы.ПС + ДопТехИнформация;
	ЗаписатьXML(ТекстФайлаXML, ДопТехИнформация, НСтр("ru='Дополнительно';uk='Додатково'"));
	
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru='Процессор:';uk='Процесор:'") + " " + СистемИнфо.Процессор;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.Процессор, НСтр("ru='Процессор';uk='Процесор'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru='Объем оперативной памяти (МБайт):';uk='Об''єм оперативної пам''яті (МБайт):'") + " " + СистемИнфо.ОперативнаяПамять;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ОперативнаяПамять, НСтр("ru='ОЗУ';uk='ОЗП'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru='Тип платформы:';uk='Тип платформи:'") + " " + СистемИнфо.ТипПлатформы;
	ЗаписатьXML(ТекстФайлаXML, Строка(СистемИнфо.ТипПлатформы), НСтр("ru='ТипПлатформы';uk='ТипПлатформы'"));
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru='Версия ОС:';uk='Версія ОС:'") + " " + СистемИнфо.ВерсияОС;
	ЗаписатьXML(ТекстФайлаXML, СистемИнфо.ВерсияОС, НСтр("ru='ВерсияОС';uk='ВерсіяОС'"));
	
	ИтоговыйТекстПисьма.УстановитьТекст(ТекстПисьма);
	
	ТекстФайлаXML.ЗаписатьКонецЭлемента();
	ТекстФайлаXML.Закрыть();
	АдресТехническогоФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаXML), УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПисьма

&НаСервере
Процедура ЗагрузитьСписокАдресовДляОтправки()
	
	Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора.Очистить();
	ДоступныеДляОтправкиУчетныеЗаписи.Очистить();
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
		Элементы.УчетнаяЗаписьЭППредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	Для Каждого Элемент Из ДоступныеДляОтправкиУчетныеЗаписи Цикл
		Элемент.АдресЭлектроннойПочты = Элемент.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РазмерФайлаВоВременномХранилище(АдресВременногоХранилищаФайла)
	
	Попытка
		Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	Исключение
		Возврат 0;
	КонецПопытки;
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Данные.Размер();
	
КонецФункции

&НаКлиенте
Функция РазмерСтрокой(Размер)
	
	Если Размер = 0 Тогда
		Возврат "-";
	ИначеЕсли Размер < 1024 * 10 Тогда // < 10 Кб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Кб';uk='%1 Кб'"),
			Формат(Макс(1, Окр(Размер / 1024, 1, 1)), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 Тогда // < 1 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Кб';uk='%1 Кб'"),
			Формат(Цел(Размер / 1024), "ЧГ=0"));
	ИначеЕсли Размер < 1024 * 1024 * 10 Тогда // < 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Мб';uk='%1 Мб'"),
			Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	Иначе // >= 10 Мб
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 Мб';uk='%1 Мб'"),
			Формат(Цел(Размер / 1024 / 1024), "ЧГ=0"));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуСервер()
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		ИдентификаторПисьма = ВыполнитьОтправкуПисьма(ПисьмоОбъект);
	Исключение
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	Возврат "";
	
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено)
	
	ПараметрыПисьма = Новый Структура;

	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес,Представление", "hotline@bas-soft.eu", "hotline@bas-soft.eu"));
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	ПараметрыПисьма.Вставить("Тема", ЦельОбращения);
	ПараметрыПисьма.Вставить("Тело", ИтоговыйТекстПисьма.ПолучитьТекст());
	ПараметрыПисьма.Вставить("Кодировка", КодировкаТекста.ANSI);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	СоответствиеВложения = Новый Соответствие;
	Для Каждого Вложение Из Вложения Цикл
		СоответствиеВложения.Вставить(Вложение.Представление, ПолучитьИзВременногоХранилища(Вложение.Адрес));
	КонецЦикла;
	СоответствиеВложения.Вставить("TehInfo.xml", ПолучитьИзВременногоХранилища(АдресТехническогоФайла));
		
	ПараметрыПисьма.Вставить("Вложения", СоответствиеВложения);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭП, ПараметрыПисьма,Соединение);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОтобразитьКоличествоФайлов()
	
	Если Вложения.Количество() > 0 Тогда
		Элементы.ВложенияПредставление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Прикрепленные файлы (%1)';uk='Прикріплені файли (%1)'"),
			Вложения.Количество());
	Иначе
		Элементы.ВложенияПредставление.Заголовок = НСтр("ru='Прикрепленные файлы';uk='Прикріплені файли'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	СтрокаЗаголовка = НСтр("ru='Помощник обращения в техническую поддержку (%1)';uk='Помічник звернення в технічну підтримку (%1)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, СокрЛП(ТекущаяСтраница.Заголовок));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияКонстант()
	
	Константы.РегистрационныйНомерПрограммы.Установить(РегНомер);
	Константы.ОрганизацияНаКоторуюЗарегистрированаПрограмма.Установить(СокрЛП(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюОбАктуальностиВерсииКонфигурации()
	
	ПараметрыФайла = Новый Структура("ПараметрыФайлаПроверкиОбновления", Неопределено);
	ТекущаяВерсияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	ПараметрыФайла.ПараметрыФайлаПроверкиОбновления = ПолучитьФайлПроверкиНаличияОбновлений();
	
	Если ТипЗнч(ПараметрыФайла.ПараметрыФайлаПроверкиОбновления) = Тип("Строка") Тогда
		АктуальнаяВерсияКонфигурации = НСтр("ru='Неопределено';uk='Невизначено'");
		СостояниеОбновленияКонфигурации = СокрЛП(ПараметрыФайла.ПараметрыФайлаПроверкиОбновления);
		Элементы.ДекорацияАктуально.Видимость = Ложь;
		Элементы.ДекорацияЕстьПроблемы.Видимость = Истина;
		Элементы.СостояниеОбновленияКонфигурации.Гиперссылка = Ложь;
	Иначе
		АктуальнаяВерсияКонфигурации = ПараметрыФайла.ПараметрыФайлаПроверкиОбновления.Version;
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияКонфигурации, АктуальнаяВерсияКонфигурации) >= 0 Тогда  
			СостояниеОбновленияКонфигурации = НСтр("ru='Обновление не требуется: последняя версия конфигурации уже установлена.';uk='Оновлення не потрібно: остання версія конфігурації вже встановлена.'");
			Элементы.ГруппаОбновлениеКонфигурацииАктуальность.ТекущаяСтраница = Элементы.ОбновлениеКонфигурацииАктуально;
			Элементы.СостояниеОбновленияКонфигурации.Гиперссылка = Ложь;
		Иначе
			СостояниеОбновленияКонфигурации = НСтр("ru='Требуется обновление конфигурации.';uk='Потрібне оновлення конфігурації.'");
			Элементы.ГруппаОбновлениеКонфигурацииАктуальность.ТекущаяСтраница = Элементы.ОбновлениеКонфигурацииЕстьПроблемы;
			Элементы.ДекорацияАктуально.Видимость = Ложь;
			Элементы.ДекорацияЕстьПроблемы.Видимость = Истина;
			Элементы.СостояниеОбновленияКонфигурации.Гиперссылка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыРаботы = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	РекомендуемаяВерсияПлатформы = ПараметрыРаботы.МинимальноНеобходимаяВерсияПлатформы;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияПлатформы, РекомендуемаяВерсияПлатформы) >= 0 Тогда
		СостояниеОбновленияПлатформы = НСтр("ru='Рекомендуемая версия платформы уже установлена.';uk='Рекомендована версія платформи вже встановлена.'");
		Элементы.ГруппаОбновлениеПлатформыАктуальность.ТекущаяСтраница = Элементы.ОбновлениеПлатформыАктуально;
	Иначе
		СостояниеОбновленияПлатформы = НСтр("ru='Требуется обновление платформы.';uk='Потрібне оновлення платформи.'");
		Элементы.ГруппаОбновлениеПлатформыАктуальность.ТекущаяСтраница = Элементы.ОбновлениеПлатформыЕстьПроблемы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлПроверкиНаличияОбновлений()
	
	ФайлПроверки = Неопределено;
	
	#Если Не ВебКлиент Тогда
		
	// Нужно для исключения кода из платформенной проверки синхронных вызовов.
	// Данная функция и так не вызывается при работе в вебклиенте.
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления;
	
	// при необходимости, создаем каталог для временного файла
	КаталогВременногоФайла = ПолучитьКаталогФайла(ВременныйФайл);
	КаталогВременногоФайлаОбъект = Новый Файл(КаталогВременногоФайла);
	Если НЕ КаталогВременногоФайлаОбъект.Существует() Тогда
		Попытка 
			СоздатьКаталог(КаталогВременногоФайла);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = НСтр("ru='Не удалось создать временный каталог для проверки наличия обновлений.
                |%1'
                |;uk='Не вдалося створити тимчасовий каталог для перевірки наявності оновлень.
                |%1'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, 
				КраткоеПредставлениеОшибки(ИнфоОбОшибке));
			Возврат СообщениеОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
	// получаем сам файл из Интернета
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления + ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ВременныйФайл), Неопределено, ВременныйФайл)));
		
	Если Результат.Статус <> Истина Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось проверить наличие обновлений.
                |%1'
                |;uk='Не вдалося перевірити наявність оновлень.
                |%1'"), Результат.СообщениеОбОшибке);
		Возврат СообщениеОбОшибке;
	КонецЕсли;																
	
	ФайлПроверки = ПараметрыДистрибутива(ВременныйФайл);
	
	КаталогФайловОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().КаталогФайловОбновления; 
	Если НЕ ПустаяСтрока(КаталогФайловОбновления) Тогда
		Попытка
			УдалитьФайлы(КаталогФайловОбновления, ПараметрыОбновления.ИмяФайлаПроверкиНаличияОбновления);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	#КонецЕсли

	Возврат ФайлПроверки;
	
КонецФункции

&НаКлиенте
Функция ПараметрыДистрибутива(Знач ИмяФайла)
	
	ПарКомпл = Неопределено;
	
	#Если Не ВебКлиент Тогда
		
	// Нужно для исключения кода из платформенной проверки синхронных вызовов.
	// Данная функция и так не вызывается при работе в вебклиенте.
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru='Файл описания обновлений не получен';uk='Файл опису оновлень не отриманий'");
	КонецЕсли;	
	
	ТД = Новый ТекстовыйДокумент; 
	ТД.Прочитать(Файл.ПолноеИмя);
	ПарКомпл = Новый Структура();
	Для Н = 1 По ТД.КоличествоСтрок() Цикл
		СтрТмп = НРег(СокрЛП(ТД.ПолучитьСтроку(Н)));
		Если ПустаяСтрока(СтрТмп) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрНайти(СтрТмп,"fromversions=")>0 Тогда
			СтрТМП = СокрЛП(Сред(СтрТмп,Найти(СтрТмп,"fromversions=")+СтрДлина("fromversions=")));
			СтрТМП = ?(Лев(СтрТМП,1)=";","",";") + СтрТмп + ?(Прав(СтрТМП,1)=";","",";");
			ПарКомпл.Вставить("FromVersions",СтрТМП);
		ИначеЕсли СтрНайти(СтрТмп,"version=")>0 Тогда
			ПарКомпл.Вставить("Version",Сред(СтрТмп,Найти(СтрТмп,"version=")+СтрДлина("version=")));
		ИначеЕсли СтрНайти(СтрТмп,"updatedate=")>0 Тогда
			// формат даты = Дата, 
			СтрТмп = Сред(СтрТмп,Найти(СтрТмп,"updatedate=")+СтрДлина("updatedate="));
			Если СтрДлина(СтрТмп)>8 Тогда
				Если СтрНайти(СтрТмп,".")=5 Тогда
					// дата в формате  ГГГГ.ММ.ДД
					СтрТмп = СтрЗаменить(СтрТмп,".","");
				ИначеЕсли СтрНайти(СтрТмп,".")=3 Тогда
					// дата в формате ДД.ММ.ГГГГ
					СтрТмп = Прав(СтрТмп,4)+Сред(СтрТмп,4,2)+Лев(СтрТмп,2);
				Иначе 
					// дата в формате ГГГГММДД
				КонецЕсли;
			КонецЕсли;
			ПарКомпл.Вставить("UpdateDate",Дата(СтрТмп));
		Иначе
			Возврат НСтр("ru='Неверный формат сведений о наличии обновлений';uk='Невірний формат відомостей про наявність оновлень'");
		КонецЕсли;
	КонецЦикла;
	
	#КонецЕсли
	
	Возврат ПарКомпл;

КонецФункции

&НаКлиенте
Процедура ВложенияВыборРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата(ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры:
//  ПутьКФайлу  - Строка - путь к файлу.
//
// Возвращаемое значение:
//   Строка   - каталог файла
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу)
	
	ПозицияСимвола = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

ВыполняетсяУдаление = Ложь;

////////////////////////////////////////////////////////////////////////////////
// Подключаемое оборудование1С: ККМ-Offline вызов сервера: Обработчик 1С: ККМ-offline.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	КаталогВыгрузки  = Неопределено;
	ИмяФайлаПрайсЛиста = Неопределено;
	КаталогЗагрузки   = Неопределено;
	ИмяЗагружаемогоФайла = Неопределено;
	КоличествоЭлементовВПакете = Неопределено;
	
	Параметры.Свойство("КаталогВыгрузки",  КаталогВыгрузки);
	Параметры.Свойство("ИмяФайлаПрайсЛиста",	ИмяФайлаПрайсЛиста);
	Параметры.Свойство("КаталогЗагрузки",   КаталогЗагрузки);
	Параметры.Свойство("ИмяЗагружаемогоФайла",  ИмяЗагружаемогоФайла);
	Параметры.Свойство("КоличествоЭлементовВПакете",  КоличествоЭлементовВПакете);
	
	Если КаталогВыгрузки  = Неопределено
	 Или КаталогЗагрузки  = Неопределено
	 Или ИмяФайлаПрайсЛиста  = Неопределено
	 Или ИмяЗагружаемогоФайла  = Неопределено
	 Или КоличествоЭлементовВПакете  = Неопределено Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
        |Для корректной работы устройства необходимо задать параметры его работы.'
        |;uk='Не настроєні параметри пристрою.
        |Для коректної роботи пристрою необхідно задати параметри його роботи.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Неопределено;
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Функция начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
							 ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
							 
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline
	Если Команда = "ВыгрузитьТовары" ИЛИ Команда = "UploadGoods" Тогда
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(Параметры, ВыходныеПараметры, ВходныеПараметры, ЧастичнаяВыгрузка);
	
	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьОтчет" ИЛИ Команда = "DownloadTheReport" Тогда
		Результат = ЗагрузитьОтчет(Параметры, ВыходныеПараметры);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьРасширенныйОтчет" Тогда
		Результат = ЗагрузитьРасширенныйОтчет(Параметры, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета
	ИначеЕсли Команда = "ОтчетЗагружен" ИЛИ Команда = "ReportLoaded" Тогда
		Результат = ОтчетЗагружен(Параметры, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки
	ИначеЕсли Команда = "ВыгрузитьНастройки" ИЛИ Команда = "UploadSettings" Тогда
	
		СтруктураНастроек = ВходныеПараметры;
		Результат = ВыгрузитьНастройки(Параметры, ВыходныеПараметры, СтруктураНастроек);
		
	// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" ИЛИ Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" ИЛИ Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Выгрузка настроек в ККМ Offline
	ИначеЕсли Команда = "ВыгрузитьНастройки" ИЛИ Команда = "UploadSettings" Тогда
	
		СтруктураНастроек = ВходныеПараметры;
		НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, СтруктураНастроек);
		
	ИначеЕсли Команда = "ВыгрузитьТовары" ИЛИ Команда = "UploadGoods" Тогда
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, ВходныеПараметры, ЧастичнаяВыгрузка);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьОтчет" ИЛИ Команда = "DownloadTheReport" Тогда
		НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьРасширенныйОтчет" Тогда
		НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
	ИначеЕсли Команда = "РасширеннаяВыгрузка" ИЛИ Команда = "РасширеннаяВыгрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойВыгрузки();
		
	// Проверка возможности расширенной выгрузки отчета о продажах.
	ИначеЕсли Команда = "РасширеннаяЗагрузка" ИЛИ Команда = "РасширеннаяЗагрузка" Тогда
		Результат = ПроверитьВозможностьРасширеннойЗагрузки();
		
	// Определяет результат загрузки отчета
	ИначеЕсли Команда = "ОтчетЗагружен" ИЛИ Команда = "ReportLoaded" Тогда
		НачатьПометкуОтчетЗагружен(Параметры, ВыходныеПараметры);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыДрайвера

//ВЫГРУЗКА ТОВАРОВ

// Синхронно
Функция ВыгрузитьТовары(Параметры, ВыходныеПараметры, СтруктураПрайсЛиста, ЧастичнаяВыгрузка)
	
	Результат = Истина;
	Каталог = ДополнитьИмяКаталогаСлешем(Параметры.КаталогВыгрузки);
	ИмяФайла = Параметры.ИмяФайлаПрайсЛиста;
	КоличествоЭлементовВПакете = Параметры.КоличествоЭлементовВПакете;
	
	Файлы = НайтиФайлы(Каталог, ИмяФайла + "*.xml", Ложь);
	
	Если ЧастичнаяВыгрузка Тогда
	
		Для Каждого ТекФайл Из Файлы Цикл
			
			#Если ВебКлиент Тогда
				Содержимое = Неопределено;
				Отказ = Ложь;
				
				ПрочитатьТекстовыйДокумент(Отказ, ТекФайл.ПолноеИмя, Содержимое, ВыходныеПараметры);
				Если НЕ Отказ Тогда
					МассивФайлов = Новый Массив;
					МассивФайлов.Добавить(Содержимое);
					
					ОбработанностьПакетов = ПодключаемоеОборудование1СККМOfflineВызовСервера.ПакетыОбработаны(Истина, МассивФайлов, ВыходныеПараметры);
					Если Не ОбработанностьПакетов Тогда
						СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Не все файлы предыдущей выгрузки обработаны';uk='Не всі файли попереднього вивантаження оброблені'"));
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			#Иначе
				
				ЧтениеXML = Новый ЧтениеXML;
				Попытка
					ЧтениеXML.ОткрытьФайл(ТекФайл.ПолноеИмя);
					ЧтениеXML.Прочитать();
				Исключение
					Ошибка = ОписаниеОшибки();
					ТекстСообщения =  НСтр("ru='При чтении файла %ИмяФайла% произошла ошибка';uk='При читанні файлу %ИмяФайла% сталася помилка'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
					
					СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
					Результат = Ложь;
				КонецПопытки;
				
				Попытка
					ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
					ЧтениеXML.Закрыть();
				Исключение
					
					СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='При чтении файла произошла ошибка.';uk='При читанні файлу виникла помилка.'"));
					Возврат Ложь;
				КонецПопытки;
				
				Если НЕ (НЕ ОбъектXDTO.Свойства().Получить("Processed") = Неопределено И ЗначениеЗаполнено(ОбъектXDTO.Processed)) Тогда
					
					СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Не все файлы предыдущей выгрузки обработаны';uk='Не всі файли попереднього вивантаження оброблені'"));
					Возврат Ложь;
					
				КонецЕсли;
			#КонецЕсли
			
		КонецЦикла;
	
	КонецЕсли;
	
	УдалитьФайлы(Каталог, ИмяФайла + "*.xml");
	
	Если Параметры.КоличествоЭлементовВПакете = 0 Тогда
		
		ИмяФайла = Каталог + ИмяФайла + ".xml";
		
		ЗаписатьПрайсЛист(ИмяФайла, СтруктураПрайсЛиста, Результат, ВыходныеПараметры);
		
	Иначе
		
		МассивПакетов = РазбитьПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете);
		НомерПакета = 1;
		Для Каждого Пакет Из МассивПакетов Цикл
			
			Если НЕ Результат Тогда
				Прервать;
			КонецЕсли;
			
			ИмяФайлаНумерованный = Каталог + ИмяФайла + Формат(НомерПакета, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0")+".xml";
			ЗаписатьПрайсЛист(ИмяФайлаНумерованный, Пакет, Результат, ВыходныеПараметры);
			НомерПакета = НомерПакета + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Асинхронно
Процедура НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, ВходныеПараметры, ЧастичнаяВыгрузка)
	
	Каталог = ДополнитьИмяКаталогаСлешем(Параметры.КаталогВыгрузки);
	ИмяФайла = Параметры.ИмяФайлаПрайсЛиста;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("Каталог", Каталог);
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	ДополнительныеПараметры.Вставить("ВходныеПараметры", ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка", ЧастичнаяВыгрузка);
	
	Если ЧастичнаяВыгрузка Тогда
		
		Описание = Новый ОписаниеОповещения("ОповещениеПоискФайлов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПоискФайлов(Описание, Каталог, ИмяФайла + "*.*", Ложь);
		
	Иначе //Полная выгрузка, поиск файлов пропускается
		
		РезультатЧтенияФайлов = Новый Структура;
		РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Новый Массив);
		РезультатЧтенияФайлов.Вставить("Успешно", Истина);
		РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
		
		ОповещениеПродолжения = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, РезультатЧтенияФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	Каталог = ДополнительныеПараметры.Каталог;
	Параметры = ДополнительныеПараметры.Параметры;
	ИмяФайла = Параметры.ИмяФайлаПрайсЛиста;
	ЧастичнаяВыгрузка = ДополнительныеПараметры.ЧастичнаяВыгрузка;
	
	ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	ИменаФайлов = Новый Массив;
	
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		ИменаФайлов.Добавить(ТекФайл.ПолноеИмя);
	КонецЦикла;
	
	ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИменаФайлов, ОписаниеЗавершенияПолученияСодержания);
	
КонецПроцедуры

Процедура НачатьВыгрузкуТоваровПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если ДополнительныеПараметры.ЧастичнаяВыгрузка Тогда
		
		Если Результат.Успешно Тогда
			
			МассивФайлов = Новый Массив;
			Для Каждого СодержаниеФайла Из Результат.СодержаниеФайлов Цикл
				МассивФайлов.Добавить(СодержаниеФайла.ТекстСодержания);
			КонецЦикла;
			
			ОбработанностьПакетов = ПодключаемоеОборудование1СККМOfflineВызовСервера.ПакетыОбработаны(Истина, МассивФайлов, ВыходныеПараметры);
			
			Если ОбработанностьПакетов = Неопределено Тогда
				Отказ = Истина;
			ИначеЕсли Не ОбработанностьПакетов Тогда
				СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Не все файлы предыдущей выгрузки обработаны';uk='Не всі файли попереднього вивантаження оброблені'"));
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, Результат.ТекстОшибки);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ ДополнительныеПараметры.ЧастичнаяВыгрузка ИЛИ 
			(ДополнительныеПараметры.ЧастичнаяВыгрузка И НЕ Результат.СодержаниеФайлов.Количество() = 0) Тогда
			
			ОповещениеУдалениеФайлов = Новый ОписаниеОповещения("ОповещениеУдалениеФайлов", ЭтотОбъект, ДополнительныеПараметры);
			
			НачатьУдалениеФайлов(ОповещениеУдалениеФайлов,
				ДополнительныеПараметры.Каталог,
				ДополнительныеПараметры.Параметры.ИмяФайлаПрайсЛиста + "*.xml"
			);
			
		Иначе
			
			ОповещениеЗавершение = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершение);
			
		КонецЕсли;
	Иначе
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеУдалениеФайлов(ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершение = Новый ОписаниеОповещения("НачатьВыгрузкуТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеЗавершение);
	
КонецПроцедуры

Процедура НачатьВыгрузкуТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	Каталог = ДополнительныеПараметры.Каталог;
	Параметры = ДополнительныеПараметры.Параметры;
	ВходныеПараметры = ДополнительныеПараметры.ВходныеПараметры;
	КоличествоЭлементовВПакете = Параметры.КоличествоЭлементовВПакете;
	ИмяФайла = Параметры.ИмяФайлаПрайсЛиста;
	
	СтруктураПрайсЛиста = ВходныеПараметры[0];
	Результат = Истина;
	
	Если Параметры.КоличествоЭлементовВПакете = 0 Тогда
		
		ИмяФайла = Каталог + ИмяФайла + ".xml";
		
		ЗаписатьПрайсЛист(ИмяФайла, СтруктураПрайсЛиста, Результат, ВыходныеПараметры);
		
	Иначе
		
		МассивПакетов = РазбитьПрайсЛистПоПакетам(СтруктураПрайсЛиста, КоличествоЭлементовВПакете);
		НомерПакета = 1;
		Для Каждого Пакет Из МассивПакетов Цикл
			
			Если НЕ Результат Тогда
				Прервать;
			КонецЕсли;
			
			ИмяФайлаНумерованный = Каталог + ИмяФайла + Формат(НомерПакета, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0")+".xml";
			ЗаписатьПрайсЛист(ИмяФайлаНумерованный, Пакет, Результат, ВыходныеПараметры);
			НомерПакета = НомерПакета + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// ЗАГРУЗКА ОТЧЕТА О ПРОДАЖАХ

Процедура НачатьЗагрузкуОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Отказ = Ложь;
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	ИмяФайла = ИмяФайла + ".*";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	
	Описание = Новый ОписаниеОповещения("ОповещениеПоискФайловЗагрузкаОтчета", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(Описание, Каталог, ИмяФайла, Ложь);

КонецПроцедуры

Процедура ОповещениеПоискФайловЗагрузкаОтчета(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	Результат = Истина;
	
	Каталог  = ДополнительныеПараметры.Параметры.КаталогЗагрузки;
	ИмяФайла = ДополнительныеПараметры.Параметры.ИмяЗагружаемогоФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НайденныеФайлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Отчет = НайденныеФайлы[0];
	СодержимоеОтчета = Неопределено;
	
	ПолноеИмяФайла = Отчет.ПолноеИмя;
	
	ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ЗагрузкаОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ПолноеИмяФайла, ОписаниеЗавершенияПолученияСодержания);
	
КонецПроцедуры

Процедура ЗагрузкаОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Отказ = Ложь;
	СписокОтчетов = Неопределено;
	РезультатЗагрузки = Истина;
	
	Если Результат.Успешно И НЕ Результат.СодержаниеФайлов = Неопределено Тогда
		
		Если Результат.СодержаниеФайлов.Количество() Тогда
			
			СодержимоеОтчета = Результат.СодержаниеФайлов[0].ТекстСодержания;
			СписокОтчетов = ОбработатьФайлОтчет(Отказ, СодержимоеОтчета, ВыходныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, Результат.ТекстОшибки);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		РезультатЗагрузки = Ложь;
		
	Иначе
		
		МассивПроданныхТоваров = Новый Массив;
		
		Для Каждого Отчет Из СписокОтчетов Цикл
			
			Для Каждого Товар Из Отчет.Товары Цикл
				
				СтруктураЗаписи = Новый Структура("Код, Цена, Количество, Скидка, Сумма");
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Товар);
				
				Скидка = (Товар.Цена * Товар.Количество) - Товар.Сумма;
				СтруктураЗаписи.Скидка = ?(Скидка < 0, -Скидка, Скидка);
				
				МассивПроданныхТоваров.Добавить(СтруктураЗаписи);
			КонецЦикла;
			
		КонецЦикла;
		
		ВыходныеПараметры.Добавить(МассивПроданныхТоваров);
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", РезультатЗагрузки, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);

КонецПроцедуры

Процедура ЗаписатьПрайсЛист(ИмяФайла, СтруктураПрайсЛиста, Результат, ВыходныеПараметры)
	
	ТекстXML = МенеджерОборудованияСервисы.ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	Попытка
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
	Исключение
		Результат = Ложь;
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Не удалось записать файл.';uk='Не вдалося записати файл.'"));
	КонецПопытки;
	
КонецПроцедуры

Функция РазбитьПрайсЛистПоПакетам(ВходныеПараметры, КоличествоЭлементовВПакете)
	
	МассивПакетов = Новый Массив;
	
	СтруктураПрайсЛиста = ВходныеПараметры;
	
	КоличествоЭлементов = СтруктураПрайсЛиста.ГруппыТоваров.Количество() + СтруктураПрайсЛиста.Товары.Количество() + СтруктураПрайсЛиста.ДопСведения.Количество();
	КоличествоПакетов = ОпределитьКоличествоПакетов(КоличествоЭлементовВПакете, КоличествоЭлементов);
		
	Для НомерПакета = 1 По КоличествоПакетов Цикл
		
		СтруктураПакета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
		СтруктураПакета.ПолнаяЗагрузка = СтруктураПрайсЛиста.ПолнаяЗагрузка;
		
		Для НомерЭлемента = 1 По КоличествоЭлементовВПакете Цикл
			
			//Группы
			Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
				
				СтруктураПакета.ГруппыТоваров.Добавить(СтруктураПрайсЛиста.ГруппыТоваров[0]);
				СтруктураПрайсЛиста.ГруппыТоваров.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			//Товары
			Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
				
				СтруктураПакета.Товары.Добавить(СтруктураПрайсЛиста.Товары[0]);
				СтруктураПрайсЛиста.Товары.Удалить(0);
				Продолжить;
			КонецЕсли;
			
			//ДопСведения
			Если НЕ СтруктураПрайсЛиста.ДопСведения.Количество() = 0 Тогда
				
				СтруктураПакета.ДопСведения.Добавить(СтруктураПрайсЛиста.ДопСведения[0]);
				СтруктураПрайсЛиста.ДопСведения.Удалить(0);
				Продолжить;
			КонецЕсли;
		
		КонецЦикла;
		
		МассивПакетов.Добавить(СтруктураПакета);
		
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции

Функция ВыгрузитьНастройки(Параметры, ВыходныеПараметры, СтруктураНастроек)
	
	Результат = Истина;
	Каталог = ДополнитьИмяКаталогаСлешем(Параметры.КаталогВыгрузки);
	ИмяФайла = Параметры.ИмяФайлаНастроек;
	
	ИмяФайла = Каталог + ИмяФайла + ".xml";
	
	ТекстXML = МенеджерОборудованияСервисы.ПолучитьТекстXMLНастроек(СтруктураНастроек);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	Попытка
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
	Исключение
		Результат = Ложь;
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Не удалось записать файл.';uk='Не вдалося записати файл.'"));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьВыгрузкуНастроек(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, СтруктураНастроек)
	
	Результат = ВыгрузитьНастройки(Параметры, ВыходныеПараметры, СтруктураНастроек);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

//	Функция проверяет файл-отчет на обработанность, если файл не был обработан формирует из данных файла структуру описанную в стандарте
//	На веб-клиенте работает с файлом отчета, как с текстовым документом, на толстом и тонком клиенте через объект ЧтениеXML
//	В случае успешного выполнения вернет "Истина", иначе "Ложь"
//	Параметры:
//		- ОбъектДрайвера
//		- Параметры
//		- ПараметрыПодключения
//		- ВыходныеПараметры
Функция ЗагрузитьОтчет(Параметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	
	//	Получаем файл-отчет, если файла нет, возвращаем ошибку
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	Если Файлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Возврат Ложь;
	КонецЕсли;
	
	Отчет = Файлы[0];
	СодержимоеОтчета = Неопределено;
	
	Отказ = Ложь;
	ПолноеИмяФайла = Каталог + "\" + ИмяФайла;
	
	ПрочитатьТекстовыйДокумент(Отказ, ПолноеИмяФайла, СодержимоеОтчета, ВыходныеПараметры);
	
	СписокОтчетов = ОбработатьФайлОтчет(Отказ, СодержимоеОтчета, ВыходныеПараметры);
	
	МассивПроданныхТоваров = Новый Массив;
	
	Для Каждого Отчет Из СписокОтчетов Цикл
		
		Для Каждого Товар Из Отчет.Товары Цикл
			
			СтруктураЗаписи = Новый Структура("Код, Цена, Количество, Скидка, Сумма");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Товар);
			
			Скидка = (Товар.Цена * Товар.Количество) - Товар.Сумма;
			СтруктураЗаписи.Скидка = ?(Скидка < 0, -Скидка, Скидка);
			
			МассивПроданныхТоваров.Добавить(СтруктураЗаписи);
		КонецЦикла;
		
	КонецЦикла;
	
	ВыходныеПараметры.Добавить(МассивПроданныхТоваров);
	
	Если Отказ Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//	Функция проверяет файл-отчет на обработанность, если файл не был обработан формирует из данных файла структуру описанную в стандарте
//	На веб-клиенте работает с файлом отчета, как с текстовым документом, на толстом и тонком клиенте через объект ЧтениеXML
//	В случае успешного выполнения вернет "Истина", иначе "Ложь"
//	Параметры:
//		- ОбъектДрайвера
//		- Параметры
//		- ПараметрыПодключения
//		- ВыходныеПараметры
Функция ЗагрузитьРасширенныйОтчет(Параметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	ИмяФайла = ИмяФайла + ".xml";
	
	//	Получаем файл-отчет, если файла нет, возвращаем ошибку
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	Если Файлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Возврат Ложь;
	КонецЕсли;
	
		
	Отчет = Файлы[0];
	СодержимоеОтчета = Неопределено;
	
	Отказ = Ложь;
	ПолноеИмяФайла = Каталог + "\" + ИмяФайла;
	
	ПрочитатьТекстовыйДокумент(Отказ, ПолноеИмяФайла, СодержимоеОтчета, ВыходныеПараметры);
	
	СписокОтчетов = ОбработатьФайлОтчет(Отказ, СодержимоеОтчета, ВыходныеПараметры);
	
	ВыходныеПараметры.Добавить(СписокОтчетов);
	
	Если Отказ Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Отказ = Ложь;
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	ИмяФайла = ИмяФайла + ".*";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	
	Описание = Новый ОписаниеОповещения("ОповещениеПоискФайловЗагрузкаРасширенногоОтчета", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(Описание, Каталог, ИмяФайла, Ложь);
	
КонецПроцедуры

Процедура ОповещениеПоискФайловЗагрузкаРасширенногоОтчета(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Каталог  = ДополнительныеПараметры.Параметры.КаталогЗагрузки;
	ИмяФайла = ДополнительныеПараметры.Параметры.ИмяЗагружаемогоФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НайденныеФайлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Отчет = НайденныеФайлы[0];	
	ПолноеИмяФайла = Отчет.ПолноеИмя;
	
	ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ЗагрузкаРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ПолноеИмяФайла, ОписаниеЗавершенияПолученияСодержания);
	
КонецПроцедуры

Процедура ЗагрузкаРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Отказ = Ложь;
	СписокОтчетов = Неопределено;
	РезультатЗагрузки = Истина;
	
	Если Результат.Успешно И НЕ Результат.СодержаниеФайлов = Неопределено Тогда
		
		Если Результат.СодержаниеФайлов.Количество() Тогда
			
			СодержимоеОтчета = Результат.СодержаниеФайлов[0].ТекстСодержания;
			СписокОтчетов = ОбработатьФайлОтчет(Отказ, СодержимоеОтчета, ВыходныеПараметры);
			ВыходныеПараметры.Добавить(СписокОтчетов);
			
		КонецЕсли;
		
	Иначе
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, Результат.ТекстОшибки);
		Отказ = Истина;
		
	КонецЕсли;

	Если Отказ Тогда
		
		РезультатЗагрузки = Ложь;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", РезультатЗагрузки, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

Процедура НачатьПометкуОтчетЗагружен(Параметры, ВыходныеПараметры)
	
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	ИмяФайла = ИмяФайла + ".*";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	
	Описание = Новый ОписаниеОповещения("ОповещениеПоискФайловОтчетЗагружен", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПоискФайлов(Описание, Каталог, ИмяФайла, Ложь);
	
КонецПроцедуры

//Функция читает файл-отчет, проверяет его на обработанность, в случае если не обработан ставит отметку об обработке, иначе возвращает ошибку
//	При успешном выполнении вернет "Истина", иначе "Ложь"
//	Параметры:
//		- ОбъектДрайвера
//		- Параметры
//		- ПараметрыПодключения
//		- ВыходныеПараметры
Функция ОтчетЗагружен(Параметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив;
	Каталог = Параметры.КаталогЗагрузки;
	ИмяФайла = Параметры.ИмяЗагружаемогоФайла;
	
	//Получаем файл-отчет, если файла нет, возвращаем ошибку
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	Если Файлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Возврат Ложь;
	КонецЕсли;
	
	Отчет = Файлы[0];
	СодержимоеОтчета = Неопределено;
	Отказ = Ложь;
	Сообщение = "";
	
	#Если ВебКлиент Тогда
		
	ПрочитатьТекстовыйДокумент(Отказ, ИмяФайла, СодержимоеОтчета, ВыходныеПараметры);
	ПодключаемоеОборудование1СККМOfflineВызовСервера.ПометитьОтчетКакОбработанный(СодержимоеОтчета, ВыходныеПараметры, Отказ);
	ЗаписатьТекстовыйДокумент(Отчет.ПолноеИмя, СодержимоеОтчета, ВыходныеПараметры, Отказ);
	
	#Иначе
		
		МенеджерОборудованияСервисы.ПометитьОбработкуДокумента(Отказ, Отчет.ПолноеИмя, "SalesReports", Сообщение);
		
	#КонецЕсли
	
	
	Если Отказ Тогда
		Результат = Ложь;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОповещениеПоискФайловОтчетЗагружен(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если НайденныеФайлы.Количество()= 0 Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Файл отчета не найден';uk='Файл звіту не знайдено'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отчет = НайденныеФайлы[0];
	СодержимоеОтчета = Неопределено;
	Сообщение = "";
	
	ОтчетЗагруженЗавершение = Новый ОписаниеОповещения("ОтчетЗагруженЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	#Если ВебКлиент Тогда
		
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(Отчет.ПолноеИмя, ОтчетЗагруженЗавершение);
		
	#Иначе
		
		МенеджерОборудованияСервисы.ПометитьОбработкуДокумента(Отказ, Отчет.ПолноеИмя, "SalesReports", Сообщение);
		
		Если Отказ Тогда
			Результат = Ложь;
			Если ЗначениеЗаполнено(Сообщение) Тогда
				СоздатьСообщениеОбОшибке(ВыходныеПараметры, Сообщение);
			КонецЕсли;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

//Процедура вызывается только на Веб-клиенте
//
Процедура ОтчетЗагруженЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда

	Сообщение = "";
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	Отказ = Ложь;
	
	СписокОтчетов = Неопределено;
	РезультатЗагрузки = Истина;
	СодержимоеОтчета = "";
	
	Если Результат.Успешно И НЕ Результат.СодержаниеФайлов = Неопределено Тогда
		
		Если Результат.СодержаниеФайлов.Количество() Тогда
			
			СодержимоеОтчета = Результат.СодержаниеФайлов[0].ТекстСодержания;
			
		КонецЕсли;
		
	Иначе
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, Результат.ТекстОшибки);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		РезультатЗагрузки = Ложь;
		
	Иначе
		
		ПодключаемоеОборудование1СККМOfflineВызовСервера.ПометитьОтчетКакОбработанный(СодержимоеОтчета, ВыходныеПараметры, Отказ);
		ЗаписатьТекстовыйДокумент(Результат.СодержаниеФайлов[0].ОписаниеПереданногоФайла.Имя, СодержимоеОтчета, ВыходныеПараметры, Отказ);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

//Функция проверяет корректность заполнения параметров драйвера
//	При успешном прохождении проверки вернет "Истина", инач "Ложь"
//	Параметры:
//		- ОбъектДрайвера
//		- Параметры
//		- ПараметрыПодключения
//		- ВыходныеПараметры
Функция ТестУстройства(Параметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ТекстОшибки = "";
	ТекстОшибкиОбщий = "";
	ВремПараметр = "";
	
	Параметры.Свойство("КаталогВыгрузки", ВремПараметр);
	
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = НСтр("ru='Каталог выгрузки не указан';uk='Каталог вивантаження не вказано'");
	КонецЕсли;
	
	Параметры.Свойство("ИмяФайлаПрайсЛиста", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Имя файла прайс-листа не указано';uk='Ім''я файлу прайс-листа не вказано'") 
	КонецЕсли;
	
	Параметры.Свойство("КаталогЗагрузки", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Каталог загрузки не указан';uk='Каталог завантаження не вказано'") 
	КонецЕсли;
	
	Параметры.Свойство("ИмяЗагружаемогоФайла", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Имя файла отчета не указано';uk='Ім''я файлу звіту не вказано'") 
	КонецЕсли;
	
	Параметры.Свойство("КоличествоЭлементовВПакете", ВремПараметр);
	Если ВремПараметр=Неопределено Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Не указано количество элементов в пакете';uk='Не зазначена кількість елементів в пакеті'") 
	КонецЕсли;
	
	Если Результат Тогда
		Если Лев(Параметры.ИмяЗагружаемогоФайла, СтрДлина(Параметры.ИмяФайлаПрайсЛиста)) = Параметры.ИмяФайлаПрайсЛиста Тогда
			Результат = Ложь;
			ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
			ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Имена выгружаемого и загружаемого файлов не должны пересекаться.';uk='Імена файлів, що вивантажується і завантаження, не повинні перетинатися.'"); 
		КонецЕсли;
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибкиОбщий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ТестУстройства(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Проверка возможности расширенной выгрузки товаров в ККМ ККМ Offline.
//
Функция ПроверитьВозможностьРасширеннойВыгрузки()
	
	Возврат Истина;
	
КонецФункции

// Проверка возможности расширенной выгрузки отчета о продажах.
//
Функция ПроверитьВозможностьРасширеннойЗагрузки()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция ДополнитьИмяКаталогаСлешем(Знач ИмяКаталога) Экспорт
	
	Если Найти(ИмяКаталога, "ftp") > 0 Тогда
		Слеш = "/";
	Иначе
		Слеш = "\";
	КонецЕсли;
	
	Если НЕ Прав(ИмяКаталога,1) = Слеш Тогда
		ИмяКаталога = ИмяКаталога + Слеш;
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции

//	Процедура добавляет в массив выходных параметров сообщение об ошибке
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

Функция ОпределитьКоличествоПакетов(РазмерПакета, КоличествоЭлементов)
	
	Если РазмерПакета = 0 Тогда
		КоличествоПакетов = 1;
	Иначе
		// Определяем количество полных пакетов
		КоличествоПолныхПакетов = Цел(КоличествоЭлементов/РазмерПакета);
		//	Если количество элементов на пакет больше чем определенное количество пакетов, добавляем один неполный пакет
		КоличествоПакетов = КоличествоПолныхПакетов + ?((КоличествоЭлементов/РазмерПакета)-КоличествоПолныхПакетов>0, 1, 0);
	КонецЕсли;
	
	Возврат КоличествоПакетов;
	
КонецФункции

Функция ОбработатьФайлОтчет(Отказ, СодержимоеОтчета, ВыходныеПараметры)
	
	СтруктураДокумента = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗагружаемогоДокумента();
	МенеджерОборудованияСервисы.ЗаполнитьСтруктуруДокумента(СтруктураДокумента, "SalesReport", СодержимоеОтчета);
	
	Если ЗначениеЗаполнено(СтруктураДокумента.Обработан) Тогда
		
		Отказ = Истина;
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, НСтр("ru='Отчет был обработан ранее.';uk='Звіт був оброблений раніше.'"));
		
	КонецЕсли;
	
	Возврат СтруктураДокумента.Документы;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляВебКлиента

//	Функция читает файл, как текстовый документ и помещает его текст в параметр "Содержимое"
//	При успешном чтении вернет "Истина", иначе "Ложь"
//	Параметры:
//		- ИмяФайла - имя файла, который необходимо прочитать
//		- Содержимое - параметр, в который будет помещен текст файла
//		- ВыходныеПараметры - 
Процедура ПрочитатьТекстовыйДокумент(Отказ, ИмяФайла, Содержимое, ВыходныеПараметры)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
		Содержимое = ТекстовыйДокумент.ПолучитьТекст();
	Исключение
		ТекстСообщения =  НСтр("ru='При чтении файла %ИмяФайла% произошла ошибка';uk='При читанні файлу %ИмяФайла% сталася помилка'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#Если ВебКлиент Тогда
//	Функция записывает текст ("СодержимоеФайла") в файл
//	При успешной записи верент "Истина", иначе "Ложь"
//	Параметры:
//		- ИмяФайла - полное имя файла
//		- Содержимое - строка, которая будет записана в файл
//		- ВыходныеПараметры
Процедура ЗаписатьТекстовыйДокумент(ИмяФайла, Содержимое, ВыходныеПараметры, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Содержимое);
	Попытка
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
	Исключение
		ТекстСообщения =  НСтр("ru='При попытке записи файла %ИмяФайла% произошла ошибка';uk='При спробі запису файлу %ИмяФайла% сталася помилка'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
		
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#КонецОбласти
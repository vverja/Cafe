#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
    
	ОбновитьДатуАктуальностиРасчетовСервер();
	
	// По умолчанию отбор по контрагенту, может быть переопределен в ПриЗагрузкеДанныхИзНастроекНаСервере
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	НастроитьЭлементыФормы();
	УстановитьПараметрыДинамическихСписков();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыСписка());
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
   
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьЭлементыФормы();
	УстановитьПараметрыДинамическихСписков();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_РегистрацияВходящегоНалоговогоДокумента" Тогда
		Элементы.КОформлению.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентаПартнераПоУмолчанию()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)
	
	Если Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка") 
	   И ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	   
	ИначеЕсли Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие") 
	   И ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Организации")  Тогда
		Контрагент = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Иначе	
		ЗаполнитьКонтрагентаПартнераПоУмолчанию();
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДатуАктуальностиРасчетовСервер();
	Элементы.КОформлению.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодВариантПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
		
	Отбор = Новый Структура("Период, Организация, Партнер, Контрагент");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	Отбор.Период = Новый СтандартныйПериод(ТекущиеДанные.Период, ТекущиеДанные.Период);
	Если Не ЗначениеЗаполнено(Отбор.Организация) Тогда
		Отбор.Организация = ОрганизацияПоУмолчанию;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючНазначенияИспользования",
		Отбор, 
		Истина,
		Новый УникальныйИдентификатор // Не используем сохраненные пользователем настроки, только заданные в СКД по умолчанию
	);
	ОткрытьФорму("Отчет.НДСАнализНалоговогоКредита.Форма", ПараметрыФормы, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуАктуальностиРасчетов(Команда)
	
	ОбновитьДатуАктуальностиРасчетовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРасчеты(Команда)
	
	ДополнительныеСвойства = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("АктуализироватьРасчетыПродолжение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='Актуализировать расчеты с поставщиками?';uk='Актуалізувати розрахунки з постачальниками?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРасчетыПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьРасчетыСервер();
	
	Элементы.КОформлению.Обновить();	
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Актуализация расчетов';uk='Актуалізація розрахунків'"),
		,
		НСтр("ru='Расчеты с поставщиками актуализированы. Список актуален до ';uk='Розрахунки з постачальниками актуалізовані. Список актуальний до '") + Формат(ДатаАктуальностиРасчетов, "ДФ=dd.MM.yyyy; ДП='Нет данных'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНалоговыйДокумент(Команда)
	
	ТекущиеДанные = Элементы.КОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьДатуАктуальностиРасчетовСервер();
	
	Основание = Новый Структура("Партнер, Контрагент, Организация, Договор, НаправлениеДеятельности, ВидПоставки");
	ЗаполнитьЗначенияСвойств(Основание, ТекущиеДанные);
	Основание.Вставить("ДатаВходящегоДокумента", ТекущиеДанные.Период);
	Если Не ЗначениеЗаполнено(Основание.Организация) Тогда
		Основание.Организация = ОрганизацияПоУмолчанию;
	КонецЕсли;
	
	Если КонецДня(ДатаАктуальностиРасчетов) <= КонецДня(ТекущиеДанные.Период) Тогда
		
		ДополнительныеСвойства = Новый Структура("Основание", Основание);
		Оповещение = Новый ОписаниеОповещения("СоздатьНалоговыйДокументПродолжение", ЭтотОбъект, ДополнительныеСвойства);
		
		ПоказатьВопрос(Оповещение,
			НСтр("ru='Внимание! Список налоговых документов к оформлению не актуален на ';uk='Увага! Список податкових документів до оформлення не актуальний на '")+Формат(ТекущиеДанные.Период, "ДФ=dd.MM.yyyy") + НСтр("ru='
                       |Продолжить?'
                       |;uk='
                       |Продовжити?'"),
			РежимДиалогаВопрос.ОКОтмена,
			,
			КодВозвратаДиалога.Отмена,
			НСтр("ru='Список не актуален';uk='Список не актуальний'")
		);
		
	Иначе
		
		СоздатьНалоговыйДокументЗавершение(Основание);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНалоговыйДокументПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНалоговыйДокументЗавершение(ДополнительныеПараметры.Основание);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНалоговыйДокументЗавершение(Основание)
	
	ОткрытьФорму("Документ.РегистрацияВходящегоНалоговогоДокумента.ФормаОбъекта", Новый Структура("Основание", Основание), Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВходящихНалоговыхДокументовИЗЗвит1С(Команда)
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуЗагрузкиВходящихНалоговыхДокументов();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()

	Если Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "ОграничениеТипа", ОписаниеТипа);
	
	ЦветДатыАктуальностиРасчетов = ?(ДатаАктуальностиРасчетов < КонецДня(ТекущаяДата()+1), ЦветаСтиля.ПоясняющийОшибкуТекст, ЦветаСтиля.ПоясняющийТекст);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаАктуальностиРасчетов", "ЦветТекстаЗаголовка", ЦветДатыАктуальностиРасчетов);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаАктуальностиРасчетов", "ЦветТекста", ЦветДатыАктуальностиРасчетов);
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьДатуАктуальностиРасчетовСервер()
	
	ПредварительнаяДата = КонецДня(ТекущаяДата()) + 1; // Как и для исходящего, на начало следующего дня
	
	ДатаАктуальностиРасчетов = НДСВходящийСервер.ОпределитьГраницуАктуальностиФормированияНалоговыхДокументов(ПредварительнаяДата);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	ДатаНачала    = Период.ДатаНачала;
	ДатаОкончания = КонецДня(?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,'39991231'));
	
	КОформлению.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
	КОформлению.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания);
	
КонецПроцедуры

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Партнер",     Партнер,     ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Партнер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Контрагент",  Контрагент,  ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Контрагент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КОформлению.Отбор, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КОформлению.Отбор, "Партнер",     Партнер,     ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Партнер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КОформлению.Отбор, "Контрагент",  Контрагент,  ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Контрагент));
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьРасчетыСервер()
	
	ОкончаниеПериодаРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
	РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеПериодаРасчета);
	
	ОбновитьДатуАктуальностиРасчетовСервер();	
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	КоэффициентПересчетаВТонны     			 = ДоставкаТоваров.КоэффициентПересчетаВТонны();	
	КоэффициентПересчетаВКубическиеМетры     = ДоставкаТоваров.КоэффициентПересчетаВКубическиеМетры();
	
	ВосстановитьНастройки();
	СкладБыл = Склад;
	
	ЗонаГруппаИлиПустая = (НЕ ЗначениеЗаполнено(Зона) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Зона,"ЭтоГруппа"));
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ОбработкаПолноеИмя = Обработка.Метаданные().ПолноеИмя();
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьЗаголовкиКолонокВесОбъемСервер();
	
	РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ЗаданияНаПеревозкуПланируемыеВремяС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ЗаданияНаПеревозкуПланируемыеВремяПо);
	ДоставкаТоваров.УстановитьДоступностьАдресовДоставки(ЭтаФорма.Элементы);
	
	ДоставкаТоваров.ЗаполнитьСписокВыбораПеревозчиков(Элементы,,Склад);
	
	Элементы.ДокументыДляПеревозчиковПеревозчик.Видимость = Не ЗначениеЗаполнено(Перевозчик);
	
	Если ЗначениеЗаполнено(Параметры.ВидДоставки) Тогда
		ВидДоставки = Параметры.ВидДоставки;
		Элементы.ВидДоставки.Видимость = Ложь;
		Заголовок = Параметры.ВидДоставки;
		Элементы.Склад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	СкладПриИзмененииСервер(); // Здесь же обновляются списки
	УстановитьВидимостьСкладов();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаНаОсновании);
	// Конец ВводНаОсновании
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	РаспоряженияРазвернуть();
	ЗаданияПланируемыеРазвернуть();
	
	ЗаданияНаПеревозкуПланируемыеПриАктивизацииСтрокиОбработчикОжидания();
		
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = ОбработкаПолноеИмя + ".Форма.ФормаВыбораРаспоряжений" Тогда
		РазбитьПунктДоставкиСервер(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ТранспортныеСредства.Форма.ФормаВыбора"
		Или ИсточникВыбора.ИмяФормы = "Справочник.ТипыТранспортныхСредств.Форма.ФормаВыбора" Тогда
		ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
		ТекущиеДанные.Транспорт = ВыбранноеЗначение;
		РеквизитыТС = ПолучитьРеквизитыТС(ВыбранноеЗначение, КоэффициентПересчетаВТонны, КоэффициентПересчетаВКубическиеМетры);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РеквизитыТС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиИЗаданияНаПеревозкуСервер();
	ОповеститьОСозданныхЗаданиях();
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПоручениеЭкспедитору" Тогда
		ОбновитьСписокРаспоряженийНаДоставку(Источник);
	ИначеЕсли ИмяСобытия = "Запись_ЗаданиеНаПеревозку" Тогда
		ОбновитьСпискиДляТекущейСтраницы();
	ИначеЕсли ИмяСобытия = "ОтменаИсключенияИзДоставки" Тогда
		ОбновитьСписокРаспоряженийНаДоставку(Параметр.АдресРаспоряжений);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ВидДоставкиПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ВидДоставки.ПриИзменении");
	
	ВидДоставкиПриИзмененииСервер();
	ОповеститьОСозданныхЗаданиях();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспоряженийПриИзменении(Элемент)
	
	ДатаРаспоряженийПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.Склад.ПриИзменении");
	
	Если Склад <> СкладБыл Тогда
		СкладПриИзмененииСервер();
		ОповеститьОСозданныхЗаданиях();
		СкладБыл = Склад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗонаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.Зона.ПриИзменении");
	
	ЗонаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСпискиДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспоряженийРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
		ДатаРаспоряжений = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспоряженийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
		ДатаРаспоряжений = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ПеревозчикПартнер.ПриИзменении");
	
	ПеревозчикПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовДляПеревозчиковПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ПериодДокументовДляПеревозчиков.ПриИзменении");
	
	ОбновитьДокументыДляПеревозчиковСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуИсполнителейПриИзменении(Элемент)
	СохранитьЗаданияОбновитьСписки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспоряженияНаДоставку

&НаКлиенте
Процедура РаспоряженияНаДоставкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрокаЭлементДерева = РаспоряженияНаДоставку.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ВыбраннаяСтрокаЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		ПоказатьЗначение(Неопределено, ВыбраннаяСтрокаЭлементДерева.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.РаспоряженияНаДоставку.НачалоПеретаскивания");
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.РаспоряженияНаДоставку.ОкончаниеПеретаскивания");
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.РаспоряженияНаДоставку.ПроверкаПеретаскивания");
	
	СтандартнаяОбработка = Ложь;
	ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.РаспоряженияНаДоставку.Перетаскивание");
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты") Тогда
		//Перетаскивание из заданий на перевозку
		УбратьСтрокиИзЗаданийСервер();
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи") Тогда
		//Перетаскивание из списка накладных
		УбратьСтрокиИзЗаданийСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("РаспоряженияНаДоставкуПриАктивизацииСтрокиОбработчикОжидания",0.3,Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаданияНаПеревозку

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаданияНаПеревозкуПланируемыеПриАктивизацииСтрокиОбработчикОжидания", 0.3, Истина);
	 	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ЗаданияНаПеревозкуПланируемые.Перетаскивание");
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		Если Строка <> Неопределено Тогда
			//Перетаскивание внутри списка Задания на перевозку формируемые
			ПеренестиСтрокиВнутриСпискаЗаданийФормируемыхСервер(ПараметрыПеретаскивания.Значение,Строка);
			ОповеститьОСозданныхЗаданиях();
		КонецЕсли;
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("ВидРаспоряжения") Тогда
		//Перетаскивание из распоряжений
		ПеренестиСтроки(Строка);
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи") Тогда
		//Перетаскивание из списка распоряжений
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Строка = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ЭтоГруппировка = (Строка.ПолучитьРодителя() = Неопределено);
	Если ЭтоГруппировка Тогда
		Если Поле.ТолькоПросмотр ИЛИ Поле.Имя = "ЗаданияНаПеревозкуПланируемыеЗона" Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуЗадания(Строка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	КоличествоЗаписанныхЗаданий = 0;
	Для Каждого ИД Из Элементы.ЗаданияНаПеревозкуПланируемые.ВыделенныеСтроки Цикл
		Стр = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИД);
		Если Стр.ПолучитьРодителя() = Неопределено И ЗначениеЗаполнено(Стр.Ссылка) Тогда
			КоличествоЗаписанныхЗаданий = КоличествоЗаписанныхЗаданий + 1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоЗаписанныхЗаданий > 0 Тогда
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Пометить';uk='Позначити'"));
		Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не помечать, только очистить маршруты';uk='Не позначати, тільки очистити маршрути'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		Текст = НСтр("ru='Пометить на удаление выделенные задания на перевозку?';uk='Відмітити на вилучення виділені завдання на перевезення?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаданияНаПеревозкуПланируемыеПередУдалениемЗавершение", ЭтотОбъект), Текст, Режим);
		Возврат;
	Иначе
		УбратьСтрокиИзЗаданийСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьЗаданияНаУдаление = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПометитьЗаданияНаУдаление = Истина;
    КонецЕсли;
	
	УбратьСтрокиИзЗаданийСервер(Ложь, ПометитьЗаданияНаУдаление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(КэшированныеЗначения) Тогда
		КэшированныеЗначения = Новый Структура("Адрес,АдресЗначенияПолей,Зона,ВремяС,ВремяПо,ДополнительнаяИнформация");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(КэшированныеЗначения, ТекущиеДанные);
	
	Если РедактироватьАдресаДоставкиТолькоВДиалоге
		Или ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.ЗаданияНаПеревозкуПланируемыеАдрес.РедактированиеТекста = Ложь;
	Иначе
	     Элементы.ЗаданияНаПеревозкуПланируемыеАдрес.РедактированиеТекста = Истина;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, Элемент.ТекущиеДанные,
		"Адрес,АдресЗначенияПолей,Зона,ВремяС,ВремяПо,ДополнительнаяИнформация") Тогда
		УстановитьМодифицированность(ТекущиеДанные,ЗаданияМодифицированы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ЗаданияНаПеревозкуПланируемые.НачалоПеретаскивания");
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ЗаданияНаПеревозкуПланируемые.ОкончаниеПеретаскивания");
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Элемент.ЗаданияНаПеревозкуПланируемые.ПроверкаПеретаскивания");
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеВремяПриИзменении(Элемент)
	
	Если Элемент = Элементы.ЗаданияНаПеревозкуПланируемыеВремяС
		ИЛИ Элемент = Элементы.ЗаданияНаПеревозкуПланируемыеДатаС Тогда
		ВремяСВремяПо        = "ВремяС";
		ВремяСВремяПоБезДаты = "ВремяСБезДаты"
	Иначе
		ВремяСВремяПо        = "ВремяПо";
		ВремяСВремяПоБезДаты = "ВремяПоБезДаты";
	КонецЕсли;
	ТекСтрока = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	ТекСтрока[ВремяСВремяПо] = НачалоДня(ТекСтрока[ВремяСВремяПо])
		+ Час(ТекСтрока[ВремяСВремяПоБезДаты])*60*60 + Минута(ТекСтрока[ВремяСВремяПоБезДаты])*60;
	
	ПроверитьСоответствиеВремени(ВремяСВремяПо);
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ЗаданияПроверитьОтсортироватьЗаполнитьПризнакиПерехода();
	Иначе
		ТекВетка = Родитель.ПолучитьЭлементы();
		ТекИндекс = ТекВетка.Индекс(ТекСтрока);
		Если (ТекИндекс > 0 И ТекСтрока.ВремяС <= ТекВетка[ТекИндекс-1].ВремяС)
			ИЛИ (ТекИндекс < ТекВетка.Количество()-1 И ТекСтрока.ВремяС >= ТекВетка[ТекИндекс+1].ВремяС) Тогда
			ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
		Иначе
			ЗаполнитьПризнакиПереходаДат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные,
		"Адрес",
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ЭлементСпискаЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные.Адрес = ВыбранноеЗначение.Представление;
		Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные.АдресЗначенияПолей = ВыбранноеЗначение.ЗначенияПолей;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеТранспортНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Список.Добавить(НСтр("ru='Транспортное средство';uk='Транспортний засіб'"));
	Список.Добавить(НСтр("ru='Тип транспортного средства';uk='Тип транспортного засобу'"));
	ВыбранныйТип = Неопределено;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗаданияНаПеревозкуПланируемыеТранспортНачалоВыбораЗавершение", ЭтотОбъект), Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеТранспортНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйТип = ВыбранныйЭлемент;
	
	Если ВыбранныйТип = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранныйТип.Значение = НСтр("ru='Транспортное средство';uk='Транспортний засіб'") Тогда
		ОткрытьФорму("Справочник.ТранспортныеСредства.Форма.ФормаВыбора", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
		ОткрытьФорму("Справочник.ТипыТранспортныхСредств.Форма.ФормаВыбора", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеТранспортПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	
	Если ТекущиеДанные.Транспорт <> Неопределено Тогда
		РеквизитыТС = ПолучитьРеквизитыТС(
			ТекущиеДанные.Транспорт, КоэффициентПересчетаВТонны, КоэффициентПересчетаВКубическиеМетры);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РеквизитыТС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеТранспортОчистка(Элемент, СтандартнаяОбработка)
	Если Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеДополнительнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЗаданияНаПеревозкуПланируемыеДополнительнаяИнформацияНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элементы.ЗаданияНаПеревозкуПланируемыеДополнительнаяИнформация.ТекстРедактирования,
		Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные.ДополнительнаяИнформация);

КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеДополнительнаяИнформацияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
		ТекущиеДанные.ДополнительнаяИнформация = РезультатЗакрытия;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспоряженияВЗаданияхНаПеревозку

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение[0].Свойство("ВидРаспоряжения") Тогда
		//Перетаскивание из распоряжений
		ПеренестиСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.РаспоряженияВЗаданияхНаПеревозкуДоставляетсяПолностью Тогда
		Если Не ТекущаяСтрока.ЭтоПоручениеЭкспедитору Тогда
			ОткрытьПодборТоваровКДоставке();
		КонецЕсли;
	Иначе
		ПоказатьЗначение(Неопределено, ТекущаяСтрока.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УбратьСтрокиИзЗаданийСервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВЗаданияхНаПеревозкуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусЗаданийНаПеревозку(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Команда.Имя = "УстановитьСтатусЗакрытоПолностьюДоставленныхЗаданий" Тогда
		ИмяСтатуса = "Закрыто";
		ЗаголовокСтатуса = "Закрыто";
		ДополнительныеПараметры.Вставить("КонтрольДоставки", Истина);
	Иначе
		ИмяСтатуса = СтрЗаменить(Команда.Имя,"УстановитьСтатус","");
		ЗаголовокСтатуса = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку." + ИмяСтатуса);
	КонецЕсли;
	
	ОчиститьСообщения();
	ВыделенныеСсылки = Элементы.ЗаданияНаПеревозкуВРаботе.ВыделенныеСтроки;
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, ИмяСтатуса, ДополнительныеПараметры);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе,
		КоличествоОбработанных, ВыделенныеСсылки.Количество(), ЗаголовокСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДоставки(Команда)
	
	ОбновитьСпискиДляТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиВЗадание(Команда)
	
	ПеренестиСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание(Команда)
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	ОткрытьФормуЗадания(СтрокаЗаданиеПоСтрокеПункта(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСтрокиИзЗаданий(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.ЗаданияНаПеревозкуПланируемые.ВыделенныеСтроки.Количество() > 0 Тогда
		УбратьСтрокиИзЗаданийСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияВверх(Команда)
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	Индекс = Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	Ветка = Родитель.ПолучитьЭлементы();
	Если Индекс <> 0 Тогда
		Ветка.Сдвинуть(Индекс, -1);
		Ветка[Индекс-1].ПорядокВМаршруте = Индекс;
		Ветка[Индекс].ПорядокВМаршруте	 = Индекс+1;
		Ветка[Индекс-1].ВремяС			 = Ветка[Индекс].ВремяС;
		Ветка[Индекс-1].ВремяСБезДаты	 = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Ветка[Индекс].ВремяС);
		Ветка[Индекс-1].ВремяПо			 = Ветка[Индекс].ВремяС;
		Ветка[Индекс-1].ВремяПоБезДаты	 = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Ветка[Индекс].ВремяС);
		Если Лев(Ветка[Индекс].ПереходДаты, 5) = "ДатаС" Тогда
			Ветка[Индекс-1].ПереходДаты		 = "ДатаС";
		Иначе
			Ветка[Индекс-1].ПереходДаты		 = "";
		КонецЕсли;
		Если Прав(Ветка[Индекс].ПереходДаты, 5) = "атаПо" Тогда
			Ветка[Индекс].ПереходДаты = "ДатаПо";
		Иначе
			Ветка[Индекс].ПереходДаты = "";
		КонецЕсли;
		Если Ветка.Количество() > Индекс + 1 Тогда
			Ветка[Индекс+1].ПереходДаты = "";
			Если НачалоДня(Ветка[Индекс+1].ВремяС) <> НачалоДня(Ветка[Индекс].ВремяС) Тогда
				Ветка[Индекс+1].ПереходДаты = "ДатаС";
			КонецЕсли;
			Если НачалоДня(Ветка[Индекс+1].ВремяС) <> НачалоДня(Ветка[Индекс+1].ВремяПо) Тогда
				Ветка[Индекс+1].ПереходДаты = Ветка[Индекс+1].ПереходДаты + "ДатаПо";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьМодифицированность(Родитель, ЗаданияМодифицированы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияВниз(Команда)
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	Индекс = Родитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	Ветка = Родитель.ПолучитьЭлементы();
	Если Индекс <> Ветка.Количество()-1 Тогда
		Ветка.Сдвинуть(Индекс, 1);
		Ветка[Индекс+1].ПорядокВМаршруте = Индекс+2;
		Ветка[Индекс].ПорядокВМаршруте	 = Индекс+1;
		Ветка[Индекс+1].ВремяС			 = Ветка[Индекс].ВремяПо;
		Ветка[Индекс+1].ВремяСБезДаты	 = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Ветка[Индекс+1].ВремяС);
		Ветка[Индекс+1].ВремяПо			 = Ветка[Индекс].ВремяПо;
		Ветка[Индекс+1].ВремяПоБезДаты	 = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Ветка[Индекс+1].ВремяПо);
		Если Лев(Ветка[Индекс+1].ПереходДаты, 5) = "ДатаС" Тогда
			Ветка[Индекс].ПереходДаты = "ДатаС";
		КонецЕсли;
		Ветка[Индекс+1].ПереходДаты		 = "";
		Если НачалоДня(Ветка[Индекс].ВремяС) <> НачалоДня(Ветка[Индекс].ВремяПо) Тогда
			Ветка[Индекс].ПереходДаты	 = "ДатаПо";
		КонецЕсли;
	КонецЕсли;
	УстановитьМодифицированность(Родитель, ЗаданияМодифицированы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВчерашнимиРейсами(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьПрошлымиРейсамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРейсамиНаДату(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",НСтр("ru='Выберите дату формирования заданий на перевозку';uk='Виберіть дату формування завдань на перевезення'"));
	ПараметрыФормы.Вставить("ПоясняющийТекст",НСтр("ru='Задания на выбранную дату будут использованы в качестве шаблона для заполнения списка.';uk='Завдання на обрану дату будуть використані як шаблон для заповнення списку.'"));
	ВыбраннаяДата = Неопределено;
	
	ОчиститьСообщения();
	
	ОткрытьФорму("ОбщаяФорма.ВыборДаты",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗаполнитьРейсамиНаДатуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРейсамиНаДатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяДата = Результат;
    
    Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
        ЗаполнитьПрошлымиРейсамиСервер(ВыбраннаяДата);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаПеревозку(Команда)
	
	ОткрытьПодборТранспорта();
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиРаспоряженияПоВремени(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Текст = НСтр("ru='Разбиение строки возможно только для строк-адресов';uk='Розбиття рядка можливо тільки для рядків-адрес'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьРазбитьПунктДоставкиСервер() Тогда
		АдресРаспоряжений = ПоместитьРаспоряженияВХранилище(ТекущиеДанные.КлючСвязи);
		ПараметрыФормы = Новый Структура("АдресРаспоряжений", АдресРаспоряжений);
		ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаВыбораРаспоряжений", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПоВремени(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.ЗаданияНаПеревозкуПланируемые.ВыделенныеСтроки.Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для объединения необходимо выделить хотя бы 2 строки.';uk='Для об''єднання необхідно виділити хоча б 2 рядки.'"));
	ИначеЕсли НЕ ОбъединитьПоВремениСервер() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось объединить выделенные строки: выберите строки с одинаковыми адресами.';uk='Не вдалося об''єднати виділені рядки: виберіть рядки з однаковими адресами.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданиеНаПеревозку(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.РабочееМестоМенеджераПоДоставке.Форма.Команда.СоздатьЗаданиеНаПеревозку");
	
	СтруктураЗначенияЗаполнения = Новый Структура;
	СтруктураЗначенияЗаполнения.Вставить("Склад", Склад);
	СтруктураЗначенияЗаполнения.Вставить("Операция", ВидДоставки);
	
	ОткрытьФорму("Документ.ЗаданиеНаПеревозку.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения));
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаданияНаПеревозкуВРаботе Тогда
		Список = Элементы.ЗаданияНаПеревозкуВРаботе;
	ИначеЕсли Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДляПеревозчиков Тогда
		Список = Элементы.ДокументыДляПеревозчиков;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТоварыКДоставке(Команда)
	
	Если Элементы.РаспоряженияВЗаданияхНаПеревозку.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьПодборТоваровКДоставке();
	КонецЕсли;
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.ЗаданияНаПеревозкуВРаботе);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура СоздатьПоручениеЭкспедитору(Команда)
	
	ПараметрыФормы = Новый Структура("Склад", Склад);
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзДоставки(Команда)
	ИсключитьИзДоставкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьИсключенныеВДоставку(Команда)
	
	ПараметрыФормы = Новый Структура("Склад", Склад);
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаОтменыИсключенияИзДоставки", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

#Область РаспоряженияНаДоставку
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспоряженияНаДоставкуАдрес.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.Зона");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ЗоныДоставки.ПустаяСсылка();

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.ОформлениеСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 5;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , , Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<зона не указана>';uk='<зона не указана>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспоряженияНаДоставкуКартинка.Имя);

	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.КартинкаТипаИсполнителя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.ОформлениеСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 5;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспоряженияНаДоставку.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.ОформлениеСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 5;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспоряженияНаДоставку.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспоряженияНаДоставку.ОформлениеСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	
#КонецОбласти

#Область ЗаданияНаПеревозкуПланируемые

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемые.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ReportGroup1BackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеДатаС.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ПереходДаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='ДатаС';uk='ДатаС'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ПереходДаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='ДатаСДатаПо';uk='ДатаСДатаПо'");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеДатаПо.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ПереходДаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='ДатаПо';uk='ДатаПо'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ПереходДаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='ДатаСДатаПо';uk='ДатаСДатаПо'");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеПеревозчик.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеТранспортПеревозчика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ЭтоНашаДоставка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеТранспорт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеВместимость.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ЭтоНашаДоставка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеТранспорт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеВместимость.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеПеревозчик.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеТранспортПеревозчика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеАдрес.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеЗона.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеВес.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.Вес");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ГрузоподъемностьВЕдПользователя");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.NegativeTextColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуПланируемыеОбъем.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.Объем");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.ВместимостьВЕдПользователя");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуПланируемые.КлючСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.NegativeTextColor);
	
#КонецОбласти

#Область РаспоряженияВЗаданияхНаПеревозку

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспоряженияВЗаданияхНаПеревозкуДоставляетсяПолностью.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РаспоряженияВЗаданияхНаПеревозку.ЭтоПоручениеЭкспедитору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
#КонецОбласти

#Область ЗаданияНаПеревозкуВРаботе

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЗаданияНаПеревозкуВРаботе", "ЗаданияНаПеревозкуВРаботеДата");
	
	// Представление плановой даты окончания рейса сегодня: "09:46"
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуВРаботеДатаВремяРейсаПланПо.Имя);

	ПредставлениеЭлемента = НСтр("ru='Представление даты сегодня: ""09:46""';uk='Представлення дати сьогодні: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаПланПо");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаПланПо");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаПланС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	// Представление фактической даты окончания рейса сегодня: "09:46"
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуВРаботеДатаВремяРейсаФактПо.Имя);

	ПредставлениеЭлемента = НСтр("ru='Представление даты сегодня: ""09:46""';uk='Представлення дати сьогодні: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаФактПо");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаФактПо");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаФактС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	// Представление плановой даты начала рейса сегодня: "09:46"
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуВРаботеДатаВремяРейсаПланС.Имя);

	ПредставлениеЭлемента = НСтр("ru='Представление плановой даты окончания сегодня: ""09:46""';uk='Представлення планової дати закінчення сьогодні: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаПланС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаПланС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
	// Представление плановой даты начала рейса сегодня: "09:46"
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаданияНаПеревозкуВРаботеДатаВремяРейсаФактС.Имя);

	ПредставлениеЭлемента = НСтр("ru='Представление плановой даты окончания сегодня: ""09:46""';uk='Представлення планової дати закінчення сьогодні: ""09:46""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаФактС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданияНаПеревозкуВРаботе.ДатаВремяРейсаФактС");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
	
#КонецОбласти
		
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Возврат ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Если ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			Если Элементы.ГлавныеСтраницы.ТекущаяСтраница <> Элементы.СтраницаЗаданияНаПеревозкуВРаботе Тогда
				Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаданияНаПеревозкуВРаботе;
				ОбновитьСпискиДляТекущейСтраницы();
			КонецЕсли;
			Элементы.ЗаданияНаПеревозкуВРаботе.ТекущаяСтрока = МассивСсылок[0];
		ИначеЕсли ЗначениеЗаполнено(Склад)
			И Элементы.СтраницаДокументыДляПеревозчиков.Видимость = Истина Тогда
			Если Элементы.ГлавныеСтраницы.ТекущаяСтраница <> Элементы.СтраницаДокументыДляПеревозчиков Тогда
				Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДляПеревозчиков;
				ОбновитьСпискиДляТекущейСтраницы();
			КонецЕсли;
			НайденныеСтроки = ДокументыДляПеревозчиков.НайтиСтроки(Новый Структура("Ссылка",МассивСсылок[0]));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ДокументыДляПеревозчиков.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	СкладЗаполнен = ЗначениеЗаполнено(Склад);
	Элементы.ГлавныеСтраницы.Доступность        = СкладЗаполнен;
	Элементы.ОбновитьСпискиДоставки.Доступность = СкладЗаполнен;
	
	ЕстьОрдерныеСклады = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(Склад);
	
	УстановитьВидимостьСкладов();
	
	ДоставкаТоваров.ЗаполнитьСписокВыбораПеревозчиков(Элементы,,Склад);
	
	СохранитьЗаданияОбновитьСписки();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМодифицированность(СтрокаДерева, ЗаданияМодифицированы)
	
	СтрокаДерева.Модифицирован = Истина;
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Родитель.Модифицирован = Истина;
	КонецЕсли;
	ЗаданияМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИЗаданияНаПеревозкуСервер()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("Склад",                           Склад);
	Настройки.Вставить("ДатаСохранения",                  ТекущаяДата());
	Настройки.Вставить("ДатаРаспоряжений",                ДатаРаспоряжений);
	Настройки.Вставить("Зона",                            Зона);
	Настройки.Вставить("Статус",                          Статус);
	Настройки.Вставить("Перевозчик",                      Перевозчик);
	Настройки.Вставить("ПериодДокументовДляПеревозчиков", ПериодДокументовДляПеревозчиков);
	Настройки.Вставить("ИмяТекущейСтраницы",              Элементы.ГлавныеСтраницы.ТекущаяСтраница.Имя);
	Настройки.Вставить("ВидДоставки",                     ВидДоставки);
	Настройки.Вставить("ОтборПоТипуИсполнителей",         ОтборПоТипуИсполнителей);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.РабочееМестоМенеджераПоДоставке", "Настройки", Настройки);
	
	СохранитьЗаданияНаПеревозкуСервер();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.РабочееМестоМенеджераПоДоставке", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда

		Склад                           = ЗначениеНастроек.Получить("Склад");
		ДатаСохранения                  = ЗначениеНастроек.Получить("ДатаСохранения");
		ДатаРаспоряжений                = ЗначениеНастроек.Получить("ДатаРаспоряжений");
		Зона                            = ЗначениеНастроек.Получить("Зона");
		Статус                          = ЗначениеНастроек.Получить("Статус");
		Перевозчик                      = ЗначениеНастроек.Получить("Перевозчик");
		ПериодДокументовДляПеревозчиков = ЗначениеНастроек.Получить("ПериодДокументовДляПеревозчиков");
		ИмяТекущейСтраницы              = ЗначениеНастроек.Получить("ИмяТекущейСтраницы");
		ВидДоставки                     = ЗначениеНастроек.Получить("ВидДоставки");
		ОтборПоТипуИсполнителей         = ЗначениеНастроек.Получить("ОтборПоТипуИсполнителей");
		
		Если Не ЗначениеЗаполнено(ПериодДокументовДляПеревозчиков.ДатаНачала) Тогда
			ПериодДокументовДляПеревозчиков.Вариант = ВариантСтандартногоПериода.Последние7Дней;
		ИначеЕсли ПериодДокументовДляПеревозчиков.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
			ПериодДокументовДляПеревозчиков.ДатаОкончания = Дата(1,1,1);
		КонецЕсли;
		
		//Если в прошлые дни планировали на будущие, тогда подставляем будущий день
		Если (НачалоДня(ДатаСохранения) < НачалоДня(ДатаРаспоряжений)) Тогда
			ДатаРаспоряжений = Макс(ТекущаяДата() + 60*60*24, ДатаРаспоряжений)
		ИначеЕсли ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
			ДатаРаспоряжений = ТекущаяДата()
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы)
			И Элементы.Найти(ИмяТекущейСтраницы) <> Неопределено Тогда
			Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДоставки) Тогда
		ВидДоставки = Перечисления.ВидыДоставки.СоСклада;
	КонецЕсли;
	
	НастроитьФормуПоВидуДоставки();
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияРазвернуть()
	Если Не ЗонаГруппаИлиПустая Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева из РаспоряженияНаДоставку.ПолучитьЭлементы() Цикл
		Элементы.РаспоряженияНаДоставку.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПланируемыеРазвернуть()
	
	Для каждого СтрокаДерева из ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы() Цикл
		Элементы.ЗаданияНаПеревозкуПланируемые.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтроки(ИДСтрокиНазначения = Неопределено)
	
	ОчиститьСообщения();
	
	Если ИДСтрокиНазначения = Неопределено Тогда
		ИДСтрокиНазначения = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока;
	КонецЕсли;
	
	Если Элементы.РаспоряженияНаДоставку.ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбраны распоряжения для переноса.';uk='Не вибрані розпорядження для перенесення.'"));
		Возврат
	КонецЕсли;
	
	Если ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПеренестиСтрокиЗавершение(ИДСтрокиНазначения);
		
	Иначе
		
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, "Создать");
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		Текст = НСтр("ru='Список формируемых заданий не заполнен. Создать задания на перевозку?';uk='Список завдань, що формуються, незаповнений. Створити завдання на перевезення?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОСозданииЗаданий", ЭтотОбъект), Текст, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСозданииЗаданий(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОткрытьПодборТранспорта(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТранспорта(ПеренестиРаспоряженияВНовоеЗадание = Ложь)
	
	ОчиститьСообщения();
	
	АдресЗаданийФормируемых = ПоместитьЗаданияВХранилище();
	ПараметрыФормы = Новый Структура("ДатаОтбор, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем, ЗаданиеБудетВыполнять",
		ДатаРаспоряжений, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем, ОтборПоТипуИсполнителей);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораТранспорта",
		ЭтотОбъект, Новый Структура("ПеренестиРаспоряженияВНовоеЗадание",ПеренестиРаспоряженияВНовоеЗадание));
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаВыбораТранспорта", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораТранспорта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНовыеЗаданияСервер(Результат);
	
	Если ДополнительныеПараметры.ПеренестиРаспоряженияВНовоеЗадание
		И ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Количество() > 0 Тогда
		ПеренестиСтрокиЗавершение(ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыеЗаданияСервер(АдресНовыхЗаданийВХранилище);
	
	ТаблицаНовыхЗаданий = ПолучитьИзВременногоХранилища(АдресНовыхЗаданийВХранилище);
	ТаблицаНовыхЗаданий.Сортировать("ВремяС, ВремяПо");
	КоллекцияЗаданий = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы();
	Индекс = 0;
	ПерваяДобавленнаяСтрока = Истина;
	Для Каждого Стр Из ТаблицаНовыхЗаданий Цикл
		Пока Индекс < КоллекцияЗаданий.Количество()
			 И (КоллекцияЗаданий[Индекс].ВремяС < Стр.ВремяС
				ИЛИ (КоллекцияЗаданий[Индекс].ВремяС = Стр.ВремяС
					 И КоллекцияЗаданий[Индекс].ВремяПо < Стр.ВремяПо)) Цикл
			Индекс = Индекс + 1;
		КонецЦикла;
		НоваяСтр = КоллекцияЗаданий.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
		НоваяСтр.Склад            = Склад;
		НоваяСтр.Транспорт        = Стр.Ссылка;
		НоваяСтр.Модифицирован    = Истина;
		НоваяСтр.Перевозчик       = Стр.Перевозчик;
		НоваяСтр.ЗаданиеВыполняет = Стр.ЗаданиеВыполняет;
		Если НоваяСтр.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба Тогда
			НоваяСтр.ЭтоНашаДоставка = 1;
		Иначе
			НоваяСтр.ЭтоНашаДоставка = 0;
		КонецЕсли;
		РеквизитыТС = ПолучитьРеквизитыТС(
			Стр.Ссылка, КоэффициентПересчетаВТонны, КоэффициентПересчетаВКубическиеМетры);
		ЗаполнитьЗначенияСвойств(НоваяСтр, РеквизитыТС);
		Если ПерваяДобавленнаяСтрока Тогда
			ПерваяДобавленнаяСтрока = Ложь;
			Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока = НоваяСтр.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	ЗаданияМодифицированы = Истина;
	ЗаполнитьПризнакиПереходаДат();
	Элементы.ЗаданияНаПеревозкуПланируемые.Обновить();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиЗавершение(ИДСтрокиНазначения)
	
	Если ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Количество() = 1 Тогда
		ИДСтрокиНазначения = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	Если ИДСтрокиНазначения = Неопределено тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбрана строка назначения в списке заданий на перевозку.';uk='Не вибраний рядок призначення в списку завдань на перевезення.'"));
		Возврат
	КонецЕсли;
	
	РаспоряженияСОсобымиУсловиями = ПеренестиСтрокиСервер(ИДСтрокиНазначения);
	ОповеститьОСозданныхЗаданиях();
	Элементы.ЗаданияНаПеревозкуПланируемые.Развернуть(ИДСтрокиНазначения);
	
	Если РаспоряженияСОсобымиУсловиями.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("Распоряжения", РаспоряженияСОсобымиУсловиями);
		ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаПредупреждения",	ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыДляПеревозчиковСервер()
	
	ДокументыДляПеревозчиков.Очистить();
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаДокументыДляПеревозчиков());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	Запрос.УстановитьПараметр("ПеревозчикНеЗаполнен", Не ЗначениеЗаполнено(Перевозчик));
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДокументовДляПеревозчиков.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДокументовДляПеревозчиков.ДатаОкончания);
	Запрос.УстановитьПараметр("БезДатыНачала", Не ЗначениеЗаполнено(ПериодДокументовДляПеревозчиков.ДатаНачала));
	Запрос.УстановитьПараметр("БезДатыОкончания", Не ЗначениеЗаполнено(ПериодДокументовДляПеревозчиков.ДатаОкончания));
	Запрос.УстановитьПараметр("СиламиПеревозчикаСоСклада", Перечисления.СпособыДоставки.СиламиПеревозчика);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДокументыДляПеревозчиков.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДокументыДляПеревозчиков()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидДокумента,
	|	РаспоряженияНаДоставку.Распоряжение КАК Ссылка,
	|	РаспоряженияНаДоставку.Дата КАК Дата,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.Адрес КАК АдресДоставки,
	|	РаспоряженияНаДоставку.Перевозчик КАК Перевозчик,
	|	РаспоряженияНаДоставку.Номер КАК Номер,
	|	РаспоряженияНаДоставку.Склад КАК Склад,
	|	ВЫРАЗИТЬ(РаспоряженияНаДоставку.ДополнительнаяИнформация КАК СТРОКА(1000)) КАК ДополнительнаяИнформация
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
	|ГДЕ
	|	(РаспоряженияНаДоставку.Перевозчик = &Перевозчик
	|			ИЛИ &ПеревозчикНеЗаполнен)
	|	И РаспоряженияНаДоставку.СпособДоставки = &СиламиПеревозчикаСоСклада
	|	И РаспоряженияНаДоставку.Склад В ИЕРАРХИИ(&Склад)
	|	И (РаспоряженияНаДоставку.Дата <= &ДатаОкончания ИЛИ &БезДатыОкончания)
	|	И (РаспоряженияНаДоставку.Дата >= &ДатаНачала ИЛИ &БезДатыНачала)
	| УПОРЯДОЧИТЬ ПО РаспоряженияНаДоставку.Дата";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъемСервер()
	
	ТекстВес = НСтр("ru='Вес,';uk='Вага,'") + " " + ЕдиницаИзмеренияВеса;
	ТекстОбъем = НСтр("ru='Объем,';uk='Об''єм,'") + " " + ЕдиницаИзмеренияОбъема;
	Элементы.РаспоряженияНаДоставкуВес.Заголовок = ТекстВес;
	Элементы.РаспоряженияНаДоставкуОбъем.Заголовок = ТекстОбъем;
	
	Элементы.ЗаданияНаПеревозкуПланируемыеВес.Заголовок = ТекстВес;
	Элементы.ЗаданияНаПеревозкуПланируемыеОбъем.Заголовок = ТекстОбъем;
	
	Элементы.РаспоряженияВЗаданияхНаПеревозкуВес.Заголовок = ТекстВес;
	Элементы.РаспоряженияВЗаданияхНаПеревозкуОбъем.Заголовок = ТекстОбъем;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиСтрокиСервер(ИДСтрокиНазначения)
	
	МассивИДВыбранныхСтрок = Элементы.РаспоряженияНаДоставку.ВыделенныеСтроки;
	СтрокаНазначения = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИДСтрокиНазначения);
	СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(СтрокаНазначения);
	ПунктыТекущегоЗаданияНаПеревозку = СтрокаЗадание.ПолучитьЭлементы();
	
	Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РаспоряженияКорневыеСтроки = РаспоряженияНаДоставку.ПолучитьЭлементы();
	
	ИзмененныеДобавленныеСтрокиРаспоряжений = Новый Массив;
	РаспоряженияСОсобымиУсловиями = Новый Массив;
	Для каждого ИДСтроки из МассивИДВыбранныхСтрок Цикл
		
		ТекущаяСтрокаРаспоряжений = РаспоряженияНаДоставку.НайтиПоИдентификатору(ИДСтроки);
		
		// Если текущую строку уже удалили вместе с родителем
		Если ТекущаяСтрокаРаспоряжений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя();
		
		// Если в выбранных строках есть родитель этой строки, ничего не делаем, строка будет обработана вместе с родителем
		Если ВершинаТекущейВеткиРаспоряжений <> Неопределено
				И МассивИДВыбранныхСтрок.Найти(ВершинаТекущейВеткиРаспоряжений.ПолучитьИдентификатор())<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВершинаТекущейВеткиРаспоряжений = Неопределено Тогда
			ТекущаяВеткаРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
			ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений;
		Иначе
			ТекущаяВеткаРаспоряжений = ВершинаТекущейВеткиРаспоряжений.ПолучитьЭлементы();
		КонецЕсли;
			
		КоллекцияПодчиненныхСтрок = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
		
		Если КоллекцияПодчиненныхСтрок.Количество() = 0 тогда
			КоллекцияПодчиненныхСтрок = Новый Массив(1);
			КоллекцияПодчиненныхСтрок[0] = ТекущаяСтрокаРаспоряжений;
			Если ЗонаГруппаИлиПустая Тогда
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес - ТекущаяСтрокаРаспоряжений.Вес;
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем - ТекущаяСтрокаРаспоряжений.Объем;
			КонецЕсли;
		КонецЕсли;
		
		ИтогоВес = ИтогоВес - ТекущаяСтрокаРаспоряжений.Вес;
		ИтогоОбъем = ИтогоОбъем - ТекущаяСтрокаРаспоряжений.Объем;
		СтрокаЗадание.Вес = СтрокаЗадание.Вес + ТекущаяСтрокаРаспоряжений.Вес;
		СтрокаЗадание.Объем = СтрокаЗадание.Объем + ТекущаяСтрокаРаспоряжений.Объем;
		
		Для Каждого СтрокаРаспоряжений Из КоллекцияПодчиненныхСтрок Цикл
			
			СтрокаМаршрута = Неопределено;
			
			// Возможно, распоряжение уже есть в задании, тогда новая строка не добавляется
			СтруктураПоиска = Новый Структура("Ссылка, Склад, Распоряжение",
				СтрокаЗадание.Ссылка, СтрокаРаспоряжений.Склад, СтрокаРаспоряжений.Распоряжение);
			НайденныеСтроки = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(СтруктураПоиска);
			РаспоряжениеУжеВЗадании = НайденныеСтроки.Количество() > 0;
			
			Если РаспоряжениеУжеВЗадании Тогда
				
				СтрокаРаспоряжениеВЗаданиях = НайденныеСтроки[0];
				СтрокаМаршрута = СтрокаПунктМаршрутаПоКлючу(СтрокаЗадание, СтрокаРаспоряжениеВЗаданиях.КлючСвязи);
				СтрокаРаспоряжениеВЗаданиях.Вес = СтрокаРаспоряжениеВЗаданиях.Вес + СтрокаРаспоряжений.Вес;
				СтрокаРаспоряжениеВЗаданиях.Объем = СтрокаРаспоряжениеВЗаданиях.Объем + СтрокаРаспоряжений.Объем;
				СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + СтрокаРаспоряжений.Вес;
				СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + СтрокаРаспоряжений.Объем;
				
			Иначе
				
				СтрокаМаршрута = ДоставкаТоваров.ДобавитьИзменитьПунктПоРеквизитамДоставки(ПунктыТекущегоЗаданияНаПеревозку,
					СтрокаРаспоряжений, СтрокаЗадание.ВремяС);
				СтрокаМаршрута.Ссылка = СтрокаЗадание.Ссылка;
				СтрокаМаршрута.ПереходДаты = "";
				
			КонецЕсли;
			
			СтрокаМаршрута.ЭтоНашаДоставка = 1;
			
			УстановитьМодифицированность(СтрокаМаршрута, ЗаданияМодифицированы);
			КлючСвязи = СтрокаМаршрута.КлючСвязи;
			ИДСтрокиНазначения = СтрокаМаршрута.ПолучитьИдентификатор();
			
			Если Не РаспоряжениеУжеВЗадании Тогда
				
				СтрокаРаспоряжениеВЗаданиях = Объект.РаспоряженияВЗаданияхНаПеревозку.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРаспоряжениеВЗаданиях, СтрокаРаспоряжений);
				СтрокаРаспоряжениеВЗаданиях.Ссылка = СтрокаЗадание.Ссылка;
				СтрокаРаспоряжениеВЗаданиях.КлючСвязи = КлючСвязи;
				СтрокаРаспоряжениеВЗаданиях.ЭтоПоручениеЭкспедитору = (СтрокаРаспоряжений.Распоряжение.Метаданные() = Метаданные.Документы.ПоручениеЭкспедитору);
				
			КонецЕсли;
			
			ИзмененныеДобавленныеСтрокиРаспоряжений.Добавить(СтрокаРаспоряжениеВЗаданиях);
			
			СтруктураПоиска = Новый Структура("ИдентификаторВДеревеРаспоряжений", СтрокаРаспоряжений.ПолучитьИдентификатор());
			СтрокиРаспоряженийСТоварами = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
			Для Каждого Стр Из СтрокиРаспоряженийСТоварами Цикл
				СтрокаТоварыКДоставке = ТоварыКДоставке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоварыКДоставке, Стр);
				СтрокаТоварыКДоставке.ЗаданиеНаПеревозку = СтрокаЗадание.Ссылка;
				ТоварыРаспоряженийКДоставке.Удалить(Стр);
			КонецЦикла;
			
			Если СтрокаРаспоряжений.ОсобыеУсловияПеревозки Тогда
				РаспоряженияСОсобымиУсловиями.Добавить(СтрокаРаспоряжений.Распоряжение);
			КонецЕсли;

		КонецЦикла;
		
		Если ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений Тогда
			РаспоряженияКорневыеСтроки.Удалить(ТекущаяСтрокаРаспоряжений);
		Иначе
			ТекущаяВеткаРаспоряжений.Удалить(ТекущаяСтрокаРаспоряжений);
			// Если удалили последний элемент в ветке, удалим родителя
			Если ТекущаяВеткаРаспоряжений.Количество() = 0 Тогда
				РаспоряженияКорневыеСтроки.Удалить(ВершинаТекущейВеткиРаспоряжений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	ЗаполнитьСкладыПунктовИЗаданий();
	ДоставкаТоваров.ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая);
	Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока = ИДСтрокиНазначения;
	УстановитьДоступностьЭлементов();
	
	ДоставкаТоваров.ЗаполнитьПризнакДоставляетсяПолностью(ТоварыКДоставке.Выгрузить((Новый Структура("ЗаданиеНаПеревозку",СтрокаЗадание.Ссылка))),
		Объект.РаспоряженияВЗаданияхНаПеревозку, ИзмененныеДобавленныеСтрокиРаспоряжений, СтрокаЗадание.Ссылка);
	СохранитьЗаданиеВСтроке(СтрокаЗадание);
	
	Возврат РаспоряженияСОсобымиУсловиями;
	
КонецФункции

&НаСервере
Функция СтрокаПунктМаршрутаПоКлючу(ТекущаяСтрока, КлючСвязи)
	СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(ТекущаяСтрока);
	Для Каждого Стр ИЗ СтрокаЗадание.ПолучитьЭлементы() Цикл
		Если Стр.КлючСвязи = КлючСвязи Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСкладыПунктовИЗаданий(УчестьМодифицированность = Ложь);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияВЗаданияхНаПеревозку.Склад,
	|	РаспоряженияВЗаданияхНаПеревозку.Распоряжение,
	|	РаспоряженияВЗаданияхНаПеревозку.КлючСвязи,
	|	РаспоряженияВЗаданияхНаПеревозку.Ссылка
	|ПОМЕСТИТЬ РаспоряженияВЗаданияхНаПеревозку
	|ИЗ
	|	&РаспоряженияВЗаданияхНаПеревозку КАК РаспоряженияВЗаданияхНаПеревозку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СкладыПоПунктам.Склад) КАК КоличествоСкладов,
	|	МАКСИМУМ(СкладыПоПунктам.Склад) КАК Склад,
	|	СкладыПоПунктам.КлючСвязи,
	|	СкладыПоПунктам.Ссылка
	|ИЗ
	|	РаспоряженияВЗаданияхНаПеревозку КАК СкладыПоПунктам
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладыПоПунктам.КлючСвязи,
	|	СкладыПоПунктам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СкладыПоЗаданиям.Склад) КАК КоличествоСкладов,
	|	МАКСИМУМ(СкладыПоЗаданиям.Склад) КАК Склад,
	|	СкладыПоЗаданиям.Ссылка
	|ИЗ
	|	РаспоряженияВЗаданияхНаПеревозку КАК СкладыПоЗаданиям
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладыПоЗаданиям.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РаспоряженияВЗаданияхНаПеревозку",
		Объект.РаспоряженияВЗаданияхНаПеревозку.Выгрузить(,"Склад, Распоряжение, КлючСвязи, Ссылка"));
	Результат = Запрос.ВыполнитьПакет();
	СкладыПоПунктам = Результат[1].Выгрузить();
	СкладыПоЗаданиям = Результат[2].Выгрузить();
	Для Каждого СтрокаЗадание Из ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы() Цикл
		Если УчестьМодифицированность
			И НЕ СтрокаЗадание.Модифицирован Тогда
			Продолжить
		КонецЕсли;
		СкладыЗадания = СкладыПоЗаданиям.Найти(СтрокаЗадание.Ссылка, "Ссылка");
		Если СкладыЗадания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КоличествоСкладов = СкладыЗадания.КоличествоСкладов;
		Если КоличествоСкладов = 1
			И ЗначениеЗаполнено(СкладыЗадания.Склад) Тогда
			СтрокаЗадание.Склад = СкладыЗадания.Склад;
			УстановитьМодифицированность(СтрокаЗадание, ЗаданияМодифицированы);
		ИначеЕсли СтрокаЗадание.Склад <> Склад Тогда
			// Берем склад из шапки
			СтрокаЗадание.Склад = Склад;
			УстановитьМодифицированность(СтрокаЗадание, ЗаданияМодифицированы);
		КонецЕсли;
		
		Для Каждого СтрокаПункт Из СтрокаЗадание.ПолучитьЭлементы() Цикл
			Если УчестьМодифицированность
				И НЕ СтрокаПункт.Модифицирован Тогда
				Продолжить
			КонецЕсли;
			СкладыПункта = СкладыПоПунктам.Найти(СтрокаПункт.КлючСвязи, "КлючСвязи");
			КоличествоСкладов = СкладыПункта.КоличествоСкладов;
			Если КоличествоСкладов = 1 Тогда
				СтрокаПункт.Склад = СкладыПункта.Склад;
			Иначе
				Текст = НСтр("ru='%КоличествоCкладов% погрузки';uk='%КоличествоCкладов% завантаження'");
				Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСкладов,
						НСтр("ru='склад, склада, складов';uk='склад, склади, складів'")));
				СтрокаПункт.Склад = Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиПереходаДат()
	
	СтрокиЗаданияНаПеревозку = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы();
	Если СтрокиЗаданияНаПеревозку.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	ПредДатаС = СтрокиЗаданияНаПеревозку[0].ВремяС + 60*60*24;
	Для Каждого Стр из СтрокиЗаданияНаПеревозку Цикл
		
		Если НачалоДня(Стр.ВремяС) <> НачалоДня(ПредДатаС) Тогда
			
			Если НачалоДня(Стр.ВремяС) <> НачалоДня(Стр.ВремяПо) Тогда
				Стр.ПереходДаты = "ДатаСДатаПо"
			Иначе
				Стр.ПереходДаты = "ДатаС"
			КонецЕсли;
				
		Иначе
			
			Если НачалоДня(Стр.ВремяС) <> НачалоДня(Стр.ВремяПо) Тогда
				Стр.ПереходДаты = "ДатаПо"
			Иначе
				Стр.ПереходДаты = ""
			КонецЕсли;
			
		КонецЕсли;
		
		ПредДатаС = Стр.ВремяС;
		
		Для Каждого ВложеннаяСтрока из Стр.ПолучитьЭлементы() Цикл
			
			Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(ПредДатаС) Тогда
				
				Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(ВложеннаяСтрока.ВремяПо) Тогда
					ВложеннаяСтрока.ПереходДаты = "ДатаСДатаПо"
				Иначе
					ВложеннаяСтрока.ПереходДаты = "ДатаС"
				КонецЕсли;
				
			Иначе
				
				Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(ВложеннаяСтрока.ВремяПо) Тогда
					ВложеннаяСтрока.ПереходДаты = "ДатаПо"
				Иначе
					ВложеннаяСтрока.ПереходДаты = ""
				КонецЕсли;
				
			КонецЕсли;
			
			ПредДатаС = ВложеннаяСтрока.ВремяС;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуФормированияЗаданий()
	
	ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Очистить();
	Объект.РаспоряженияВЗаданияхНаПеревозку.Очистить();
	РаспоряженияНаДоставку.ПолучитьЭлементы().Очистить();
	ИтогоВес = 0;
	ИтогоОбъем = 0;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаданиеНаПеревозку.Номер КАК НомерЗадания,
	|	ЗаданиеНаПеревозку.Склад КАК Склад,
	|	ЗаданиеНаПеревозку.Ссылка КАК Ссылка,
	|	ЗаданиеНаПеревозку.Перевозчик КАК Перевозчик,
	|	ЗаданиеНаПеревозку.ЗаданиеВыполняет КАК ЗаданиеВыполняет,
	|	ВЫБОР
	|		КОГДА ЗаданиеНаПеревозку.ЗаданиеВыполняет = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЭтоНашаДоставка,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС КАК ДатаВремяРейсаПланС,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланПо КАК ДатаВремяРейсаПланПо,
	|	ЗаданиеНаПеревозку.ТранспортноеСредство КАК Транспорт,
	|	ЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьПредставление КАК ВместимостьПредставление,
	|	ЗаданиеНаПеревозку.ДополнительнаяИнформация КАК ДополнительнаяИнформацияЗадание,
	|	ЗаданиеНаПеревозку.ТранспортноеСредство.ГрузоподъемностьВТоннах / &КоэффициентПересчетаВТонны КАК ГрузоподъемностьВЕдПользователя,
	|	ЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьВКубическихМетрах / &КоэффициентПересчетаВКубическиеМетры КАК ВместимостьВЕдПользователя,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес КАК Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	ЗаданиеНаПеревозкуМаршрут.Зона КАК Зона,
	|	ЗаданиеНаПеревозкуМаршрут.Вес КАК Вес,
	|	ЗаданиеНаПеревозкуМаршрут.Объем КАК Объем,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяС КАК ВремяС,
	|	ЗаданиеНаПеревозкуМаршрут.ВремяПо КАК ВремяПо,
	|	ЗаданиеНаПеревозкуМаршрут.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки КАК ПорядокВМаршруте,
	|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО (ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозку.Ссылка)
	|ГДЕ
	|	ЗаданиеНаПеревозку.Проведен
	|	И ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)
	|	И ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ(&Склад)
	|	И ЗаданиеНаПеревозку.Операция = &ВидДоставки
	|	И ВЫБОР
	|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаданиеНаПеревозку.ЗаданиеВыполняет = &ОтборПоТипуИсполнителей
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВремяРейсаПланС,
	|	ДатаВремяРейсаПланПо,
	|	Ссылка,
	|	ПорядокВМаршруте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка,
	|	ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи,
	|	ЗаданиеНаПеревозкуРаспоряжения.Склад,
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.Вес,
	|	ЗаданиеНаПеревозкуРаспоряжения.Объем,
	|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель,
	|	ЗаданиеНаПеревозкуРаспоряжения.Перевозчик,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес КАК Адрес,
	|	ЗаданиеНаПеревозкуРаспоряжения.ДоставляетсяПолностью
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозку.Ссылка
	|			И (ЗаданиеНаПеревозку.Проведен)
	|			И (ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется))
	|			И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ИЛИ ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ (&Склад))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозкуМаршрут.Ссылка
	|			И ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи = ЗаданиеНаПеревозкуМаршрут.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.ЗаданиеНаПеревозку,
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ИЗ
	|	РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК Задание
	|		ПО (Задание.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку)
	|			И (Задание.Проведен)
	|			И (Задание.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется))
	|			И (Задание.Склад В ИЕРАРХИИ (&Склад))
	|			И (ТоварыКДоставке.ЗаданиеНаПеревозку.Операция = &ВидДоставки)
	|			И (ВЫБОР
	|				КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТоварыКДоставке.ЗаданиеНаПеревозку.ЗаданиеВыполняет = &ОтборПоТипуИсполнителей
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВТонны", КоэффициентПересчетаВТонны);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВКубическиеМетры", КоэффициентПересчетаВКубическиеМетры);
	Запрос.УстановитьПараметр("ВидДоставки", ВидДоставки);
	Запрос.УстановитьПараметр("ОтборПоТипуИсполнителей", ОтборПоТипуИсполнителей);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		СтрокаЗадание = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадание, Выборка);
		
		СтрокаЗадание.ПорядокВМаршруте = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерЗадания, Истина, Истина);
		СтрокаЗадание.ВремяС           = Выборка.ДатаВремяРейсаПланС;
		СтрокаЗадание.ВремяПо          = Выборка.ДатаВремяРейсаПланПо;
		СтрокаЗадание.ВремяСБезДаты    = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаЗадание.ВремяС);
		СтрокаЗадание.ВремяПоБезДаты   = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаЗадание.ВремяПо);
		СтрокаЗадание.ДополнительнаяИнформация = Выборка.ДополнительнаяИнформацияЗадание;
		СтрокаЗадание.Вес = 0;
		СтрокаЗадание.Объем = 0;
		СтрокаЗадание.КлючСвязи = "";
		
		ПредыдущаяЗона = Выборка.Зона;
		ЗонаИзменилась = Ложь;
		
		Пока Выборка.Следующий()
			И ЗначениеЗаполнено(Выборка.КлючСвязи) Цикл
			СтрокаПункт = СтрокаЗадание.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПункт, Выборка);
			СтрокаПункт.ВремяСБезДаты   = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаПункт.ВремяС);
			СтрокаПункт.ВремяПоБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаПункт.ВремяПо);
			СтрокаЗадание.Вес = СтрокаЗадание.Вес + СтрокаПункт.Вес;
			СтрокаЗадание.Объем = СтрокаЗадание.Объем + СтрокаПункт.Объем;
			ЗонаИзменилась = Макс(ЗонаИзменилась, ПредыдущаяЗона <> Выборка.Зона);
			СтрокаПункт.ЭтоНашаДоставка = 1;
		КонецЦикла;
		
		Если ЗонаИзменилась Тогда
			СтрокаЗадание.Зона = Справочники.ЗоныДоставки.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПризнакиПереходаДат();
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжение = Объект.РаспоряженияВЗаданияхНаПеревозку.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
		СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС,Выборка.ВремяПо);
		СтрокаРаспоряжение.ПолучательОтправительПредставление = ДоставкаТоваровКлиентСервер.ПредставлениеПолучателяОтправителя(Выборка.ПолучательОтправитель, Выборка.Перевозчик);
		СтрокаРаспоряжение.ЭтоПоручениеЭкспедитору = (Выборка.Распоряжение.Метаданные() = Метаданные.Документы.ПоручениеЭкспедитору);
	КонецЦикла;
	
	ТоварыКДоставке.Загрузить(Результат[2].Выгрузить());
	
	ЗаполнитьСкладыПунктовИЗаданий(Ложь);
	
	ДоставкаТоваров.ОбновитьСписокРаспоряженийНаДоставку(ЭтаФорма);
	
	ЗаданияМодифицированы = Ложь;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаданияНаПеревозкуСервер(ПомечаемыеНаУдалениеСтрокиЗадания = Неопределено)
	
	Если ЗаданияМодифицированы Тогда
		Для Каждого Стр Из ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы() Цикл
			ПометитьНаУдаление = Ложь;
			Если Стр.Модифицирован Тогда
				НовоеЗадание = НЕ ЗначениеЗаполнено(Стр.Ссылка);
				Если ПомечаемыеНаУдалениеСтрокиЗадания <> Неопределено
					И ПомечаемыеНаУдалениеСтрокиЗадания.Найти(Стр) <> Неопределено Тогда
					ПометитьНаУдаление = Истина;
				КонецЕсли;
				СохранитьЗаданиеВСтроке(Стр, ПометитьНаУдаление);
				Если НовоеЗадание И ЗначениеЗаполнено(Стр.Ссылка) Тогда
					НовыеЗадания.Добавить(Стр.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗаданияМодифицированы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаданиеВСтроке(СтрокаЗадание = Неопределено, ПометитьНаУдаление = Ложь)
	
	Если СтрокаЗадание = Неопределено Тогда
		СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока));
	КонецЕсли;
	
	Если Не СтрокаЗадание.Модифицирован Тогда
		Возврат;
	КонецЕсли;
	ИДСтрокаЗадание = СтрокаЗадание.ПолучитьИдентификатор();
	НовоеЗадание = НЕ ЗначениеЗаполнено(СтрокаЗадание.Ссылка)
		Или НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаЗадание.Ссылка);
	
	Если НовоеЗадание Тогда
		ДокОбъект = Документы.ЗаданиеНаПеревозку.СоздатьДокумент();
		Если ЗначениеЗаполнено(СтрокаЗадание.Ссылка) Тогда
			ДокОбъект.УстановитьСсылкуНового(СтрокаЗадание.Ссылка);
		КонецЕсли;
		ДокОбъект.Заполнить(Неопределено);
		ДокОбъект.Дата		= ТекущаяДата();
		ДокОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокОбъект.Приоритет);
		ДокОбъект.Статус	= Перечисления.СтатусыЗаданийНаПеревозку.Формируется;
		ДокОбъект.Операция  = ВидДоставки;
	Иначе
		Попытка
			ДокОбъект = СтрокаЗадание.Ссылка.ПолучитьОбъект();
			ДокОбъект.Заблокировать();
		Исключение
			Текст = НСтр("ru='Не удалось заблокировать %Задание для изменений.';uk='Не вдалося заблокувати %Задание для змін.'");
			Текст = СтрЗаменить(Текст,"%Задание", ДокОбъект.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ДокОбъект.Ссылка);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ДокОбъект.ТранспортноеСредство     = СтрокаЗадание.Транспорт;
	ДокОбъект.ДатаВремяРейсаПланС      = СтрокаЗадание.ВремяС;
	ДокОбъект.ДатаВремяРейсаПланПо     = СтрокаЗадание.ВремяПо;
	ДокОбъект.ДополнительнаяИнформация = СтрокаЗадание.ДополнительнаяИнформация;
	ДокОбъект.Перевозчик               = СтрокаЗадание.Перевозчик;
	Если ЗначениеЗаполнено(ДокОбъект.Перевозчик) Тогда		
		ДокОбъект.БанковскийСчетПеревозчика = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДокОбъект.Перевозчик);
	КонецЕсли;
	ДокОбъект.ЗаданиеВыполняет         = СтрокаЗадание.ЗаданиеВыполняет;
	ДокОбъект.Статус                   = Перечисления.СтатусыЗаданийНаПеревозку.Формируется;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортныеСредства.Код КАК АвтомобильГосударственныйНомер,
	|	ТранспортныеСредства.Марка КАК АвтомобильМарка,
	|	ТранспортныеСредства.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортныеСредства.Тип КАК АвтомобильТип,
	|	ТранспортныеСредства.ВместимостьВКубическихМетрах КАК АвтомобильВместимостьВКубическихМетрах,
	|	ТранспортныеСредства.ГрузоподъемностьВТоннах КАК АвтомобильГрузоподъемностьВТоннах,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаВид КАК ЛицензионнаяКарточкаВид,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаНомер КАК ЛицензионнаяКарточкаНомер,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаРегистрационныйНомер КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ТранспортныеСредства.ЛицензионнаяКарточкаСерия КАК ЛицензионнаяКарточкаСерия,
	|	ТранспортныеСредства.Прицеп КАК Прицеп,
	|	ТранспортныеСредства.ГосударственныйНомерПрицепа КАК ГосударственныйНомерПрицепа
	|ИЗ
	|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
	|ГДЕ
	|	ТранспортныеСредства.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТипыТранспортныхСредств.Наименование,
	|	ТипыТранспортныхСредств.ВместимостьВКубическихМетрах,
	|	ТипыТранспортныхСредств.ГрузоподъемностьВТоннах,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ТипыТранспортныхСредств КАК ТипыТранспортныхСредств
	|ГДЕ
	|	ТипыТранспортныхСредств.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтрокаЗадание.Транспорт);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокОбъект, Выборка);
	КонецЕсли;
	
	Если ТипЗнч(СтрокаЗадание.Склад) = Тип("Строка")
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаЗадание.Склад,"ЭтоГруппа") = Истина Тогда
		ДокОбъект.Склад = Склад;
	Иначе
		ДокОбъект.Склад = СтрокаЗадание.Склад;
	КонецЕсли;
	ДокОбъект.Маршрут.Очистить();
	Для Каждого ПунктЗадания Из СтрокаЗадание.ПолучитьЭлементы() Цикл
		СтрокаТЧ = ДокОбъект.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПунктЗадания);
	КонецЦикла;
	
	ДокОбъект.Распоряжения.Загрузить(Объект.РаспоряженияВЗаданияхНаПеревозку.Выгрузить(Новый Структура("Ссылка",СтрокаЗадание.Ссылка)));
	
	ДокОбъект.ДополнительныеСвойства.Вставить("ТоварыКДоставке", ТоварыКДоставке.Выгрузить((Новый Структура("ЗаданиеНаПеревозку",СтрокаЗадание.Ссылка))));
	
	Если ПометитьНаУдаление Тогда
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

	Если НовоеЗадание Тогда
		ИсторияРаботыПользователя.Добавить(ДокОбъект.Ссылка);
	КонецЕсли;
	ДокОбъект.Разблокировать();
	
	СтрокаЗадание.ПорядокВМаршруте	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Ссылка, "Номер"), Истина, Истина);
	СтрокаЗадание.Ссылка            = ДокОбъект.Ссылка;
	СтрокаЗадание.Модифицирован		= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПриАктивизацииСтрокиОбработчикОжидания()
	
	СтрокаЗаданийНаПеревозку = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Если СтрокаЗаданийНаПеревозку = Неопределено тогда
		Элементы.РаспоряженияВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("Ссылка",NULL);
	Иначе
		Если СтрокаЗаданийНаПеревозку.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РаспоряженияВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("Ссылка",СтрокаЗаданийНаПеревозку.Ссылка);
		Иначе
			Элементы.РаспоряженияВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаЗаданийНаПеревозку.КлючСвязи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСкладов()
	
	ФлагВидимости = Склад.Пустая() ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад,"ЭтоГруппа");
	Элементы.РаспоряженияНаДоставкуСклад.Видимость			 = ФлагВидимости;
	Элементы.ЗаданияНаПеревозкуВРаботеСклад.Видимость		 = ФлагВидимости;
	Элементы.РаспоряженияВЗаданияхНаПеревозкуСклад.Видимость = ФлагВидимости;
	Элементы.ДокументыДляПеревозчиковСклад.Видимость		 = ФлагВидимости;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборЗаданияНаПеревозкуВРаботе()
	
	Если Статус = "ВсеВРаботе" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Статус", Перечисления.СтатусыЗаданийНаПеревозку.Закрыто, ВидСравненияКомпоновкиДанных.НеРавно,,Истина);
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Статус", Перечисления.СтатусыЗаданийНаПеревозку[Статус], ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли Не ЗначениеЗаполнено(Статус) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Статус",,,,Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
		"Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Статус));
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Склад", Склад, ВидСравненияКомпоновкиДанных.ВИерархии,,Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
	Если ЗонаГруппаИлиПустая Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Зона", Зона, ВидСравненияКомпоновкиДанных.ВИерархии,,ЗначениеЗаполнено(Зона));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"Зона", Зона, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
			"ЗаданиеВыполняет", ОтборПоТипуИсполнителей, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(ОтборПоТипуИсполнителей));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияНаПеревозкуВРаботе,
		"Операция", ВидДоставки, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура УбратьСтрокиИзЗаданийСервер(ИсточникНакладные = Ложь, ПометитьЗаданияНаУдаление = Ложь, ИДСтрокиРаспоряжения = Неопределено)
	
	УдаляемыеИзЗаданийРаспоряжения = ТаблицаОбновляемыеРаспоряжения();
	
	ПомечаемыеНаУдалениеСтрокиЗадания = Новый Массив;
	
	Если ИсточникНакладные Тогда
		
		Для Каждого ИД Из Элементы.РаспоряженияВЗаданияхНаПеревозку.ВыделенныеСтроки Цикл
			
			Если ИДСтрокиРаспоряжения <> Неопределено Тогда
				СтрокаРаспоряжение = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиПоИдентификатору(ИДСтрокиРаспоряжения);
			Иначе
				СтрокаРаспоряжение = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиПоИдентификатору(ИД);
			КонецЕсли;
			
			ТекущаяСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока);
			КлючСвязи = СтрокаРаспоряжение.КлючСвязи;
			СтрокаПункт = СтрокаПунктМаршрутаПоКлючу(ТекущаяСтрока,КлючСвязи);
			СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(СтрокаПункт);
			Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание) Тогда
				Возврат;
			КонецЕсли;
			ИтогоВес = ИтогоВес + СтрокаРаспоряжение.Вес;
			ИтогоОбъем = ИтогоОбъем + СтрокаРаспоряжение.Объем;
			
			УстановитьМодифицированность(ТекущаяСтрока, ЗаданияМодифицированы);
			
			СтрокаДляОбновления = УдаляемыеИзЗаданийРаспоряжения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДляОбновления, СтрокаРаспоряжение);
			Объект.РаспоряженияВЗаданияхНаПеревозку.Удалить(СтрокаРаспоряжение);
			Если Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи)).Количество() = 0 Тогда
				СтрокаЗадание.ПолучитьЭлементы().Удалить(СтрокаПункт);
			Иначе
				СтрокаПункт.Вес = СтрокаПункт.Вес - СтрокаРаспоряжение.Вес;
				СтрокаПункт.Объем = СтрокаПункт.Объем - СтрокаРаспоряжение.Объем;
			КонецЕсли;
			СтрокаЗадание.Вес = СтрокаЗадание.Вес - СтрокаРаспоряжение.Вес;
			СтрокаЗадание.Объем = СтрокаЗадание.Объем - СтрокаРаспоряжение.Объем;
			
			ТоварыПоРаспоряжению = ТоварыКДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку,Распоряжение,Склад",СтрокаРаспоряжение.Ссылка, СтрокаРаспоряжение.Распоряжение, СтрокаРаспоряжение.Склад));
			Для Каждого СтрокаТовары Из ТоварыПоРаспоряжению Цикл
				ТоварыКДоставке.Удалить(СтрокаТовары);
			КонецЦикла;
			
			Если ИДСтрокиРаспоряжения <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИД Из Элементы.ЗаданияНаПеревозкуПланируемые.ВыделенныеСтроки Цикл
			
			ТекущаяСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИД);
			
			Если ТекущаяСтрока = Неопределено Тогда
				Продолжить; //Эту строку уже удалили при переносе родительской строки
			КонецЕсли;
			
			ИтогоВес = ИтогоВес + ТекущаяСтрока.Вес;
			ИтогоОбъем = ИтогоОбъем + ТекущаяСтрока.Объем;
			
			Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
				СтрокаЗадание = ТекущаяСтрока;
				Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание) Тогда
					Возврат;
				КонецЕсли;
				УстановитьМодифицированность(ТекущаяСтрока, ЗаданияМодифицированы);
				Ветка = СтрокаЗадание.ПолучитьЭлементы();
				Для Каждого СтрокаПункт Из Ветка Цикл
					
					Для Каждого СтрокаРаспоряжение Из Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаПункт.КлючСвязи)) Цикл
						СтрокаДляОбновления = УдаляемыеИзЗаданийРаспоряжения.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДляОбновления, СтрокаРаспоряжение);
						Объект.РаспоряженияВЗаданияхНаПеревозку.Удалить(СтрокаРаспоряжение);
					КонецЦикла;
					
				КонецЦикла;
				Ветка.Очистить();
				СтрокаЗадание.Вес = 0;
				СтрокаЗадание.Объем = 0;
				
				Если ПометитьЗаданияНаУдаление И ЗначениеЗаполнено(СтрокаЗадание.Ссылка) Тогда
					ПомечаемыеНаУдалениеСтрокиЗадания.Добавить(СтрокаЗадание);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
					ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
				КонецЕсли;
				
				ТоварыПоЗаданию = ТоварыКДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку",СтрокаЗадание.Ссылка));
				Для Каждого СтрокаТовары Из ТоварыПоЗаданию Цикл
					ТоварыКДоставке.Удалить(СтрокаТовары);
				КонецЦикла;
			Иначе
				
				СтрокаПункт = ТекущаяСтрока;
				СтрокаЗадание = СтрокаПункт.ПолучитьРодителя();
				Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание) Тогда
					Возврат;
				КонецЕсли;
				УстановитьМодифицированность(ТекущаяСтрока, ЗаданияМодифицированы);
				
				Ветка = СтрокаЗадание.ПолучитьЭлементы();
				Для Каждого СтрокаРаспоряжение Из Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаПункт.КлючСвязи)) Цикл
					СтрокаДляОбновления = УдаляемыеИзЗаданийРаспоряжения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляОбновления, СтрокаРаспоряжение);
					ТоварыПоРаспоряжению = ТоварыКДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку,Распоряжение,Склад",СтрокаРаспоряжение.Ссылка, СтрокаРаспоряжение.Распоряжение, СтрокаРаспоряжение.Склад));
					Для Каждого СтрокаТовары Из ТоварыПоРаспоряжению Цикл
						ТоварыКДоставке.Удалить(СтрокаТовары);
					КонецЦикла;
					Объект.РаспоряженияВЗаданияхНаПеревозку.Удалить(СтрокаРаспоряжение);
				КонецЦикла;
				
				Ветка.Удалить(СтрокаПункт);
				
				СтрокаЗадание.Вес = СтрокаЗадание.Вес - СтрокаПункт.Вес;
				СтрокаЗадание.Объем = СтрокаЗадание.Объем - СтрокаПункт.Объем;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СохранитьЗаданияНаПеревозкуСервер(ПомечаемыеНаУдалениеСтрокиЗадания);
	
	Для Каждого Стр Из ПомечаемыеНаУдалениеСтрокиЗадания Цикл
		ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Удалить(Стр);
	КонецЦикла;
		
	ДоставкаТоваров.ОбновитьСписокРаспоряженийНаДоставку(ЭтаФорма, УдаляемыеИзЗаданийРаспоряжения);
	
	ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	ЗаполнитьСкладыПунктовИЗаданий();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаОбновляемыеРаспоряжения(СтрокаРаспоряжение = Неопределено)
	
	ОбновляемыеРаспоряжения = Новый ТаблицаЗначений;
	ОбновляемыеРаспоряжения.Колонки.Добавить("Распоряжение", Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип);
	ОбновляемыеРаспоряжения.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Если СтрокаРаспоряжение <> Неопределено Тогда
		НоваяСтрока = ОбновляемыеРаспоряжения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспоряжение);
	КонецЕсли;
	
	Возврат ОбновляемыеРаспоряжения;
	
КонецФункции

&НаСервере
Функция ПоместитьЗаданияВХранилище()
	
	ТаблицаЗаданийПланируемых = Новый ТаблицаЗначений();
	ТаблицаЗаданийПланируемых.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаданиеНаПеревозку"));
	ТаблицаЗаданийПланируемых.Колонки.Добавить("Транспорт", Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства"));
	ТаблицаЗаданийПланируемых.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаданийНаПеревозку"));
	ТаблицаЗаданийПланируемых.Колонки.Добавить("ВремяС", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаданийПланируемых.Колонки.Добавить("ВремяПо", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Задание Из ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Задание.Транспорт) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
			Стр = ТаблицаЗаданийПланируемых.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Задание);
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗаданийПланируемых.ЗаполнитьЗначения(Перечисления.СтатусыЗаданийНаПеревозку.Формируется,"Статус");
	ТаблицаЗаданийПланируемых.Колонки.Транспорт.Имя = "ТранспортноеСредство";
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗаданийПланируемых, УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьРаспоряженияВХранилище(КлючСвязи)
	
	СтруктураПоиск = Новый Структура("КлючСвязи",КлючСвязи);
	РаспоряженияДляВыбора = Объект.РаспоряженияВЗаданияхНаПеревозку.Выгрузить(СтруктураПоиск);
	Возврат ПоместитьВоВременноеХранилище(РаспоряженияДляВыбора, УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Если НачалиПеретаскивание
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Если Элемент = Элементы.ЗаданияНаПеревозкуПланируемые 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ИначеЕсли ((ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции")
					ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементДерева"))) Тогда
			ИсточникЗадания = ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты");
			ИсточникНакладныеВЗаданиях = ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи");
			ИсточникРаспоряжения = ((НЕ ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты"))
								И (НЕ ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи")));
			Если (Элемент = Элементы.РаспоряженияНаДоставку И (ИсточникЗадания ИЛИ ИсточникНакладныеВЗаданиях))
				ИЛИ (Элемент = Элементы.ЗаданияНаПеревозкуПланируемые И ИсточникРаспоряжения)
				ИЛИ (Элемент = Элементы.ЗаданияНаПеревозкуПланируемые И ИсточникЗадания)
				ИЛИ (Элемент = Элементы.РаспоряженияВЗаданияхНаПеревозку И ИсточникРаспоряжения) Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДляТекущейСтраницы()
	
	СохранитьЗаданияОбновитьСписки();
	Если Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеЗаданийНаПеревозку Тогда
		РаспоряженияРазвернуть();
		ЗаданияПланируемыеРазвернуть();
	КонецЕсли;
	ОповеститьОСозданныхЗаданиях();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаданияОбновитьСписки()
	
	СохранитьЗаданияНаПеревозкуСервер();
	
	Если Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеЗаданийНаПеревозку Тогда
		ОбновитьСтраницуФормированияЗаданий();
	ИначеЕсли Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДляПеревозчиков Тогда
		ОбновитьДокументыДляПеревозчиковСервер();
	Иначе
		ОбновитьЗаданияВРаботеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ЗаданияЗаполнены = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Количество() > 0;
	Элементы.ЗаданияНаПеревозкуПланируемыеЗаданияВверх.Доступность     = ЗаданияЗаполнены;
	Элементы.ЗаданияНаПеревозкуПланируемыеЗаданияВниз.Доступность      = ЗаданияЗаполнены;
	Элементы.ДеревоФормированиеДоставкиРазбить.Доступность             = ЗаданияЗаполнены;
	Элементы.ДеревоФормированиеДоставкиОбъединить.Доступность          = ЗаданияЗаполнены;
	Элементы.ЗаданияНаПеревозкуПланируемыеОткрытьЗадание.Доступность   = ЗаданияЗаполнены;
	Элементы.УбратьСтрокиИзРейса.Доступность                           = ЗаданияЗаполнены;
	
	РаспоряженияЗаполнены = РаспоряженияНаДоставку.ПолучитьЭлементы().Количество() > 0;
	Элементы.ПеренестиСтрокиВРейс.Доступность = РаспоряженияЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаданияВРаботеСервер()
	
	УстановитьВидимостьСкладов();
	УстановитьОтборЗаданияНаПеревозкуВРаботе();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРазбитьПунктДоставкиСервер()
	
	КлючСвязи = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока).КлючСвязи;
	КоличествоРаспоряжений = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи)).Количество();
	Если КоличествоРаспоряжений < 2 Тогда
		Текст = НСтр("ru='Разбиение строки возможно для адресов, к которым относится более одного распоряжения';uk='Розбиття рядка можливе для адрес, до яких відноситься більше одного розпорядження'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Истина;
	КонецЕсли;
	Если КоличествоРаспоряжений > 2 Тогда
		Возврат Ложь; //Вернуться в клиент и открыть форму выбора распоряжений
	КонецЕсли;
	РазбитьПунктДоставкиСервер(); // Случай с двумя распоряжениями - просто разбиваем без выбора
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РазбитьПунктДоставкиСервер(ВыбранноеЗначение = Неопределено)
	ИДТекущейСтроки = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока;
	Если ВыбранноеЗначение <> Неопределено Тогда
		// Если более двух распоряжений для разбиения
		МассивРаспоряжений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресРаспоряжений);
	Иначе
		//Если надо разделить два распоряжения
		МассивРаспоряжений = Новый Массив();
		Отбор = Новый Структура("КлючСвязи", ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИДТекущейСтроки).КлючСвязи);
		МассивРаспоряжений.Добавить(Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Отбор)[1]);
	КонецЕсли;
	ТекущаяСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИДТекущейСтроки);
	ВеткаРодитель = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	НоваяСтрокаПункт = ВеткаРодитель.Вставить(ВеткаРодитель.Индекс(ТекущаяСтрока)+1);
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПункт, ТекущаяСтрока);
	НоваяСтрокаПункт.КлючСвязи = Новый УникальныйИдентификатор;
	Вес = 0; Объем = 0;
	Для Каждого Стр Из МассивРаспоряжений Цикл
		СтрокаРаспоряжение = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("Распоряжение, Склад", Стр.Распоряжение, Стр.Склад))[0];
		СтрокаРаспоряжение.КлючСвязи = НоваяСтрокаПункт.КлючСвязи;
		Вес = Вес + СтрокаРаспоряжение.Вес;
		Объем = Объем + СтрокаРаспоряжение.Объем;
	КонецЦикла;
	НоваяСтрокаПункт.Вес = Вес;
	НоваяСтрокаПункт.Объем = Объем;
	ТекущаяСтрока.Вес = ТекущаяСтрока.Вес - Вес;
	ТекущаяСтрока.Объем = ТекущаяСтрока.Объем - Объем;
	УстановитьМодифицированность(ТекущаяСтрока,ЗаданияМодифицированы);
	УстановитьМодифицированность(НоваяСтрокаПункт, ЗаданияМодифицированы);
	Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока = НоваяСтрокаПункт.ПолучитьИдентификатор();
	ЗаполнитьСкладыПунктовИЗаданий(Ложь);
	ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	
КонецПроцедуры

&НаСервере
Функция ОбъединитьПоВремениСервер()
	
	ФлагПерваяСтрока = Истина;
	Объединили = Ложь;
	Вес = 0;
	Объем = 0;
	ПредыдущийАдрес = "";
	МассивИД = Элементы.ЗаданияНаПеревозкуПланируемые.ВыделенныеСтроки;
	Для Каждого ИД Из МассивИД Цикл
		Строка = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИД);
		Родитель = Строка.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ФлагПерваяСтрока И ВРег(СокрЛП(Строка.Адрес)) <> ПредыдущийАдрес Тогда
			Возврат Ложь;
		КонецЕсли;
		ИндексРодителя = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Индекс(Родитель);
		ИндексСтроки = Родитель.ПолучитьЭлементы().Индекс(Строка);
		Если ФлагПерваяСтрока Тогда
			ФлагПерваяСтрока = Ложь;
			//Нужно найти самый верхний в списке пункт доставки, чтобы слить в него строки с одинаковыми адресами доставки
			МинИндексРодителя = ИндексРодителя;
			МинИндексСтроки = ИндексСтроки;
		Иначе
			Если МинИндексРодителя > ИндексРодителя Тогда
				МинИндексРодителя = ИндексРодителя;
				МинИндексСтроки = ИндексСтроки;
			ИначеЕсли (МинИндексРодителя = ИндексРодителя) И (МинИндексСтроки > ИндексСтроки) Тогда
				МинИндексСтроки = ИндексСтроки;
			КонецЕсли;
		КонецЕсли;
		Вес = Вес + Строка.Вес;
		Объем = Объем + Строка.Объем;
		ПредыдущийАдрес = ВРег(СокрЛП(Строка.Адрес));
		Объединили = Истина;
	КонецЦикла;
	Если Объединили Тогда
		СтрокаРезультат = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы()[МинИндексРодителя].ПолучитьЭлементы()[МинИндексСтроки];
		СтрокаРезультат.Вес = Вес;
		СтрокаРезультат.Объем = Объем;
		МассивИД.Удалить(МассивИД.Найти(СтрокаРезультат.ПолучитьИдентификатор()));
		КлючСвязи = СтрокаРезультат.КлючСвязи;
		ЗаданиеНаПеревозку = СтрокаРезультат.Ссылка;
		Для Каждого ИД Из МассивИД Цикл
			Строка = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИД);
			Ветка = Строка.ПолучитьРодителя().ПолучитьЭлементы();
			МассивРаспоряжений = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязи));
			Для Каждого СтрокаРаспоряжение Из МассивРаспоряжений Цикл 
				СтрокаРаспоряжение.КлючСвязи = КлючСвязи;				
				СтрокаРаспоряжение.Ссылка = ЗаданиеНаПеревозку;
			КонецЦикла;
			Ветка.Удалить(Строка);
		КонецЦикла;
		
		РаспоряженияВЗаданияхНаПеревозку = Объект.РаспоряженияВЗаданияхНаПеревозку.Выгрузить();
		РаспоряженияВЗаданияхНаПеревозку.Свернуть(
			"Распоряжение,КлючСвязи,ВремяС,ВремяПо,Ссылка,ДополнительнаяИнформация,Адрес,Склад,ПолучательОтправительПредставление,Время,ПолучательОтправитель,Перевозчик,ДоставляетсяПолностью",
			"Вес,Объем");
		Объект.РаспоряженияВЗаданияхНаПеревозку.Загрузить(РаспоряженияВЗаданияхНаПеревозку);
		
		УстановитьМодифицированность(СтрокаРезультат, ЗаданияМодифицированы);
		ЗаполнитьСкладыПунктовИЗаданий(Ложь);
		ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	КонецЕсли;
	Возврат Объединили;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПрошлымиРейсамиСервер(ДатаЗаданий = Неопределено)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, ДЕНЬ) КАК МаксДень
	|ПОМЕСТИТЬ ВТМаксДень
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Проведен
	|	И ЗаданиеНаПеревозку.Дата < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаданиеНаПеревозку.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаданиеНаПеревозку.ТранспортноеСредство КАК Транспорт,
	|	ЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьПредставление КАК ВместимостьПредставление,
	|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС КАК ДатаВремяРейсаПланС,
	|	ЗаданиеНаПеревозку.Дата КАК Дата,
	|	ЗаданиеНаПеревозку.ЗаданиеВыполняет КАК ЗаданиеВыполняет,
	|	ЗаданиеНаПеревозку.Перевозчик КАК Перевозчик
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксДень КАК ВТМаксДень
	|		ПО (ВТМаксДень.МаксДень = НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, ДЕНЬ))
	|ГДЕ
	|	ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ(&Склад)
	|	И (ЗаданиеНаПеревозку.ЗаданиеВыполняет = &ТипИсполнителей
	|			ИЛИ &ТипИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.ПустаяСсылка))
	|	И ЗаданиеНаПеревозку.Проведен
	|	И НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, ДЕНЬ) = &ДатаЗаданий";
	
	Если ДатаЗаданий = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, ДЕНЬ)", "&ДатаЗаданий");
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗаданий", ДатаЗаданий);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТипИсполнителей", ОтборПоТипуИсполнителей);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Результат.Пустой() Тогда
		Текст = НСтр("ru='На указанную дату нет проведенных заданий на перевозку';uk='На зазначену дату немає проведених завдань на перевезення'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Транспорт = Выборка.Транспорт;
		Если НачалоДня(Выборка.ДатаВремяРейсаПланС) > НачалоДня(Выборка.Дата) Тогда
			// Если планировали на будущие дни, тогда в планах на будущее используем время отправки рейсов из истории
			НоваяСтрока.ВремяС = НачалоДня(ТекущаяДата()) + (Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.Дата));
		ИначеЕсли Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.Дата) > ТекущаяДата() - НачалоДня(ТекущаяДата()) + 60*60 Тогда
			// Если планируем отправку сегодня и время еще не прошло - используем время отправки из истории
			НоваяСтрока.ВремяС = НачалоДня(ТекущаяДата()) + (Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.ДатаВремяРейсаПланС));
		Иначе
			// Если планируем отправку сегодня и время уже прошло - считаем, что рейс можно отправить через час после формирования
			НоваяСтрока.ВремяС = ТекущаяДата() + 60*60;
		КонецЕсли;
		НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
		НоваяСтрока.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(НоваяСтрока.ВремяС);
		НоваяСтрока.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(НоваяСтрока.ВремяПо);
		НоваяСтрока.Склад = Склад;
		РеквизитыТС = ПолучитьРеквизитыТС(
			Выборка.Транспорт, КоэффициентПересчетаВТонны, КоэффициентПересчетаВКубическиеМетры);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыТС);
		НоваяСтрока.ЗаданиеВыполняет = Выборка.ЗаданиеВыполняет;
		НоваяСтрока.Перевозчик       = Выборка.Перевозчик;
		НоваяСтрока.ЭтоНашаДоставка = (Выборка.ЗаданиеВыполняет = Перечисления.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба);
		УстановитьМодифицированность(НоваяСтрока, ЗаданияМодифицированы);
	КонецЦикла;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий()
	
	ПеренумероватьПунктыЗаданий();
	ЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьПунктыЗаданий()
	
	Для Каждого СтрЗадание Из ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы() Цикл
		Если СтрЗадание.Модифицирован Тогда
			Для Каждого СтрПункт Из СтрЗадание.ПолучитьЭлементы() Цикл
				СтрПункт.ПорядокВМаршруте = СтрЗадание.ПолучитьЭлементы().Индекс(СтрПункт)+1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
	
	ТекСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока);
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ТекВетка = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы();
	Иначе
		ТекВетка = Родитель.ПолучитьЭлементы();
	КонецЕсли;
	ТекИндекс = ТекВетка.Индекс(ТекСтрока);
	
	Позиция = 0;
	Пока Позиция < ТекВетка.Количество()
		И (Позиция = ТекИндекс
			ИЛИ (ТекСтрока.ВремяС > ТекВетка[Позиция].ВремяС
			ИЛИ (ТекСтрока.ВремяС = ТекВетка[Позиция].ВремяС
				И ТекСтрока.ВремяПо > ТекВетка[Позиция].ВремяПо))) Цикл
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Если Позиция > ТекИндекс Тогда
		ТекВетка.Сдвинуть(ТекИндекс,Позиция-ТекИндекс-1);
	Иначе
		ТекВетка.Сдвинуть(ТекИндекс,Позиция-ТекИндекс);
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		ПеренумероватьПунктыЗаданий();
	КонецЕсли;
	ЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеВремени(Источник);
	
	ТекСтрока = Элементы.ЗаданияНаПеревозкуПланируемые.ТекущиеДанные;
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если (ТекСтрока.ВремяС > ТекСтрока.ВремяПо) Тогда
		Если Источник = "ВремяС" Тогда
			ТекСтрока.ВремяПо = ТекСтрока.ВремяС;
			ТекСтрока.ВремяПоБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(ТекСтрока.ВремяПо);
		Иначе
			ТекСтрока.ВремяС = ТекСтрока.ВремяПо;
			ТекСтрока.ВремяСБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(ТекСтрока.ВремяС);
		КонецЕсли;
	КонецЕсли;
	
	Если Родитель <> Неопределено
		И (ТекСтрока.ВремяС < Родитель.ВремяС
			ИЛИ ТекСтрока.ВремяПо > Родитель.ВремяПо) Тогда
		Родитель.ВремяС = Мин(ТекСтрока.ВремяС,Родитель.ВремяС);
		Родитель.ВремяПо = Макс(ТекСтрока.ВремяПо,Родитель.ВремяПо);
		Родитель.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Родитель.ВремяС);
		Родитель.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Родитель.ВремяПо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаданияПроверитьОтсортироватьЗаполнитьПризнакиПерехода();
	
	ТекСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока);
	ТекИндекс = ЗаданияНаПеревозкуПланируемые.ПолучитьЭлементы().Индекс(ТекСтрока);
	Для Каждого Стр Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Стр.ВремяС < ТекСтрока.ВремяС Тогда
			Стр.ВремяС = ТекСтрока.ВремяС;
		КонецЕсли;
		Если Стр.ВремяПо < ТекСтрока.ВремяС Тогда
			Стр.ВремяПо = ТекСтрока.ВремяС;
		КонецЕсли;
		Если Стр.ВремяС > ТекСтрока.ВремяПо Тогда
			Стр.ВремяС = ТекСтрока.ВремяПо;
		КонецЕсли;
		Стр.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Стр.ВремяС);
		Стр.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(Стр.ВремяПо);
	КонецЦикла;
	
	ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтрокиВнутриСпискаЗаданийФормируемыхСервер(МассивИДСтрок,ИДСтрокиНазначения)
	
	СтрокаПриемник = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИДСтрокиНазначения);
	СтрокаРодитель = СтрокаПриемник.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		СтрокаРодитель = СтрокаПриемник;
		ИндексДляВставки = СтрокаРодитель.ПолучитьЭлементы().Количество();
	Иначе
		ИндексДляВставки = СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаПриемник);
	КонецЕсли;
	
	Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеДобавленныеСтрокиРаспоряжений = Новый Массив;
	
	Для Каждого ИДСтроки Из МассивИДСтрок Цикл
		ПеретаскиваемаяСтрока = ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(ИДСтроки);
		БывшийРодитель = ПеретаскиваемаяСтрока.ПолучитьРодителя();
		Если БывшийРодитель = Неопределено
			Или Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(БывшийРодитель) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексДляВставки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПеретаскиваемаяСтрока);
		БывшийРодитель.Вес = БывшийРодитель.Вес - НоваяСтрока.Вес;
		БывшийРодитель.Объем = БывшийРодитель.Объем - НоваяСтрока.Объем;
		СтрокаРодитель.Вес = СтрокаРодитель.Вес + НоваяСтрока.Вес;
		СтрокаРодитель.Объем = СтрокаРодитель.Объем + НоваяСтрока.Объем;
		НоваяСтрока.Ссылка = СтрокаРодитель.Ссылка;
		Если ИндексДляВставки > 0 Тогда
			Если ИндексДляВставки + 1 < СтрокаРодитель.ПолучитьЭлементы().Количество() Тогда
				НоваяСтрока.ВремяС = Мин(СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки - 1].ВремяПо,
										СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС);
				НоваяСтрока.ВремяПо = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС;
			Иначе
				НоваяСтрока.ВремяС = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки - 1].ВремяПо;
				НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
			КонецЕсли;
		Иначе
			НоваяСтрока.ВремяС = СтрокаРодитель.ВремяС;
			Если СтрокаРодитель.ПолучитьЭлементы().Количество() > 1 Тогда
				НоваяСтрока.ВремяПо = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС;
			Иначе
				НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
			КонецЕсли;
			НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
		КонецЕсли;
		НоваяСтрока.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(НоваяСтрока.ВремяС);
		НоваяСтрока.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(НоваяСтрока.ВремяПо);
		БывшийРодитель.ПолучитьЭлементы().Удалить(ПеретаскиваемаяСтрока);
		УстановитьМодифицированность(НоваяСтрока, ЗаданияМодифицированы);
		УстановитьМодифицированность(БывшийРодитель, ЗаданияМодифицированы);
		ИндексДляВставки = ИндексДляВставки + 1;
		НакладныеПоПункту = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",НоваяСтрока.КлючСвязи));
		
		Для Каждого Стр Из НакладныеПоПункту Цикл
			Стр.Ссылка = НоваяСтрока.Ссылка;
			ИзмененныеДобавленныеСтрокиРаспоряжений.Добавить(Стр);
			ТоварыПоРаспоряжению = ТоварыКДоставке.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку,Распоряжение,Склад",БывшийРодитель.Ссылка, Стр.Распоряжение, Стр.Склад));
			Для Каждого СтрокаТовары Из ТоварыПоРаспоряжению Цикл
				СтрокаТовары.ЗаданиеНаПеревозку = Стр.Ссылка;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	СохранитьЗаданияНаПеревозкуСервер();
	ДоставкаТоваров.ЗаполнитьПризнакДоставляетсяПолностью(ТоварыКДоставке.Выгрузить((Новый Структура("ЗаданиеНаПеревозку",СтрокаРодитель.Ссылка))),
		Объект.РаспоряженияВЗаданияхНаПеревозку, ИзмененныеДобавленныеСтрокиРаспоряжений, СтрокаРодитель.Ссылка);
	ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	УстановитьОтборЗаданияНаПеревозкуВРаботе();
	
	Если Статус = "ВсеВРаботе" ИЛИ НЕ ЗначениеЗаполнено(Статус) Тогда
		Элементы.ЗаданияНаПеревозкуВРаботеСтатус.Видимость = Истина;
	Иначе
		Элементы.ЗаданияНаПеревозкуВРаботеСтатус.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДляПеревозчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДокументыДляПеревозчиков.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗадания(СтрокаЗадание)
	
	Если ЗаданияМодифицированы Тогда
		СохранитьЗаданияНаПеревозкуСервер();
		ОповеститьОСозданныхЗаданиях();
	КонецЕсли;
	ПоказатьЗначение(Неопределено, СтрокаЗадание.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОСозданныхЗаданиях()
	
	Если НовыеЗадания.Количество() > 0 Тогда
		Если НовыеЗадания.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Создано %КоличествоЗаданий% на перевозку';uk='Створено %КоличествоЗаданий% на перевезення'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%КоличествоЗаданий%",
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(НовыеЗадания.Количество(),
					"задание,задания,заданий"));
			ПоказатьОповещениеПользователя(,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		Иначе
			ТекстЗаголовка = НСтр("ru='Создание:';uk='Створення:'");
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НовыеЗадания[0].Значение);
			ПоказатьОповещениеПользователя(
				ТекстЗаголовка,
				НавигационнаяСсылка,
				Строка(НовыеЗадания[0].Значение),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
	НовыеЗадания.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыТС(ТранспортноеСредство, КоэффициентПересчетаВТонны, КоэффициентПересчетаВКубическиеМетры)
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		РеквизитыТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство,
			"ВместимостьПредставление, ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах");
		
		СтруктураВозврата.Вставить("ВместимостьПредставление", РеквизитыТС.ВместимостьПредставление);
		СтруктураВозврата.Вставить("ГрузоподъемностьВЕдПользователя", РеквизитыТС.ГрузоподъемностьВТоннах / КоэффициентПересчетаВТонны);
		СтруктураВозврата.Вставить("ВместимостьВЕдПользователя", РеквизитыТС.ВместимостьВКубическихМетрах / КоэффициентПересчетаВКубическиеМетры);
		
	Иначе
		
		СтруктураВозврата.Вставить("ВместимостьПредставление", "");
		СтруктураВозврата.Вставить("ГрузоподъемностьВЕдПользователя", 0);
		СтруктураВозврата.Вставить("ВместимостьВЕдПользователя", 0);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗаданияНаПеревозкуПланируемыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ДатаРаспоряженийПриИзмененииСервер()
	
	ДоставкаТоваров.ОбновитьСписокРаспоряженийНаДоставку(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗонаПриИзмененииСервер()
	
	ЗонаГруппаИлиПустая = (НЕ ЗначениеЗаполнено(Зона)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Зона,"ЭтоГруппа"));
		
	СохранитьЗаданияОбновитьСписки();
	
	Если ЗонаГруппаИлиПустая Тогда
		Элементы.РаспоряженияНаДоставкуАдрес.Заголовок = НСтр("ru='Зона/Адрес';uk='Зона/Адреса'");
	Иначе
		Элементы.РаспоряженияНаДоставкуАдрес.Заголовок = НСтр("ru='Адрес';uk='Адреса'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЗаданиеПоСтрокеПункта(СтрокаМаршрута)
	
	РодительСтрокиМаршрута = СтрокаМаршрута.ПолучитьРодителя();
	Если РодительСтрокиМаршрута <> Неопределено Тогда
		Возврат РодительСтрокиМаршрута;
	Иначе
		Возврат СтрокаМаршрута;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодбораТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПослеПодбораТоваровСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодбораТоваровСервер(Результат)
	
	СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока));
	Если Не ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание) Тогда
		Возврат;
	КонецЕсли;
	
	ИДТекущейСтроки = Элементы.РаспоряженияВЗаданияхНаПеревозку.ТекущаяСтрока;
	СтрокаРаспоряжений = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиПоИдентификатору(ИДТекущейСтроки);
	СтрокаМаршрута = СтрокаПунктМаршрутаПоКлючу(СтрокаЗадание, СтрокаРаспоряжений.КлючСвязи);
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(Результат.АдресТоварыКДоставке);
	СтруктураПоиска = Новый Структура("ЗаданиеНаПеревозку,Распоряжение,Склад",
		СтрокаРаспоряжений.Ссылка, СтрокаРаспоряжений.Распоряжение, СтрокаРаспоряжений.Склад);
	СтрокиТоваров = ТоварыКДоставке.НайтиСтроки(СтруктураПоиска);
	Для Каждого Стр Из СтрокиТоваров Цикл
		ТоварыКДоставке.Удалить(Стр);
	КонецЦикла;
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		УбратьСтрокиИзЗаданийСервер(Истина,,ИДТекущейСтроки);
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ТаблицаТовары Цикл
		НоваяСтрока = ТоварыКДоставке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ЗаданиеНаПеревозку = СтрокаРаспоряжений.Ссылка;
	КонецЦикла;
	
	СтрокаРаспоряжений.ДоставляетсяПолностью = ТаблицаТовары[0].ВсеТовары;
	
	ИзменениеВес = Результат.ВесРаспоряжения - СтрокаРаспоряжений.Вес;
	ИзменениеОбъем = Результат.ОбъемРаспоряжения - СтрокаРаспоряжений.Объем;
	
	СтрокаРаспоряжений.Вес = Результат.ВесРаспоряжения;
	СтрокаРаспоряжений.Объем = Результат.ОбъемРаспоряжения;
	
	ИзменитьВесОбъемМаршрута(СтрокаМаршрута, ИзменениеВес, ИзменениеОбъем, ЗаданияМодифицированы);
	
	СохранитьЗаданиеВСтроке(СтрокаЗадание);
	
	ДоставкаТоваров.ОбновитьСписокРаспоряженийНаДоставку(ЭтаФорма, ТаблицаОбновляемыеРаспоряжения(СтрокаРаспоряжений));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВесОбъемМаршрута(СтрокаМаршрута, ИзменениеВес, ИзменениеОбъем, ЗаданияМодифицированы)
	
	
	СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + ИзменениеВес;
	СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + ИзменениеОбъем;
	
	СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(СтрокаМаршрута);
	СтрокаЗадание.Вес = СтрокаЗадание.Вес + ИзменениеВес;
	СтрокаЗадание.Объем = СтрокаЗадание.Объем + ИзменениеОбъем;
	
	УстановитьМодифицированность(СтрокаМаршрута, ЗаданияМодифицированы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровКДоставке()
	
	СтрокаРаспоряжений = Объект.РаспоряженияВЗаданияхНаПеревозку.НайтиПоИдентификатору(Элементы.РаспоряженияВЗаданияхНаПеревозку.ТекущаяСтрока);
	СтрокаЗадание = СтрокаЗаданиеПоСтрокеПункта(ЗаданияНаПеревозкуПланируемые.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуПланируемые.ТекущаяСтрока));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаданиеНаПеревозку", СтрокаРаспоряжений.Ссылка);
	ПараметрыФормы.Вставить("Распоряжение", СтрокаРаспоряжений.Распоряжение);
	ПараметрыФормы.Вставить("Склад", СтрокаРаспоряжений.Склад);
	ПараметрыФормы.Вставить("ТранспортноеСредство", СтрокаЗадание.Транспорт);
	ПараметрыФормы.Вставить("ПолучательОтправитель", СтрокаРаспоряжений.ПолучательОтправитель);
	ПараметрыФормы.Вставить("ВесЗадания", СтрокаЗадание.Вес * КоэффициентПересчетаВТонны);
	ПараметрыФормы.Вставить("ОбъемЗадания", СтрокаЗадание.Объем * КоэффициентПересчетаВКубическиеМетры);
	ПараметрыФормы.Вставить("ДатаВремяРейсаПланС", СтрокаЗадание.ВремяС);
	ПараметрыФормы.Вставить("АдресСпискаТоваровКДоставке",
		ПоместитьВХранилищеТоварыКДоставке(СтрокаРаспоряжений.Ссылка, СтрокаРаспоряжений.Распоряжение, СтрокаРаспоряжений.Склад));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораТоваров",ЭтотОбъект);
	
	ОчиститьСообщения();
	
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаПодбораТоваровКДоставке",
		ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеТоварыКДоставке(ЗаданиеНаПеревозку, Распоряжение, Склад)
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыКДоставке.Выгрузить(Новый Структура("ЗаданиеНаПеревозку, Распоряжение, Склад",ЗаданиеНаПеревозку,Распоряжение,Склад)));
	
КонецФункции

&НаСервере
Функция ПопытатьсяЗаблокироватьПолучитьСсылкуПоСтрокеЗадания(СтрокаЗадание)
	
	Если Не ЗначениеЗаполнено(СтрокаЗадание.Ссылка) Тогда
		СтрокаЗадание.Ссылка = Документы.ЗаданиеНаПеревозку.ПолучитьСсылку();
		НовыеЗадания.Добавить(СтрокаЗадание.Ссылка);
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ДокОбъект = СтрокаЗадание.Ссылка.ПолучитьОбъект();
		ДокОбъект.Заблокировать();
		ДокОбъект.Разблокировать();
		Возврат Истина;
	Исключение
		Текст = НСтр("ru='Не удалось заблокировать %Задание для изменений.';uk='Не вдалося заблокувати %Задание для змін.'");
		Текст = СтрЗаменить(Текст,"%Задание", СтрокаЗадание.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаЗадание.Ссылка);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВидДоставкиПриИзмененииСервер()
	
	НастроитьФормуПоВидуДоставки();
	СохранитьЗаданияОбновитьСписки();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуДоставки()
	Если ВидДоставки = Перечисления.ВидыДоставки.СоСклада Тогда
		
		Элементы.РаспоряженияНаДоставкуДата.Заголовок                              = НСтр("ru='Дата отгрузки';uk='Дата відвантаження'");
		Элементы.РаспоряженияНаДоставкуВремя.Заголовок                             = НСтр("ru='Желаемое время доставки';uk='Бажаний час доставки'");
		Элементы.РаспоряженияНаДоставкуПолучательОтправитель.Заголовок             = НСтр("ru='Получатель';uk='Одержувач'");
		Элементы.РаспоряженияВЗаданияхНаПеревозкуПолучательПредставление.Заголовок = НСтр("ru='Получатель';uk='Одержувач'");
		Элементы.РаспоряженияВЗаданияхНаПеревозкуВремя.Заголовок                   = НСтр("ru='Желаемое время доставки';uk='Бажаний час доставки'");
		Элементы.СтраницаДокументыДляПеревозчиков.Видимость = Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
		Элементы.ДокументТранспортнаяНакладнаяОформитьТранспортныеНакладныеПоЗаданиямНаПеревозку.Видимость = Истина;
		Элементы.ЗаданияНаПеревозкуВРаботеУстановитьСтатусКПогрузке.Видимость = Истина;
		Если Элементы.Статус.СписокВыбора.НайтиПоЗначению("КПогрузке") = Неопределено Тогда
			Элементы.Статус.СписокВыбора.Вставить(2, "КПогрузке", НСтр("ru='К погрузке';uk='До навантаження'"));
		КонецЕсли;
	Иначе
		
		Элементы.РаспоряженияНаДоставкуДата.Заголовок                              = НСтр("ru='Дата поступления';uk='Дата надходження'");
		Элементы.РаспоряженияНаДоставкуВремя.Заголовок                             = НСтр("ru='Время передачи товара';uk='Час передачі товару'");
		Элементы.РаспоряженияНаДоставкуПолучательОтправитель.Заголовок             = НСтр("ru='Отправитель';uk='Відправник'");
		Элементы.РаспоряженияВЗаданияхНаПеревозкуПолучательПредставление.Заголовок = НСтр("ru='Отправитель';uk='Відправник'");
		Элементы.РаспоряженияВЗаданияхНаПеревозкуВремя.Заголовок                   = НСтр("ru='Время передачи товара';uk='Час передачі товару'");
		Если Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаДокументыДляПеревозчиков Тогда
			Элементы.ГлавныеСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеЗаданийНаПеревозку;
		КонецЕсли;
		Элементы.СтраницаДокументыДляПеревозчиков.Видимость = Ложь;
		Элементы.ДокументТранспортнаяНакладнаяОформитьТранспортныеНакладныеПоЗаданиямНаПеревозку.Видимость = Ложь;
		Элементы.ЗаданияНаПеревозкуВРаботеУстановитьСтатусКПогрузке.Видимость = Ложь;
		ЭлементСписка = Элементы.Статус.СписокВыбора.НайтиПоЗначению("КПогрузке");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.Статус.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеревозчикПриИзмененииСервер()
	
	ОбновитьДокументыДляПеревозчиковСервер();
	Элементы.ДокументыДляПеревозчиковПеревозчик.Видимость = Не ЗначениеЗаполнено(Перевозчик);
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьИзДоставкиНаСервере()
	
	РежимыФормированияРасходныхОрдеровАвтоматически = Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Автоматически;
	РаспоряжениеНаОтгрузкуТип = Метаданные.ОпределяемыеТипы.РаспоряжениеНаОтгрузку.Тип;
	
	МассивИДВыбранныхСтрок = Элементы.РаспоряженияНаДоставку.ВыделенныеСтроки;
	
	РаспоряженияКорневыеСтроки = РаспоряженияНаДоставку.ПолучитьЭлементы();
	
	ИзмененныеДобавленныеСтрокиРаспоряжений = Новый Массив;
	
	Для каждого ИДСтроки из МассивИДВыбранныхСтрок Цикл
		
		ТекущаяСтрокаРаспоряжений = РаспоряженияНаДоставку.НайтиПоИдентификатору(ИДСтроки);
		
		// Если текущую строку уже удалили вместе с родителем
		Если ТекущаяСтрокаРаспоряжений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя();
		
		// Если в выбранных строках есть родитель этой строки, ничего не делаем, строка будет обработана вместе с родителем
		Если ВершинаТекущейВеткиРаспоряжений <> Неопределено
				И МассивИДВыбранныхСтрок.Найти(ВершинаТекущейВеткиРаспоряжений.ПолучитьИдентификатор())<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВершинаТекущейВеткиРаспоряжений = Неопределено Тогда
			ТекущаяВеткаРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
			ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений;
		Иначе
			ТекущаяВеткаРаспоряжений = ВершинаТекущейВеткиРаспоряжений.ПолучитьЭлементы();
		КонецЕсли;
			
		КоллекцияПодчиненныхСтрок = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
		
		Если КоллекцияПодчиненныхСтрок.Количество() = 0 тогда
			КоллекцияПодчиненныхСтрок = Новый Массив(1);
			КоллекцияПодчиненныхСтрок[0] = ТекущаяСтрокаРаспоряжений;
			Если ЗонаГруппаИлиПустая Тогда
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес - ТекущаяСтрокаРаспоряжений.Вес;
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем - ТекущаяСтрокаРаспоряжений.Объем;
			КонецЕсли;
		КонецЕсли;
		
		ИтогоВес = ИтогоВес - ТекущаяСтрокаРаспоряжений.Вес;
		ИтогоОбъем = ИтогоОбъем - ТекущаяСтрокаРаспоряжений.Объем;
		
		Для Каждого СтрокаРаспоряжений Из КоллекцияПодчиненныхСтрок Цикл
			
			СтруктураПоиска = Новый Структура("ИдентификаторВДеревеРаспоряжений", СтрокаРаспоряжений.ПолучитьИдентификатор());
			СтрокиРаспоряженийСТоварами = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(Документы.ЗаданиеНаПеревозку.ПустаяСсылка());
			НаборЗаписей.Отбор.Распоряжение.Установить(СтрокаРаспоряжений.Распоряжение);
			НаборЗаписей.Отбор.Склад.Установить(СтрокаРаспоряжений.Склад);
			Для Каждого Стр Из СтрокиРаспоряженийСТоварами Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Стр);
			КонецЦикла;
			
			НачатьТранзакцию();
			
			НаборЗаписей.Записать();
			
			Если РежимыФормированияРасходныхОрдеровАвтоматически
				И РаспоряжениеНаОтгрузкуТип.СодержитТип(ТипЗнч(СтрокаРаспоряжений.Распоряжение)) Тогда
				Если СкладыСервер.ТребуетсяПереоформитьРасходныеОрдера(СтрокаРаспоряжений.Склад, СтрокаРаспоряжений.ПолучательОтправитель) Тогда
					СкладыСервер.ДобавитьВОчередьФормированияРасходныхОрдеров(СтрокаРаспоряжений.Склад, СтрокаРаспоряжений.ПолучательОтправитель);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
		Если ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений Тогда
			РаспоряженияКорневыеСтроки.Удалить(ТекущаяСтрокаРаспоряжений);
		Иначе
			ТекущаяВеткаРаспоряжений.Удалить(ТекущаяСтрокаРаспоряжений);
			// Если удалили последний элемент в ветке, удалим родителя
			Если ТекущаяВеткаРаспоряжений.Количество() = 0 Тогда
				РаспоряженияКорневыеСтроки.Удалить(ВершинаТекущейВеткиРаспоряжений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренумероватьИЗаполнитьПризнакиПереходаДатВСпискеЗаданий();
	ДоставкаТоваров.ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая);
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокРаспоряженийНаДоставку(РаспоряжениеАдресИлиСсылка = Неопределено)
	
	ОбновляемыеРаспоряжения = Неопределено;
	Если РаспоряжениеАдресИлиСсылка <> Неопределено Тогда
		
		Если ТипЗнч(РаспоряжениеАдресИлиСсылка) = Тип("Строка") Тогда
			ОбновляемыеРаспоряжения = ПолучитьИзВременногоХранилища(РаспоряжениеАдресИлиСсылка);
		Иначе
			ОбновляемыеРаспоряжения = ТаблицаОбновляемыеРаспоряжения();
			НоваяСтрока = ОбновляемыеРаспоряжения.Добавить();
			НоваяСтрока.Распоряжение = РаспоряжениеАдресИлиСсылка;
			НоваяСтрока.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РаспоряжениеАдресИлиСсылка,"Склад");
		КонецЕсли;
		
	КонецЕсли;
	
	ДоставкаТоваров.ОбновитьСписокРаспоряженийНаДоставку(ЭтаФорма, ОбновляемыеРаспоряжения);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущаяСтрока = Элементы.РаспоряженияНаДоставку.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено
		Или ТекущаяСтрока.ОформлениеСтроки = 5 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = Новый Картинка;
		НадписьПодвалЛегенда = "";
	ИначеЕсли ТекущаяСтрока.Картинка = 4 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = БиблиотекаКартинок.Предупреждение;
		НадписьПодвалЛегенда = НСтр("ru='Особые условия перевозки.';uk='Особливі умови перевезення.'");
	ИначеЕсли ТекущаяСтрока.Картинка = 2 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = БиблиотекаКартинок.Вопрос;
		НадписьПодвалЛегенда = НСтр("ru='Не указан способ доставки.';uk='Не вказаний спосіб доставки.'");
	ИначеЕсли ТекущаяСтрока.Картинка = 5 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = БиблиотекаКартинок.ВопросСПредупреждением;
		НадписьПодвалЛегенда = НСтр("ru='Не указан способ доставки. Особые условия перевозки.';uk='Не вказаний спосіб доставки. Особливі умови перевезення.'");
	ИначеЕсли ТекущаяСтрока.Картинка = 0 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = БиблиотекаКартинок.ЗаданиеВыполняетПеревозчик;
		НадписьПодвалЛегенда = НСтр("ru='Везет перевозчик.';uk='Везе перевізник.'");
	ИначеЕсли ТекущаяСтрока.Картинка = 3 Тогда
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = БиблиотекаКартинок.ЗаданиеВыполняетПеревозчикОсобыеУсловия;
		НадписьПодвалЛегенда = НСтр("ru='Везет перевозчик. Особые условия перевозки.';uk='Везе перевізник. Особливі умови перевезення.'");
	Иначе
		Элементы.РаспоряженияНаДоставкуКартинка.КартинкаПодвала = Новый Картинка;
		НадписьПодвалЛегенда = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

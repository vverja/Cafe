
&НаКлиенте
Перем КэшируемыеЗначения;

&НаКлиенте
Перем ДатаПоставкиДоИзменения;

&НаКлиенте
Перем СтрокаДоИзменения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Заполнение дополнительных реквизитов
	ТекстНеЗаполнено = НСтр("ru='<не заполнено>';uk='<не заповнено>'");
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЭлементыФормыКлиентскогоПриложенияТакси();
	
	//Заполнение заголовков колонок корзины заказов.
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Элементы.ВесЗаказа.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Вес (%1)';uk='Вага (%1)'"), ЕдиницаИзмеренияВеса);
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.СуммаЗаказа.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сумма (%1)';uk='Сума (%1)'"), ВалютаУправленческогоУчета); 
	
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ЕстьДоступКИзменениюУпаковки = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ТоварныеОграничения);
	
	//Ограничение списка выбора типа обеспечения в простых и расширенных отборах.
	ПараметрОтборПоТипуОбеспечения = Неопределено;
	Параметры.Свойство("ОтборПоТипуОбеспечения", ПараметрОтборПоТипуОбеспечения);
	ОбработатьДоступностьТиповОбеспечения(ПараметрОтборПоТипуОбеспечения);
	
	//Инициализация компоновщика настроек для отображения таблицы с отборами на первом шаге помощника.
	Если Элементы.ОтборПоТипуОбеспечения.Вид = ВидПоляФормы.ПолеНадписи Тогда
		ДоступныеТипыОбеспечения = Новый Массив();
		ДоступныеТипыОбеспечения.Добавить(ОтборПоТипуОбеспечения);
	Иначе
		ДоступныеТипыОбеспечения = Элементы.ОтборПоТипуОбеспечения.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	ИнициализироватьКомпоновщикНастроекДляОтборов(ДоступныеТипыОбеспечения);
	ВосстановитьНастройки();
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "ТипОбеспечения", ОтборПоТипуОбеспечения, Ложь);
	
	УстановитьСтраницыПомощника("ШагОтборПотребностей");
	
	Элементы.ПанельРекомендаций.Видимость = Элементы.РекомендацииЗапасы.Пометка;
	
	ЗаполнитьСписокВыбораФильтраУровняЗапаса();
	
	УстановитьПодсказки();
	УстановитьДоступностьЭлементовФормыПоПравам();
	
	КэшированныеЗначения = Новый Структура("НизшийПриоритет, ВысшийПриоритет",
		Справочники.Приоритеты.ПолучитьНизшийПриоритет(),
		Справочники.Приоритеты.ПолучитьВысшийПриоритет());
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
	Иначе
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности
		И КорзинаЗаказов.ПолучитьЭлементы().Количество() > 0 Тогда

		Если Не ОчисткаТаблицыПотребностейОтветПолучен Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			ОчисткаТаблицыПотребностейВопрос("Закрытие"); // Вызов немодального окна вопроса.
		Иначе
			ОчисткаТаблицыПотребностейОтветПолучен = Ложь; // Сброс признака.
		КонецЕсли;

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагСформированныеЗаказы
		И РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку
		И (ТаблицаДокументы.Итог("НеПоставленВГрафик")
			+ ТаблицаДокументы.Итог("НеПоставленВГрафикПроизводства")) < ТаблицаДокументы.Количество() Тогда

		РазместитьЗаказыНаОтгрузку();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	СохранитьНастройки();

КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	ИмяТаблицы = ?(Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы,
	"Запасы", "ЗаказыКОбеспечению");
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораУпаковкиЕдиницы" Тогда
		
		Поставка = Элементы[ИмяТаблицы].ТекущиеДанные;
		ЗаполнитьЗаписатьУпаковкуПоДеревуИндексов(Поставка.ИДИндекса, ВыбранноеЗначение);
		
		СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, ИмяТаблицы = "Запасы");
		
		ОтобразитьРасчитанноеОкругление(Поставка, ИмяТаблицы = "Запасы");
		
		ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);
		
	Иначе
		
		Если Не ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("ПараметрыПоставкиОптимальные") Тогда
			
			Поставка = Элементы[ИмяТаблицы].ТекущиеДанные;
			Если Поставка.Отметка Тогда
				ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, ИмяТаблицы <> "Запасы");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Поставка, ВыбранноеЗначение.ПараметрыПоставкиОптимальные);
			
			Если Поставка.Отметка Тогда
				ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, Поставка.Округлено, ИмяТаблицы <> "Запасы");
			КонецЕсли;
			
			СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, ИмяТаблицы = "Запасы");
			
			ОтобразитьРасчитанноеОкругление(Поставка, ИмяТаблицы = "Запасы");
			
			ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);
			
		ИначеЕсли ВыбранноеЗначение.Свойство("КодУровняЗапаса") Тогда
			
			ФильтрУровеньЗапаса = УровеньЗапасаПоКоду(ВыбранноеЗначение.КодУровняЗапаса);
			ОтборЗапасыНаСервере();
			
		ИначеЕсли ВыбранноеЗначение.Свойство("СпособОбеспечения") Тогда
			
			Если Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы Тогда
				
				РассчитатьСтрокуТаблицыЗапасыНаКлиенте(ВыбранноеЗначение.СпособОбеспечения);
				
			Иначе
				
				РассчитатьСтрокуТаблицыЗаказыКОбеспечениюНаКлиенте(Элементы.ЗаказыКОформлению.ТекущаяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если (ИмяСобытия    = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_ЗаказНаСборку"
		Или ИмяСобытия = "Запись_ЗаказПоставщику")
		И Элементы.Помощник.ТекущаяСтраница = Элементы.ШагСформированныеЗаказы Тогда
		
		Ссылка = Источник;
		
		ОбновитьРеквизитыТаблицыДокументов(Ссылка);
		ОбновитьНадписьПредупреждениеОРазмещенииЗаказов();

	КонецЕсли;

	Если ИмяСобытия = "Запись_СпособОбеспеченияПотребностей" Тогда
		
		СпособыОбеспеченияПриИзмененииСпособаОбеспечения();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СерверныеОтборы

&НаКлиенте
Процедура ОтборПоСкладуПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоСкладу);
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Склад", ОтборПоСкладу, ЭтоОтборПоГруппе);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНазначениюПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Назначение", ОтборПоНазначению, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСегментуПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоСегменту);
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "СегментНоменклатуры", ОтборПоСегменту, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоНоменклатуре);
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Номенклатура", ОтборПоНоменклатуре, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоМаркеПриИзменении(Элемент)

	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоМарке);
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Номенклатура.Марка", ОтборПоМарке, ЭтоОтборПоГруппе);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТоварнойКатегорииПриИзменении(Элемент)

	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоТоварнойКатегории);
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Номенклатура.ТоварнаяКатегория", ОтборПоТоварнойКатегории, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "Подразделение", ОтборПоПодразделению, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуОбеспеченияПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(
		КомпоновщикНастроекДляОтборов, "ТипОбеспечения", ОтборПоТипуОбеспечения, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИсточникуОбеспеченияПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоИсточникуОбеспечения);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов,
		"ИсточникОбеспечения", ОтборПоИсточникуОбеспечения, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизвольныеОтборыНажатие(Элемент)
	Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПростыеОтборыНажатие(Элемент)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		Элементы.СтраницыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Установленные отборы невозможно преобразовать к виду простых отборов.';uk='Встановлені відбори неможливо перетворити до виду простих відборів.'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КлиентскиеФильтры

&НаКлиенте
Процедура ФильтрОтметкаЗапасыПриИзменении(Элемент)

	ОтборЗапасыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрУровеньЗапасаПриИзменении(Элемент)

	ОтборЗапасыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрУровеньЗапасаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КодУровняЗапаса", КодУровняЗапаса(ФильтрУровеньЗапаса));
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораУровняЗапаса", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрУровеньЗапасаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКЗаказуНеПозднееПриИзменении(Элемент)

	ОтборЗапасыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрОтметкаЗаказыПриИзменении(Элемент)

	ОтборЗаказыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриоритетПриИзменении(Элемент)

	ОтборЗаказыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеРанееПриИзменении(Элемент)

	ОтборЗаказыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеПозднееПриИзменении(Элемент)

	ОтборЗаказыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеРанееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеРанее(СтрокаВДату(Текст), СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеПозднееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеПозднее(СтрокаВДату(Текст), СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеПозднееОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеПозднее(ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрКОтгрузкеНеРанееОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеРанее(ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрНеобеспеченныеПриИзменении(Элемент)

	ОтборЗаказыНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ПанельРекомендаций

&НаКлиенте
Процедура МинимальныйЗапас1Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйЗаказ1Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаказа2Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура МинимальныйЗапас2Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйЗаказ2Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СрокПоставки3Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиваемыйПериод3Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СреднедневноеПотребление3Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СтраховойЗапас3Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаказа4Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СрокПоставки43Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиваемыйПериод43Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СреднедневноеПотребление4Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура СтраховойЗапас4Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМетодОбеспечения("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаказа6Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("ЗаказыКОбеспечению");

КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаказа7Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("ЗаказыКОбеспечению");

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиваемыйПериод7Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("ЗаказыКОбеспечению");

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставки9Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("ЗаказыКОбеспечению");

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечиваемыйПериод9Нажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьСпособОбеспечения("ЗаказыКОбеспечению");

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьСтатусПодтвержденНажатие(Элемент)

	МассивСсылок = Новый Массив();
	Для Каждого СтрокаСписка Из ТаблицаДокументы Цикл

		ИдентификаторСтроки = СтрокаСписка.ПолучитьИдентификатор();
		Если ТипЗнч(СтрокаСписка.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") И СтрокаСписка.НеПоставленВГрафик = 1 Тогда

			МассивСсылок.Добавить(Новый Структура("Ссылка, ИдентификаторСтроки", СтрокаСписка.Документ, ИдентификаторСтроки));

		КонецЕсли;

	КонецЦикла;

	УстановитьСтатусНаСервере(МассивСсылок, "Подтвержден");
	ОбновитьНадписьПредупреждениеОРазмещенииЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПроизводствуНажатие(Элемент)

	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыОбеспечения

&НаКлиенте
Процедура СпособыОбеспеченияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СпособыОбеспеченияСпособОбеспечения Тогда
		
		СтандартнаяОбработка = Ложь;
		ИмяОткрываемойФормы = "Справочник.СпособыОбеспеченияПотребностей.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", Элементы.СпособыОбеспечения.ТекущиеДанные.СпособОбеспечения);
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыОбеспеченияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаТаблицы = Элементы.СпособыОбеспечения.ТекущиеДанные;
	РедактируемоеПоле = Элементы.СпособыОбеспечения.ТекущийЭлемент;
	Если РедактируемоеПоле = Элементы.СпособыОбеспеченияДатаПоставки Тогда
		
		Если ПрошедшаяДата(СтрокаТаблицы.НомерСтроки - 1,
			СтрокаТаблицы.ДатаПоставки, "ДатаПоставки", НачалоДня(ТекущаяДата())) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли РедактируемоеПоле = Элементы.СпособыОбеспеченияДатаСледующейПоставки Тогда
		
		Если ПрошедшаяДата(СтрокаТаблицы.НомерСтроки - 1,
			СтрокаТаблицы.ДатаСледующейПоставки, "ДатаСледующейПоставки", НачалоДня(ТекущаяДата())) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыОбеспеченияДатаПоставкиПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.СпособыОбеспечения.ТекущиеДанные;
	СтрокаТаблицы.НетДатыПоставкиПоКалендарю = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.МетодОбеспечения Тогда

		СтандартнаяОбработка = Ложь;
		ОткрытьМетодОбеспечения("Запасы");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииСтроки(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.Запасы.ПриАктивизацииСтроки");
	
	Если Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы Тогда
		ПодключитьОбработчикОжидания("ЗапасыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(Элемент)

	СтрокаЗапасы = Элементы.Запасы.ТекущиеДанные;
	Если Элемент.ТекущийЭлемент = Элементы.СпособОбеспеченияЗапасы И СтрокаЗапасы <> Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		СпискВыбора = ЗаполнитьСписокВыбораСпособовОбеспеченияТовара(
			СтрокаЗапасы.Номенклатура, СтрокаЗапасы.Характеристика, СтрокаЗапасы.Склад);

		Элементы.СпособОбеспеченияЗапасы.СписокВыбора.Очистить();

		Для Каждого Элемент Из СпискВыбора Цикл

			Элементы.СпособОбеспеченияЗапасы.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗапасыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ОтметкаЗапасы.ПриИзменении");
	
	Поставка = Элементы.Запасы.ТекущиеДанные;
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Истина);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Истина);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуЗапасыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.КЗаказуЗапасы.ПриИзменении");
	
	Поставка = Элементы.Запасы.ТекущиеДанные;
	Поставка.Отметка = Поставка.КЗаказу > 0;
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Истина);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Истина);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗапасыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.СпособОбеспеченияЗапасы.ПриИзменении");
	
	Поставка = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСтрокуТаблицыЗапасыНаКлиенте(Поставка.СпособОбеспечения);
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Истина);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Истина);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗапасыОчистка(Элемент, СтандартнаяОбработка)

	Поставка = Элементы.Запасы.ТекущиеДанные;
	Поставка.Отметка = Ложь;
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Поставка = Элементы.Запасы.ТекущиеДанные;
	Поставка.Отметка = Ложь;
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗапасыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Текст = "" Тогда

		Поставка = Элементы.Запасы.ТекущиеДанные;

		Если Поставка.Отметка Тогда

			ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

		КонецЕсли;

		ОчиститьУсловияЗакупок(Поставка);

		Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;
		Поставка.СпособОбеспечения = ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка");

		КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗапасыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Поставка = Элементы.Запасы.ТекущиеДанные;

	ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ЭтоРабота, ТипОбеспечения");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Поставка);
	ПараметрыФормы.ЭтоРабота = Ложь;

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораИсточникаОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗапасыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

	КонецЕсли;

	Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;

	ОчиститьУсловияЗакупок(Поставка);

	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

	КонецЕсли;

	ОчиститьУсловияЗакупок(Поставка);

	Поставка.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(ВыбранноеЗначение, ТекстНеЗаполнено);
	
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗапасыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	Если Текст = "" Тогда

		Поставка = Элементы.Запасы.ТекущиеДанные;

		Если Поставка.Отметка Тогда

			ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

		КонецЕсли;

		ОчиститьУсловияЗакупок(Поставка);

		Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;

		КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗапасыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

	КонецЕсли;

	Поставка.ДатаПоставки = '00010101';

	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

	КонецЕсли;

	Поставка.ДатаПоставки = ВыбранноеЗначение;
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗапасыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДатаПоставкиДоИзменения = Элементы.Запасы.ТекущиеДанные.ДатаПоставки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗапасыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ДатаПоставкиЗапасы.ПриИзменении");
	
	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		НоваяДатаПоставки = Поставка.ДатаПоставки;
		Поставка.ДатаПоставки = ДатаПоставкиДоИзменения;
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);
		Поставка.ДатаПоставки = НоваяДатаПоставки;

	КонецЕсли;

	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыКОбеспечению

&НаКлиенте
Процедура ЗаказыКОбеспечениюПриАктивизацииЯчейки(Элемент)

	СтрокаЗаказы = Элементы.ЗаказыКобеспечению.ТекущиеДанные;
	Если Элемент.ТекущийЭлемент = Элементы.СпособОбеспеченияЗаказы И СтрокаЗаказы <> Неопределено Тогда

		СтандартнаяОбработка = Ложь;
		Если СтрокаЗаказы.ЭтоРабота Тогда

			СпискВыбора = ЗаполнитьСписокВыбораСпособовОбеспеченияРаботы(
				СтрокаЗаказы.Номенклатура, СтрокаЗаказы.Характеристика);

		Иначе

			СпискВыбора = ЗаполнитьСписокВыбораСпособовОбеспеченияТовара(
				СтрокаЗаказы.Номенклатура, СтрокаЗаказы.Характеристика, СтрокаЗаказы.Склад);

		КонецЕсли;

		Элементы.СпособОбеспеченияЗаказы.СписокВыбора.Очистить();

		Для Каждого Элемент Из СпискВыбора Цикл

			Элементы.СпособОбеспеченияЗаказы.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОбеспечениюНоменклатураОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОбеспечениюПриАктивизацииСтроки(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ЗаказыКОбеспечению.ПриАктивизацииСтроки");
	
	Если Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗаказы Тогда
		ПодключитьОбработчикОжидания("ЗаказыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОбеспечениюЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОбеспечениюЗаказОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОбеспечениюНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОтметкаЗаказыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ОтметкаЗаказы.ПриИзменении");
	
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Ложь);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Ложь);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);

КонецПроцедуры

&НаКлиенте
Процедура КЗаказуЗаказыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.КЗаказуЗаказы.ПриИзменении");
	
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	Поставка.Отметка = Поставка.КЗаказу > 0;

	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Ложь);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Ложь);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗаказыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.СпособОбеспеченияЗаказы.ПриИзменении");
	
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	
	РассчитатьСтрокуТаблицыЗаказыКОбеспечениюНаКлиенте(Поставка.СпособОбеспечения);
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Ложь);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Ложь);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗаказыОчистка(Элемент, СтандартнаяОбработка)

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	Поставка.Отметка = Ложь;
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	Поставка.Отметка = Ложь;
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияЗаказыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Текст = "" Тогда

		Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

		Если Поставка.Отметка Тогда

			ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

		КонецЕсли;

		ОчиститьУсловияЗакупок(Поставка);

		Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;
		Поставка.СпособОбеспечения = ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка");

		КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗаказыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ЭтоРабота, ТипОбеспечения");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Поставка);

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораИсточникаОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗаказыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

	КонецЕсли;

	Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;

	ОчиститьУсловияЗакупок(Поставка);

	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

	КонецЕсли;

	ОчиститьУсловияЗакупок(Поставка);

	Поставка.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(ВыбранноеЗначение, ТекстНеЗаполнено);
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗаказыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	Если Текст = "" Тогда

		Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

		Если Поставка.Отметка Тогда

			ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

		КонецЕсли;

		ОчиститьУсловияЗакупок(Поставка);

		Поставка.ИсточникОбеспечения = ТекстНеЗаполнено;

		КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗаказыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

	КонецЕсли;

	Поставка.ДатаПоставки = '00010101';

	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗаказыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

	КонецЕсли;

	Поставка.ДатаПоставки = ВыбранноеЗначение;
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗаказыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ДатаПоставкиДоИзменения = Элементы.ЗаказыКОбеспечению.ТекущиеДанные.ДатаПоставки;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиЗаказыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ДатаПоставкиЗаказы.ПриИзменении");
	
	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		НоваяДатаПоставки = Поставка.ДатаПоставки;
		Поставка.ДатаПоставки = ДатаПоставкиДоИзменения;
		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);
		Поставка.ДатаПоставки = НоваяДатаПоставки;

	КонецЕсли;

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеЗаказы

//Открытие формы созданного заказа.
//
&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДокумента = Элементы.СформированныеЗаказы.ТекущиеДанные;
	ДокументСсылка  = СтрокаДокумента.Документ;
	ПоказатьЗначение(Неопределено, ДокументСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставкуПриИзменении(Элемент)

	ОбновитьНадписьПредупреждениеОРазмещенииЗаказов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Команда.Назад");
	
	ОчиститьСообщения();
	
	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагСформированныеЗаказы Тогда
		
		Если ТаблицаДокументы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений();
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить сформированные заказы';uk='Видалити сформовані замовлення'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ТекстВопроса = НСтр("ru='При переходе назад сформированные заказы будут удалены.';uk='При переході назад сформовані замовлення будуть вилучені.'");
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
            Возврат;
			
		КонецЕсли;
		
		НазадФрагмент();


	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности И
		Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗаказы Тогда

		ПолучитьПодтверждениеОчисткиТаблицыЗаказыКОбеспечению(Новый ОписаниеОповещения("НазадПослеПодтверждения", ЭтотОбъект));

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности Тогда

		Если КорзинаЗаказов.ПолучитьЭлементы().Количество() > 0 Тогда
			ОчисткаТаблицыПотребностейВопрос("ШагНазад");
		Иначе
			ОчиститьСообщения();
			УстановитьСтраницыПомощника("ШагНастройкаСпособовОбеспечения");
		КонецЕсли;

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНастройкаСпособовОбеспечения Тогда

		ОчиститьСообщения();
		УстановитьСтраницыПомощника("ШагОтборПотребностей");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазадПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОтметкуНаВсеСтроки("ЗаказыКОбеспечению", Ложь);
	
	Объект.ЗаказыКОбеспечению.Очистить();
	
	// Пересчет округления для всех отмеченных строк
	Для Каждого Строка Из Объект.Запасы Цикл
		Если Строка.Отметка Тогда
			// В таблице Запасы нет повторяющихся строк. Каждая строка округляется отдельно
			
			СоответствиеСтрок = Новый Соответствие();
			СоответствиеСтрок.Вставить(Строка, Истина);
			ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		
		УстановитьСтраницыПомощника("ШагНастройкаСпособовОбеспечения");
		ОчиститьДеревоИндексов(Истина);
		
	Иначе
		
		УстановитьСтраницыПомощника("ШагЗапасы");
		ОчиститьДеревоИндексов(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    
    НазадФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НазадФрагмент()
    
    ОчиститьСообщения();
    НазадКШагуСоставЗаказаНаСервере();
	Для Каждого Строка Из ТаблицаДокументы Цикл
		
		Если Строка.СтандартнаяКартинка = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
    Если Объект.ЗаказыКОбеспечению.Количество() = 0 Тогда
        
        УстановитьСтраницыПомощника("ШагЗапасы");
        
    Иначе
        
        УстановитьСтраницыПомощника("ШагЗаказы");
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Команда.Далее");
	
	ОчиститьСообщения();

	Если Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОтборПотребностей Тогда

		Если Не ДалееКШагуНастройкаСпособовОбеспеченияНаСервере() Тогда

			СообщитьОбОтсутствииПотребностей();

		КонецЕсли;

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНастройкаСпособовОбеспечения Тогда

		Если ТаблицаСпособовЗаполненаВерно() Тогда

			ДалееКШагуЗапасы();
			
			Если Объект.Запасы.Количество() = 0 Тогда
				ДалееКШагуЗаказы();
				
				УстановитьСтраницыПомощника("ШагЗаказы");
			Иначе
				УстановитьСтраницыПомощника("ШагЗапасы");
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности
		И Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы Тогда

			ДалееКШагуЗаказы();
			
			Если Объект.ЗаказыКОбеспечению.Количество() = 0 Тогда

				КШагуДокументыНаКлиенте();

			Иначе
				УстановитьСтраницыПомощника("ШагЗаказы");
			КонецЕсли;

	ИначеЕсли Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности
		И Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗаказы Тогда

		КШагуДокументыНаКлиенте();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСДругимиОтборами(Команда)

	ОчиститьСообщения();
	ПродолжитьСДругимиОтборамиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыОбеспеченияПотребностей(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Склад", ОтборПоСкладу));
	ОткрытьФорму("Обработка.ПараметрыОбеспеченияПотребностей.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВТаблицеСпособовОбеспечения(Команда)

	ИзменитьФлажкиВТаблицеСпособовОбеспечения(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиВТаблицеСпособовОбеспечения(Команда)

	ИзменитьФлажкиВТаблицеСпособовОбеспечения(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКЗаказуТоварыДостигшиеТочкиЗаказаДляВыделенныхСтрок(Команда)
	ЗаполнитьКЗаказуТовары(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПанельРекомендаций(Команда)

		Элементы.РекомендацииЗапасы.Пометка = Не Элементы.РекомендацииЗапасы.Пометка;
		Элементы.РекомендацииЗаказы.Пометка = Не Элементы.РекомендацииЗаказы.Пометка;
		Элементы.ПанельРекомендаций.Видимость = Элементы.РекомендацииЗапасы.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКЗаказуТоварыВсеДляВыделенныхСтрок(Команда)
	ЗаполнитьКЗаказуТовары(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКЗаказуЗапасы(Команда)

	ИзменитьОтметку("Запасы", Истина);
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	ОтобразитьРасчитанноеОкругление(ТекущаяСтрока, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуЗапасы(Команда)

	ИзменитьОтметку("Запасы", Ложь);
	
	ТекущаяСтрока = Элементы.Запасы.ТекущиеДанные;
	
	ОтобразитьРасчитанноеОкругление(ТекущаяСтрока, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКЗаказуЗаказы(Команда)

	ИзменитьОтметку("ЗаказыКОбеспечению", Истина);
	
	ТекущаяСтрока = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	
	ОтобразитьРасчитанноеОкругление(ТекущаяСтрока, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуЗаказы(Команда)

	ИзменитьОтметку("ЗаказыКОбеспечению", Ложь);
	
	ТекущаяСтрока = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	
	ОтобразитьРасчитанноеОкругление(ТекущаяСтрока, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ОткрытьФормуВыбораУпаковки" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы Тогда
			ВыбратьУпаковкуКлиент("Запасы");
		Иначе
			ВыбратьУпаковкуКлиент("ЗаказыКОбеспечению");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШагНастройкаСпособовОбеспечения

&НаСервере
Процедура ЗаполнитьТаблицуСпособовОбеспечения()

	ТаблицаСпособов = Обработки.ОбеспечениеПотребностей.ТаблицаСпособовОбеспечения(
		КомпоновщикНастроекДляОтборов.ПолучитьНастройки());
	Объект.СпособыОбеспечения.Загрузить(ТаблицаСпособов);
	
	Способ = Неопределено;
	Для Каждого СтрокаСпособа Из Объект.СпособыОбеспечения Цикл
		ЗаполнитьСлужебныеРеквизитыТаблицыСпособов(СтрокаСпособа);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыСпособаОбеспеченияНаСервере(СтруктураРеквизитов, НачалоПериода)

	Обработки.ОбеспечениеПотребностей.ЗаполнитьРеквизитыСпособаОбеспечения(СтруктураРеквизитов, НачалоПериода, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажкиВТаблицеСпособовОбеспечения(Устанавливать)
	Для каждого СтрокаТаблицы Из Объект.СпособыОбеспечения Цикл
		СтрокаТаблицы.Отметка = Устанавливать;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКЗаказуТовары(ЭтоПлановыйЗаказ)

	ИдентификаторыСтрок = Элементы.СпособыОбеспечения.ВыделенныеСтроки;
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		СтрокаТаблицы = Объект.СпособыОбеспечения.НайтиПоИдентификатору(Идентификатор);
		СтрокаТаблицы.НаступилаДатаОчередногоЗаказа = ЭтоПлановыйЗаказ;
	КонецЦикла;

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Установлено новое значение в колонке: ""%1"". Всего обработано строк: %2';uk='Встановлено нове значення у колонці: ""%1"". Всього опрацьовано рядків: %2'"),
		Строка(Элементы.СпособыОбеспеченияНаступилаДатаОчередногоЗаказа.Заголовок),
		ИдентификаторыСтрок.Количество());

	ПоказатьОповещениеПользователя(НСтр("ru='Обработка строк';uk='Обробка рядків'"), , ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормыПоПравам()

	ПраваДоступа = Обработки.ПараметрыОбеспеченияПотребностей.ПраваДоступаНаЗаписьСпособаИлиМетода();
	Если Не ПраваДоступа.ВариантыОбеспечения Тогда
		
		Элементы.СпособОбеспеченияЗапасы.Доступность = Ложь;
		Элементы.СпособОбеспеченияЗапасы.КартинкаШапки = Новый Картинка();
		Элементы.СпособОбеспеченияЗаказы.Доступность = Ложь;
		Элементы.СпособОбеспеченияЗаказы.КартинкаШапки = Новый Картинка();
		Элементы.СпособыОбеспеченияСпособОбеспечения.Доступность = Ложь;
		
	КонецЕсли;
	
	Если Не ПраваДоступа.ВариантыОбеспечения Или Не ПраваДоступа.ТоварныеОграничения Тогда
		
		Элементы.УстановитьПараметрыОбеспеченияПотребностей.Заголовок
			= НСтр("ru = Параметры обеспечения потребностей");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияСпособовОбеспечения()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	
	//1) Помещаем во временную таблицу "СпособыОбеспечения" данные о способах из таблицы "СпособыОбеспечения"
	//	(загружаемую параметром "Способы"), которые могли быть отредактированы пользователем.
	//	Нас интересуют только строки в которых пользователь или система выставили признак
	//	заказа по графику самостоятельно. В этих строках пользователь мог вводить даты поставок и перевести способ в
	//	режим заказа по графику.
	"ВЫБРАТЬ
	|	Способы.СпособОбеспечения               КАК СпособОбеспечения,
	|	Способы.НаступилаДатаОчередногоЗаказа   КАК НаступилаДатаОчередногоЗаказа,
	|	Способы.ДатаПоставки                    КАК ПлановаяДатаПоставки,
	|	Способы.ДатаСледующейПоставки           КАК ДатаСледующейПоставки
	|ПОМЕСТИТЬ СпособыОбеспечения
	|ИЗ
	|	&Способы КАК Способы
	|ГДЕ
	|	Способы.НаступилаДатаОчередногоЗаказа
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОбеспечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	//2) Отбираем способы, в которых произошли изменения (эти способы нужно перезаписать в ИБ).
	|ВЫБРАТЬ
	|	ТаблицаОтбора.СпособОбеспечения                    КАК Ссылка,
	|	ТаблицаОтбора.ПлановаяДатаПоставки                 КАК ПлановаяДатаПоставки,
	|	ТаблицаОтбора.ДатаСледующейПоставки                КАК ДатаСледующейПоставки,
	|	ТаблицаОтбора.НаступилаДатаОчередногоЗаказа        КАК НаступилаДатаОчередногоЗаказа
	|ИЗ
	|	СпособыОбеспечения КАК ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО ТаблицаОтбора.СпособОбеспечения = СпрСпособ.Ссылка
	|	ГДЕ
	|		НЕ СпрСпособ.ФормироватьПлановыеЗаказы
	|		ИЛИ (ТаблицаОтбора.ПлановаяДатаПоставки  <> СпрСпособ.ПлановаяДатаПоставки
	|			И ТаблицаОтбора.ПлановаяДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1))
	|		ИЛИ ТаблицаОтбора.ДатаСледующейПоставки <> СпрСпособ.ДатаСледующейПоставки
	|		ИЛИ СпрСпособ.ПлановаяДатаЗаказа <> &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр("Способы",
		Объект.СпособыОбеспечения.Выгрузить(,
			"СпособОбеспечения,
			|ПлановаяДатаЗаказа,
			|НаступилаДатаОчередногоЗаказа,
			|ДатаПоставки,
			|ДатаСледующейПоставки,
			|ФормироватьПлановыеЗаказы"));
	Запрос.УстановитьПараметр("КалендарьПредприятия", Константы.ОсновнойКалендарьПредприятия.Получить());
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//РезультатЗапроса[0] - "СпособыОбеспеченияНовые",
	//РезультатЗапроса[1] - Способы обеспечения для актуализации в ИБ
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.СпособыОбеспеченияПотребностей)
		И ПравоДоступа("Добавление", Метаданные.Справочники.СпособыОбеспеченияПотребностей) Тогда
		
		//Запись способов обеспечения.
		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СпособОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СпособОбъект.ДатаСледующейПоставки = Выборка.ДатаСледующейПоставки;
			СпособОбъект.ПлановаяДатаПоставки  = Выборка.ПлановаяДатаПоставки;
			СпособОбъект.ПлановаяДатаЗаказа    = НачалоПериода;
			СпособОбъект.ФормироватьПлановыеЗаказы = Истина;
			
			СпособОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыОбеспеченияПриИзмененииСпособаОбеспечения()
	
	СтрокаТаблицы = Элементы.СпособыОбеспечения.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено
		Или Элементы.Помощник.ТекущаяСтраница <> Элементы.ШагНастройкаСпособовОбеспечения Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоДня(ТекущаяДата());
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитовТаблицыСпособовОбеспечения();
	СтруктураРеквизитов.СпособОбеспечения = СтрокаТаблицы.СпособОбеспечения;
	
	ЗаполнитьРеквизитыСпособаОбеспеченияНаСервере(СтруктураРеквизитов, НачалоПериода);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураРеквизитов);
	ЗаполнитьСлужебныеРеквизитыТаблицыСпособов(СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыТаблицыСпособов(СтрокаТаблицы)
	
	Если Не СтрокаТаблицы.ФормироватьПлановыеЗаказы Тогда
		СтрокаТаблицы.ДнейДоЗаказаПоГрафикуПредставление = НСтр("ru='<график поставок не используется>';uk='<графік поставок не використовується>'");
	ИначеЕсли СтрокаТаблицы.НетГрафикаПоставок Тогда
		СтрокаТаблицы.ДнейДоЗаказаПоГрафикуПредставление = НСтр("ru='<не заполнен график поставок>';uk='<не заповнений графік поставок>'");
	ИначеЕсли СтрокаТаблицы.НетПлановойДатыЗаказаПоКалендарю Тогда
		СтрокаТаблицы.ДнейДоЗаказаПоГрафикуПредставление = НСтр("ru='<не заполнен график работы предприятия>';uk='<не заповнений графік роботи підприємства>'");
	ИначеЕсли СтрокаТаблицы.ДнейДоПлановогоЗаказа >= 0 Тогда
		
		СтрокаТаблицы.ДнейДоЗаказаПоГрафикуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 дн';uk='%1 дн'"), СтрокаТаблицы.ДнейДоПлановогоЗаказа);
			
	Иначе
		
		СтрокаТаблицы.ДнейДоЗаказаПоГрафикуПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='просрочен на %1 дн';uk='прострочений на %1 дн'"), - СтрокаТаблицы.ДнейДоПлановогоЗаказа);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШагЗапасы

&НаКлиенте
Процедура ЗапасыПриАктивизацииСтрокиОбработчикОжидания()

	Строка = Элементы.Запасы.ТекущиеДанные;
	
	Если Строка = Неопределено Тогда
		
		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаНеВыделенаСтрока;
		
	Иначе
		
		СтрокаФормата = "ЧДЦ=3; ЧН=0.000";
		ЕдиницаИЗмерения = Строка.ЕдиницаИзмерения;
		
		Остаток = НадписьВФормате(Строка.Остаток, ЕдиницаИзмерения, СтрокаФормата);
		ЗаказыКПоступлению = НадписьВФормате(Строка.ЗаказыКПоступлению,   ЕдиницаИзмерения, СтрокаФормата);
		МинимальныйЗапас   = НадписьВФормате(Строка.МинимальныйЗапас,     ЕдиницаИзмерения, СтрокаФормата);
		МаксимальныйЗапас  = НадписьВФормате(Строка.МаксимальныйЗапас,    ЕдиницаИзмерения, СтрокаФормата);
		СтраховойЗапас     = НадписьВФормате(Строка.СтраховойЗапас,       ЕдиницаИзмерения, СтрокаФормата);
		ДоТочкиЗаказа      = НадписьВФормате(Строка.ДоТочкиЗаказа,        ЕдиницаИзмерения, СтрокаФормата);
		КоличествоКЗаказуНадпись  = НадписьВФормате(Строка.КЗаказуРекомендуется, ЕдиницаИзмерения, СтрокаФормата);
		СреднедневноеПотребление = НадписьВФормате(Строка.СреднедневноеПотребление, ЕдиницаИзмерения, СтрокаФормата);
		
		СтрокаФормата = "ДЛФ=D";
		
		ДатаЗаказаСтроки = ?(ЗначениеЗаполнено(Строка.ДатаЗаказа), Строка.ДатаЗаказа, НачалоДня(ТекущаяДата()));
		
		ДатаЗаказа = НадписьВФормате(ДатаЗаказаСтроки, "", СтрокаФормата);
		
		Если Не ЗначениеЗаполнено(Строка.ДатаЗаказа) Тогда
			ДатаЗаказаНаступила = НСтр("ru='Не заполнена дата поставки';uk='Не заповнена дата поставки'");
		Иначе
			ДатаЗаказаНаступила = НСтр("ru='Дата заказа наступила';uk='Дата замовлення настала'");
		КонецЕсли;
		
		КоличествоДней = (Строка.ДатаЗаказа - НачалоДня(ТекущаяДата())) / 86400;
		ШаблонТекста = НСтр("ru='До даты заказа %1 дн.';uk='До дати замовлення %1 дн.'");
		ДоДатыЗаказаДней = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Формат(КоличествоДней, "ЧДЦ="));
		
		НадписьДн = НСтр("ru='дн';uk='дн'");
		Если Строка.ФормироватьПлановыеЗаказы И КоличествоДней <= 0 Тогда
			
			ДатаБлижайшейПоставкиПоГрафику = НадписьВФормате(Строка.ДатаБлижайшейПоставкиПоГрафику, "", СтрокаФормата);
			ДатаСледующейПоставкиПоГрафику = НадписьВФормате(Строка.ДатаСледующейПоставкиПоГрафику, "", СтрокаФормата);
			ШаблонТекста = "%1-%2";
			ОбеспечиваемыйПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, ДатаБлижайшейПоставкиПоГрафику, ДатаСледующейПоставкиПоГрафику);
			
			СрокПоставки = НадписьВФормате(Строка.СрокДоПлановойПоставки, НадписьДн, "");
			
		ИначеЕсли Строка.ФормироватьПлановыеЗаказы Тогда
			
			СрокПоставки = НадписьВФормате(Строка.СрокПоставки, НадписьДн, "");
			ОбеспечиваемыйПериод = НСтр("ru='не известен';uk='не відомий'");
			
		Иначе
			
			СрокПоставки = НадписьВФормате(Строка.СрокПоставки, НадписьДн, "");
			ОбеспечиваемыйПериод = НадписьВФормате(Строка.ОбеспечиваемыйПериод, НадписьДн, "");
			
		КонецЕсли;
		
		МетодМинМакс = Строка.МетодОбеспечения
		= ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс");
		
		ЭтоДатаЗаказа = Ложь;
		Если Строка.ФормироватьПлановыеЗаказы И КоличествоДней <= 0 Тогда
			
			ТекстРекомендации = НСтр("ru='Заказать количество для пополнения до максимального запаса.';uk='Замовити кількість для поповнення до максимального запасу.'");
			ЭтоТочкаЗаказа = Строка.ДоТочкиЗаказа <= 0;
			ЭтоДатаЗаказа  = Истина;
			Заказать       = Истина;
			
		ИначеЕсли Строка.ФормироватьПлановыеЗаказы И Строка.ДоТочкиЗаказа > 0 Тогда
			
			ТекстРекомендации = НСтр("ru='Не заказывать товар. Ожидать наступления даты заказа по графику.';uk='Не замовляти товар. Чекати настання дати замовлення за графіком.'");
			ЭтоТочкаЗаказа = Ложь;
			Заказать       = Ложь;
			
		ИначеЕсли Не Строка.ФормироватьПлановыеЗаказы И Строка.ДоТочкиЗаказа > 0 Тогда
			
			ТекстРекомендации = НСтр("ru='Не заказывать товар. Ожидать наступления точки заказа.';uk='Не замовляти товар. Чекати настання точки замовлення.'");
			ЭтоТочкаЗаказа = Ложь;
			Заказать       = Ложь;
			
			//Точка заказа наступила
		ИначеЕсли Строка.ФормироватьПлановыеЗаказы И Не МетодМинМакс Тогда
			
			ТекстРекомендации = НСтр("ru='Остаток товара на складе достиг минимального запаса. Необходимо пополнить запас.';uk='Залишок товару на складі досяг мінімального запасу. Необхідно поповнити запас.'");
			ЭтоТочкаЗаказа = Истина;
			Заказать       = Ложь;
			
		ИначеЕсли Строка.ЗаказыКПоступлению = 0 Тогда
			
			ТекстРекомендации = НСтр("ru='Заказать количество, равное максимальному запасу.';uk='Замовити кількість, рівну максимальному запасу.'");
			ЭтоТочкаЗаказа = Истина;
			Заказать       = Истина;
			
		ИначеЕсли Строка.ЗаказыКПоступлению < Строка.МаксимальныйЗапас Тогда
			
			ТекстРекомендации = НСтр("ru='Заказать количество, равное максимальному запасу за вычетом заказанного ранее.';uk='Замовити кількість, рівну максимальному запасу за вирахуванням замовленого раніше.'");
			ЭтоТочкаЗаказа = Истина;
			Заказать       = Истина;
			
		Иначе
			
			ТекстРекомендации = НСтр("ru='Не заказывать товар. Необходимые заказы сформированы ранее.';uk='Не замовляти товар. Необхідні замовлення сформовані раніше.'");
			ЭтоТочкаЗаказа = Истина;
			Заказать       = Ложь;
			
		КонецЕсли;
		
		ПереключитьСтраницыПанелиРекомендацийЗапасы(
		Строка.МетодОбеспечения, Строка.ФормироватьПлановыеЗаказы, ЭтоТочкаЗаказа, ЭтоДатаЗаказа, Заказать);
		
	КонецЕсли;
	
	ОтобразитьРасчитанноеОкругление(Строка, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницыПанелиРекомендацийЗапасы(Метод, ФормироватьПлановыеЗаказы, ЭтоТочкаЗаказа, ЭтоДатаЗаказа, Заказать)

	МетодМинМакс = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс");

	Если Метод = МетодМинМакс И Не ФормироватьПлановыеЗаказы Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаМинМаксПоТочкеЗаказа;
		Элементы.СтраницыТочкаЗаказа1.ТекущаяСтраница    = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаТочкаЗаказаДостигнута1,
		                                                     Элементы.СтраницаТочкаЗаказаНеДостигнута1);
		Элементы.СтраницыРекомендация1.ТекущаяСтраница   = ?(Заказать,
		                                                     Элементы.СтраницаРекомендацияЗаказать1,
		                                                     Элементы.СтраницаРекомендацияНеЗаказывать1);
		Элементы.СтраницыКЗаказуФормула1.ТекущаяСтраница = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаДостигнута1,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаНеДостигнута1);

	ИначеЕсли Метод = МетодМинМакс И ФормироватьПлановыеЗаказы Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаМинМаксПоГрафику;
		Элементы.СтраницыТочкаЗаказа2.ТекущаяСтраница    = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаТочкаЗаказаДостигнута2,
		                                                     Элементы.СтраницаТочкаЗаказаНеДостигнута2);
		Элементы.СтраницыРекомендация2.ТекущаяСтраница   = ?(Заказать,
		                                                     Элементы.СтраницаРекомендацияЗаказать2,
		                                                     Элементы.СтраницаРекомендацияНеЗаказывать2);
		Элементы.СтраницыКЗаказуФормула2.ТекущаяСтраница = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаДостигнута2,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаНеДостигнута2);
		Элементы.СтраницыГрафикЗаказов2.ТекущаяСтраница  = ?(ЭтоДатаЗаказа,
		                                                     Элементы.СтраницаДатаЗаказаНаступила2,
		                                                     Элементы.СтраницаДатаЗаказаНеНаступила2);

	ИначеЕсли Не ФормироватьПлановыеЗаказы Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаПрогнозПоТочкеЗаказа;
		Элементы.СтраницыТочкаЗаказа3.ТекущаяСтраница    = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаТочкаЗаказаДостигнута3,
		                                                     Элементы.СтраницаТочкаЗаказаНеДостигнута3);
		Элементы.СтраницыРекомендация3.ТекущаяСтраница   = ?(Заказать,
		                                                     Элементы.СтраницаРекомендацияЗаказать3,
		                                                     Элементы.СтраницаРекомендацияНеЗаказывать3);
		Элементы.СтраницыКЗаказуФормула3.ТекущаяСтраница = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаДостигнута3,
		                                                     Элементы.СтраницаКЗаказуТочкаЗаказаНеДостигнута3);

	ИначеЕсли ФормироватьПлановыеЗаказы Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаПрогнозПоГрафику;
		Элементы.СтраницыТочкаЗаказа4.ТекущаяСтраница    = ?(ЭтоТочкаЗаказа,
		                                                     Элементы.СтраницаТочкаЗаказаДостигнута4,
		                                                     Элементы.СтраницаТочкаЗаказаНеДостигнута4);
		Элементы.СтраницыГрафикЗаказов4.ТекущаяСтраница  = ?(ЭтоДатаЗаказа,
		                                                     Элементы.СтраницаДатаЗаказаНаступила4,
		                                                     Элементы.СтраницаДатаЗаказаНеНаступила4);
		Элементы.СтраницыДатаЗаказаРекомендация.ТекущаяСтраница = ?(ЭтоДатаЗаказа, Элементы.СтраницаДатаЗаказаНаступила,
		                                                          ?(ЭтоТочкаЗаказа,
		                                                            Элементы.СтраницаДатаЗаказаНеНаступилаТочкаЗаказаДостигнута,
		                                                            Элементы.СтраницаДатаЗаказаНеНаступила));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуТаблицыЗапасыНаКлиенте(СпособОбеспечения)

	Поставка = Элементы.Запасы.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Ложь);

	КонецЕсли;

	Отбор = Новый Структура("Номенклатура, Характеристика, Склад, СпособОбеспечения");
	ЗаполнитьЗначенияСвойств(Отбор, Поставка);
	Отбор.СпособОбеспечения = СпособОбеспечения;
	РассчитатьСтрокуТаблицыЗапасы(Элементы.Запасы.ТекущаяСтрока, Отбор);
	
	СоответствиеСтрок = ПересчитатьОкруглениеКлиент(Поставка, Истина);
	
	ОтобразитьРасчитанноеОкругление(Поставка, Истина);
	
	ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок);
	
	ЗапасыПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуТаблицыЗапасы(ИдентификаторСтроки, Отбор)

	СтрокаЗапасы = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
	Таблица = Обработки.ОбеспечениеПотребностей.ТаблицаЗапасы(Отбор, "ОтборПоЗначениям");
	
	Если Таблица.Количество() > 0 Тогда
	
		Товар = Таблица[0];
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, Товар);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.МинимальныйИМаксимальныйЗапасы(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.КоличествоКЗаказуДляПоддержанияЗапаса(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.УровеньЗапасаИКартинкаСменитьМетод(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		СтрокаЗапасы.КЗаказуРекомендуется = СтрокаЗапасы.КЗаказу;
		СтрокаЗапасы.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(СтрокаЗапасы.ИсточникОбеспечения, ТекстНеЗаполнено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуТаблицыЗаказыКОбеспечениюНаКлиенте(СпособОбеспечения)

	Поставка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;

	Если Поставка.Отметка Тогда

		ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, 0, Истина);

	КонецЕсли;

	Отбор = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, СпособОбеспечения,
		|Заказ, ДатаОтгрузки, Требуется, ПодразделениеПолучатель");
	ЗаполнитьЗначенияСвойств(Отбор, Поставка);
	Отбор.СпособОбеспечения = СпособОбеспечения;
	РассчитатьСтрокуТаблицыЗаказыКОбеспечению(Элементы.ЗаказыКОбеспечению.ТекущаяСтрока, Отбор);
	КоличествоКЗаказу = Поставка.Округлено * ?(Поставка.Отметка, 1, 0);
	ОтразитьПоставкуВКорзине(ЭтаФорма, Поставка, КоличествоКЗаказу, Истина);
	ЗаказыКОбеспечениюПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуТаблицыЗаказыКОбеспечению(ИдентификаторСтроки, Отбор)
	
	СтрокаЗаказы = Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(ИдентификаторСтроки);
	Результат = Обработки.ОбеспечениеПотребностей.ТаблицаПотребностейПоЗаказамИОстатков(Отбор, "ОтборПоЗначениям");
	
	Таблица = Результат.ТаблицаПотребностей;
	
	Если Таблица.Количество() > 0 Тогда
	
		Товар = Таблица[0];
	
		ЗаполнитьЗначенияСвойств(СтрокаЗаказы, Товар,
			"ФормироватьПлановыеЗаказы,
			|ДатаЗаказа,
			|ДатаБлижайшейПоставкиПоГрафику,
			|ДатаСледующейПоставкиПоГрафику,
			|ОбеспечиваемыйПериод,
			|ГраницаОбеспечиваемогоПериода,
			|ТипОбеспечения, ИсточникОбеспечения, ДатаПоставки,
			|Соглашение, ВалютаСоглашения, ВидЦены, ЦенаВВалютеСоглашения, ЦенаВВалютеУправленческогоУчета,
			|ИсточникОбеспеченияТолькоПросмотр");
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.КоличествоКЗаказуДляОбеспеченияЗаказов(СтрокаЗаказы);
		ЗаполнитьЗначенияСвойств(СтрокаЗаказы, РезультатРасчета);
	
		ЗаполнитьРасчетныеПоляСтрокиЗаказы(СтрокаЗаказы, КэшированныеЗначения);
		
		СтрокаЗаказы.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(СтрокаЗаказы.ИсточникОбеспечения, ТекстНеЗаполнено);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШагЗаказы

&НаКлиенте
Процедура ЗаказыПриАктивизацииСтрокиОбработчикОжидания()
	
	Строка = Элементы.ЗаказыКОбеспечению.ТекущиеДанные;
	
	Если Строка = Неопределено Тогда
		
		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаНеВыделенаСтрока;
		
	Иначе
		
		СтрокаФормата = "ЧДЦ=3; ЧН=0.000";
		ЕдиницаИЗмерения = Строка.ЕдиницаИзмерения;
		
		ДатаОтгрузки = НадписьВФормате(Строка.ДатаОтгрузки, "", "ДЛФ=D");
		Требуется    = НадписьВФормате(Строка.Требуется,  ЕдиницаИзмерения, СтрокаФормата);
		Обеспечено   = НадписьВФормате(Строка.Обеспечено, ЕдиницаИзмерения, СтрокаФормата);
		
		КоличествоКЗаказуНадпись = НадписьВФормате(Строка.КЗаказуРекомендуется, ЕдиницаИзмерения, СтрокаФормата);
		
		СтрокаФормата = "ДЛФ=D";
		
		ДатаЗаказаСтроки = ?(ЗначениеЗаполнено(Строка.ДатаЗаказа), Строка.ДатаЗаказа, НачалоДня(ТекущаяДата()));
		
		ДатаЗаказа = НадписьВФормате(ДатаЗаказаСтроки, "", СтрокаФормата);
		
		Если Не ЗначениеЗаполнено(Строка.ДатаЗаказа) Тогда
			ДатаЗаказаНаступила = НСтр("ru='Не заполнена дата поставки';uk='Не заповнена дата поставки'");
		Иначе
			ДатаЗаказаНаступила = НСтр("ru='Дата заказа наступила';uk='Дата замовлення настала'");
		КонецЕсли;
		
		КоличествоДней = (Строка.ДатаЗаказа - НачалоДня(ТекущаяДата())) / 86400;
		ШаблонТекста = НСтр("ru='До даты заказа %1 дн.';uk='До дати замовлення %1 дн.'");
		ДоДатыЗаказаДней = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Формат(КоличествоДней, "ЧДЦ="));
		
		НадписьДн = НСтр("ru='дн';uk='дн'");
		Если Строка.ФормироватьПлановыеЗаказы И КоличествоДней <= 0 Тогда
			
			ДатаБлижайшейПоставкиПоГрафику = НадписьВФормате(Строка.ДатаБлижайшейПоставкиПоГрафику, "", СтрокаФормата);
			ДатаСледующейПоставкиПоГрафику = НадписьВФормате(Строка.ДатаСледующейПоставкиПоГрафику, "", СтрокаФормата);
			ШаблонТекста = "%1-%2";
			ОбеспечиваемыйПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, ДатаБлижайшейПоставкиПоГрафику, ДатаСледующейПоставкиПоГрафику);
			
		ИначеЕсли Не Строка.ФормироватьПлановыеЗаказы Тогда
			
			ДатаВозможнойПоставки = НадписьВФормате(Строка.ДатаПоставки, "", "ДЛФ=D");
			ОбеспечиваемыйПериод = НадписьВФормате(Строка.ОбеспечиваемыйПериод, НадписьДн, "");
			
		КонецЕсли;
		
		ДатаЗаказаНаступила = Строка.ФормироватьПлановыеЗаказы И КоличествоДней <= 0;
		
		Если ДатаЗаказаНаступила Тогда
			
			ОтгрузкаВнутриПериода = Строка.ДатаОтгрузки < Строка.ДатаСледующейПоставкиПоГрафику;
			
			Если ОтгрузкаВнутриПериода Тогда
				
				Если Строка.Обеспечено = 0 Тогда
					ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу';uk='Замовити кількість, що потрібна по замовленню'");
				Иначе
					ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу за вычетом обеспеченного ранее';uk='Замовити кількість, потрібну по замовленню, за вирахуванням забезпеченого раніше'");
				КонецЕсли;
				
			Иначе
				
				ТекстРекомендации = НСтр("ru='Не заказывать товар. Обеспечить следующей поставкой по графику';uk='Не замовляти товар. Забезпечити наступним надходженням за графіком'");
				
			КонецЕсли;
			
		ИначеЕсли Строка.ФормироватьПлановыеЗаказы Тогда
			
			ОтгрузкаВнутриПериода = Ложь;
			ТекстРекомендации = НСтр("ru='Не заказывать товар. Ожидать наступления даты заказа';uk='Не замовляти товар. Чекати настання дати замовлення'");
			
		Иначе
			
			Если Строка.ОбеспечиваемыйПериод > 0 Тогда
				
				ОтгрузкаВнутриПериода = Строка.ДатаОтгрузки < Строка.ГраницаОбеспечиваемогоПериода;
				
				Если ОтгрузкаВнутриПериода Тогда
					
					Если Строка.Обеспечено = 0 Тогда
						ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу';uk='Замовити кількість, що потрібна по замовленню'");
					Иначе
						ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу, за вычетом обеспеченного ранее';uk='Замовити кількість, потрібну по замовленню, за вирахуванням раніше забезпеченого'");
					КонецЕсли;
					
				Иначе
					
					ТекстРекомендации = НСтр("ru='Не заказывать товар сегодня. Ожидать приближения даты отгрузки';uk='Не замовляти товар сьогодні. Чекати наближення дати відвантаження'");
					
				КонецЕсли;
				
			Иначе
				
				ОтгрузкаВнутриПериода = Истина;
				
				Если Строка.Обеспечено = 0 Тогда
					ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу';uk='Замовити кількість, що потрібна по замовленню'");
				Иначе
					ТекстРекомендации = НСтр("ru='Заказать количество, требующееся по заказу, за вычетом обеспеченного ранее';uk='Замовити кількість, потрібну по замовленню, за вирахуванням раніше забезпеченого'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтгрузкаВнутриПериода Тогда
			НадписьДатаОтгрузки = НСтр("ru='Отгрузка в плановом периоде';uk='Відвантаження в плановому періоді'");
		Иначе
			НадписьДатаОтгрузки = НСтр("ru='Отгрузка за границей планового периода';uk='Відвантаження за межами планового періоду'");
		КонецЕсли;
		
		ПереключитьСтраницыПанелиРекомендацийЗаказы(Строка.ФормироватьПлановыеЗаказы, Строка.ОбеспечиваемыйПериод > 0,
		ДатаЗаказаНаступила, ОтгрузкаВнутриПериода);
		
	КонецЕсли;
	
	ОтобразитьРасчитанноеОкругление(Строка, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРасчетныеПоляСтрокиЗаказы(Строка, КэшированныеЗначения)

	Строка.КартинкаПриоритета = ?(Строка.Приоритет = КэшированныеЗначения.ВысшийПриоритет, 0,
		?(Строка.Приоритет = КэшированныеЗначения.НизшийПриоритет, 2, 1));

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницыПанелиРекомендацийЗаказы(ФормироватьПлановыеЗаказы, ОбеспечиваемыйПериодОграничен,
	ДатаЗаказаНаступила, ОтгрузкаВнутриПериода)

	Если ФормироватьПлановыеЗаказы И ДатаЗаказаНаступила Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаЗаказыПоГрафикуДатаНаступила;
		Элементы.СтраницыРекомендация7.ТекущаяСтраница   = ?(ОтгрузкаВнутриПериода,
		                                                     Элементы.СтраницаРекомендацияЗаказать7,
		                                                     Элементы.СтраницаРекомендацияНеЗаказывать7);

	ИначеЕсли ФормироватьПлановыеЗаказы И Не ДатаЗаказаНаступила Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаЗаказыПоГрафикуДатаНеНаступила;

	ИначеЕсли Не ФормироватьПлановыеЗаказы И Не ОбеспечиваемыйПериодОграничен Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаЗаказыНеПоГрафикуБезОграниченияПериода;

	ИначеЕсли Не ФормироватьПлановыеЗаказы И ОбеспечиваемыйПериодОграничен Тогда

		Элементы.ПанельРекомендаций.ТекущаяСтраница = Элементы.СтраницаЗаказыНеПоГрафикуСОграничениемПериода;
		Элементы.СтраницыРекомендация9.ТекущаяСтраница   = ?(ОтгрузкаВнутриПериода,
		                                                     Элементы.СтраницаРекомендацияЗаказать9,
		                                                     Элементы.СтраницаРекомендацияНеЗаказывать9);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ШагиПотребности

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбораСпособовОбеспеченияТовара(Номенклатура, Характеристика, Склад)

	Список = РегистрыСведений.ВариантыОбеспеченияТоварами.СписокСпособовОбеспеченияТоваромНаСкладе(
		Номенклатура, Характеристика, Склад);

	Возврат Список;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВыбораСпособовОбеспеченияРаботы(Номенклатура, Характеристика)

	Список = РегистрыСведений.ВариантыОбеспеченияРаботами.СписокСпособовОбеспечения(Номенклатура, Характеристика);

	Возврат Список;

КонецФункции

&НаКлиенте
Процедура ОткрытьМетодОбеспечения(ИмяТаблицы)

	Поставка = Элементы[ИмяТаблицы].ТекущиеДанные;
	КлючНоменклатуры = Новый Структура("Номенклатура, Характеристика, Склад, ЭтоРабота");
	КлючНоменклатуры.ЭтоРабота = Ложь;
	ЗаполнитьЗначенияСвойств(КлючНоменклатуры, Поставка);

	РежимОткрытия = "Полный";

	ПараметрыФормы = Новый Структура("КлючПотребности, РассчитыватьСтатистику, РежимОткрытия",
		КлючНоменклатуры, Истина, РежимОткрытия);

	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаРедактированияПараметровОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпособОбеспечения(ИмяТаблицы)

	Строка = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ЗначениеЗаполнено(Строка.СпособОбеспечения) Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ", Строка.СпособОбеспечения);
		ОткрытьФорму("Справочник.СпособыОбеспеченияПотребностей.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУсловияЗакупок(Поставка)

	Поставка.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	Поставка.ЦенаВВалютеУправленческогоУчета = 0;
	Поставка.ЦенаВВалютеСоглашения = 0;
	Поставка.ВалютаСоглашения = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");

КонецПроцедуры

#КонецОбласти

#Область КорзинаЗаказов

&НаСервере
Процедура ЗаполнитьКорзинуЗаказов(ИмяТаблицы)

	Таблица = Объект[ИмяТаблицы];

	КлючВДереве  = Новый Массив();
	ИменаКолонокПоставщик    = "ИсточникОбеспечения, ТипОбеспечения";
	ИменаКолонокСпособыИДаты = "ДатаПоставки, Соглашение, СпособОбеспечения, ВалютаСоглашения";
	КлючВДереве.Добавить(Новый Структура(ИменаКолонокПоставщик));
	КлючВДереве.Добавить(Новый Структура(ИменаКолонокСпособыИДаты));
	Поставка = Новый Структура("Отметка, КЗаказу, ЭтоРабота, Вес, ЦенаВВалютеСоглашения, ЦенаВВалютеУправленческогоУчета");
	Поставка.ЭтоРабота = Ложь;

	ДеревоКорзиныЗаказов = РеквизитФормыВЗначение("КорзинаЗаказов");
	Поставщики = ДеревоКорзиныЗаказов.Строки;

	Для Каждого Строка Из Таблица Цикл

		ЗаполнитьЗначенияСвойств(КлючВДереве[0], Строка);
		ЗаполнитьЗначенияСвойств(КлючВДереве[1], Строка);
		ЗаполнитьЗначенияСвойств(Поставка, Строка);
		Поставка.КЗаказу = Строка.Округлено;

		СлужебныеПоля = ОтразитьПоставкуВДереве(Поставщики, Поставка, КлючВДереве, ТекстНеЗаполнено);
		ЗаполнитьЗначенияСвойств(Строка, СлужебныеПоля);

	КонецЦикла;

	Поставщики.Сортировать(ИменаКолонокПоставщик);
	Для Каждого Поставщик Из Поставщики Цикл

		СпособыИДатыПоставок = Поставщик.Строки;
		СпособыИДатыПоставок.Сортировать(ИменаКолонокСпособыИДаты);

	КонецЦикла;

	КорзинаЗаказовИтогПолеСумма    = Поставщики.Итог("СуммаУпрУчет");
	КорзинаЗаказовИтогПолеОбщийВес = Поставщики.Итог("ОбщийВес");
	КорзинаЗаказовИтогПолеСтрокВсего = Поставщики.Итог("ВсегоСтрок");

	ЗначениеВРеквизитФормы(ДеревоКорзиныЗаказов, "КорзинаЗаказов");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтразитьПоставкуВДереве(Поставщики, Поставка, КлючВДереве, ТекстНеЗаполнено)

	Результат = Новый Структура("СуммаВалютаСоглашения, СуммаУпрУчет, ОбщийВес, КоличествоСтарое, Счетчик");

	Если Поставка.Отметка И Поставка.КЗаказу > 0 Тогда
		
		Если Не ЗначениеЗаполнено(КлючВДереве[0].ИсточникОбеспечения) Тогда
			КлючВДереве[0].ИсточникОбеспечения = ТекстНеЗаполнено;
		КонецЕсли;
		
		МассивСтрок = Поставщики.НайтиСтроки(КлючВДереве[0]);
		Если МассивСтрок.Количество() = 0 Тогда
			
			Поставщик = Поставщики.Добавить();
			Поставщик.УровеньВДереве = 0;
			ЗаполнитьЗначенияСвойств(Поставщик, КлючВДереве[0]); 
			Поставщик.ТипОбеспечения = КлючВДереве[0].ТипОбеспечения;
			
		Иначе //Поставщик уже есть в дереве.
			Поставщик = МассивСтрок[0];
		КонецЕсли;
		
		СпособыИДатыПоставок = Поставщик.Строки;
		МассивСтрок = СпособыИДатыПоставок.НайтиСтроки(КлючВДереве[1]);
		Если МассивСтрок.Количество() = 0 Тогда
			
			СпособИДатаПоставки = СпособыИДатыПоставок.Добавить();
			СпособИДатаПоставки.УровеньВДереве = 1;
			ЗаполнитьЗначенияСвойств(СпособИДатаПоставки, КлючВДереве[1]); 
			
		Иначе //Такой способ и дата уже есть в дереве.
			СпособИДатаПоставки = МассивСтрок[0];
		КонецЕсли;
		
		//Добавим ресурсы (суммы, количества поставки) в строку дерева.
		
		Результат.СуммаВалютаСоглашения = Поставка.ЦенаВВалютеСоглашения           * Поставка.КЗаказу;
		Результат.СуммаУпрУчет          = Поставка.ЦенаВВалютеУправленческогоУчета * Поставка.КЗаказу;
		Результат.ОбщийВес              = Поставка.Вес                             * Поставка.КЗаказу;
		Результат.КоличествоСтарое      = Поставка.КЗаказу;
		Результат.Счетчик               = 1;

		СпособИДатаПоставки.Сумма        = СпособИДатаПоставки.Сумма        + Результат.СуммаВалютаСоглашения;
		СпособИДатаПоставки.СуммаУпрУчет = СпособИДатаПоставки.СуммаУпрУчет + Результат.СуммаУпрУчет;
		СпособИДатаПоставки.ОбщийВес     = СпособИДатаПоставки.ОбщийВес     + Результат.ОбщийВес;
		СпособИДатаПоставки.Количество   = СпособИДатаПоставки.Количество   + Поставка.КЗаказу;
		
		СпособИДатаПоставки.ВсегоСтрок   = СпособИДатаПоставки.ВсегоСтрок   + 1;
		СпособИДатаПоставки.СтрокБезВеса = СпособИДатаПоставки.СтрокБезВеса + ?(Поставка.Вес = 0 И НЕ Поставка.ЭтоРабота, 1, 0);
		СпособИДатаПоставки.СтрокБезЦены = СпособИДатаПоставки.СтрокБезЦены
			+ ?(Поставка.ЦенаВВалютеУправленческогоУчета = 0 И КлючВДереве[0].ТипОбеспечения = Перечисления.ТипыОбеспечения.Покупка, 1, 0);
		СпособИДатаПоставки.СуммаПосчитанаВерно = (СпособИДатаПоставки.СтрокБезЦены = 0);
		СпособИДатаПоставки.ВесПосчитанВерно    = (СпособИДатаПоставки.СтрокБезВеса = 0);
		
		Поставщик.Сумма        = Поставщик.Сумма        + Результат.СуммаВалютаСоглашения;
		Поставщик.СуммаУпрУчет = Поставщик.СуммаУпрУчет + Результат.СуммаУпрУчет;
		Поставщик.ОбщийВес     = Поставщик.ОбщийВес     + Результат.ОбщийВес;
		
		Поставщик.ВсегоСтрок          = Поставщик.ВсегоСтрок + 1;
		Поставщик.СтрокБезВеса        = Поставщик.СтрокБезВеса + ?(Поставка.Вес = 0 И НЕ Поставка.ЭтоРабота, 1, 0);
		Поставщик.СтрокБезЦены        = Поставщик.СтрокБезЦены + ?(Поставка.ЦенаВВалютеУправленческогоУчета = 0, 1, 0);
		Поставщик.СуммаПосчитанаВерно = (Поставщик.СтрокБезЦены = 0);
		Поставщик.ВесПосчитанВерно    = (Поставщик.СтрокБезВеса = 0);
		Поставщик.Количество          = Поставщик.Количество + Поставка.КЗаказу;
		
		Возврат Результат;
		
	Иначе
		
		Результат.КоличествоСтарое       = 0;
		Результат.СуммаУпрУчет           = 0;
		Результат.СуммаВалютаСоглашения  = 0;
		Результат.ОбщийВес               = 0;
		Результат.Счетчик                = 0;
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПоставкуВКорзине(Форма, Поставка, КоличествоКЗаказу, ВозможныРаботы)

	СуммаВалютаСоглашения   = Поставка.ЦенаВВалютеСоглашения            * КоличествоКЗаказу;
	СуммаУпрУчет            = Поставка.ЦенаВВалютеУправленческогоУчета  * КоличествоКЗаказу;
	ОбщийВес                = Поставка.Вес                              * КоличествоКЗаказу;

	ПриращениеСуммыУпрУчет          = СуммаУпрУчет          - Поставка.СуммаУпрУчет;
	ПриращениеСуммыВалютаСоглашения = СуммаВалютаСоглашения - Поставка.СуммаВалютаСоглашения;
	ПриращениеОбщегоВеса            = ОбщийВес              - Поставка.ОбщийВес;
	ПриращениеКоличества            = КоличествоКЗаказу     - Поставка.КоличествоСтарое;

	ДобавлениеУдалениеСтроки = ?(Поставка.КоличествоСтарое = 0, 1, ?(КоличествоКЗаказу = 0, -1, 0));

	Поставка.СуммаУпрУчет           = СуммаУпрУчет;
	Поставка.СуммаВалютаСоглашения  = СуммаВалютаСоглашения;
	Поставка.ОбщийВес               = ОбщийВес;
	Поставка.КоличествоСтарое       = КоличествоКЗаказу;

	Если ПриращениеКоличества = 0 Тогда
		Возврат;
	КонецЕсли;

	//Формируем ключ поставки, для поиска позиции в иерархии дерева, в которую необходимо добавлять новую строку.
	КлючОбъектаВКорзинеЗаказов = Новый Массив();
	КлючОбъектаВКорзинеЗаказов.Добавить(
		Новый Структура("ИсточникОбеспечения, ТипОбеспечения",
			?(НЕ ЗначениеЗаполнено(Поставка.ИсточникОбеспечения),
				Форма.ТекстНеЗаполнено,
				Поставка.ИсточникОбеспечения),
			Поставка.ТипОбеспечения));

	СтруктураКлюча = Новый Структура("ДатаПоставки, Соглашение, СпособОбеспечения");
	ЗаполнитьЗначенияСвойств(СтруктураКлюча, Поставка);
	КлючОбъектаВКорзинеЗаказов.Добавить(СтруктураКлюча);

	//Инициализируем поиск с головы дерева.
	ЭлементДерева           = Форма.КорзинаЗаказов;
	ВсегоГруппировокВДереве = КлючОбъектаВКорзинеЗаказов.Количество();
	
	ГруппировкаНайдена      = Ложь;
	Для ИндексГруппировки = 0 По ВсегоГруппировокВДереве - 1 Цикл
		
		КлючОбъектаДляГруппировки = КлючОбъектаВКорзинеЗаказов[ИндексГруппировки];
		
		//Получаем все элементы на текущем уровне иерархии дерева.
		КоллекцияЭлементовДерева = ЭлементДерева.ПолучитьЭлементы();
		ВсегоЭлементов           = КоллекцияЭлементовДерева.Количество();
		
		//Сверяем ключ строки поставки с полями группировки.
		Для Индекс = 0 По ВсегоЭлементов - 1 Цикл
		
			ЭлементДерева = КоллекцияЭлементовДерева[Индекс];
			ГруппировкаНайдена = Истина;
			Для Каждого КлючОбъектаДляПоляГруппировки Из КлючОбъектаДляГруппировки Цикл
			
				Если ЭлементДерева[КлючОбъектаДляПоляГруппировки.Ключ] <> КлючОбъектаДляПоляГруппировки.Значение Тогда
					
					ГруппировкаНайдена = Ложь;
					Прервать;
				
				КонецЕсли;
		
			КонецЦикла;
		
			Если ГруппировкаНайдена Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		//Ключ поставки не был обнаружен на текущем уровне иерархии, в данном уровне необходимо добавлять строку с новыми
		//значениями ключа, заданными в поставке.
		Если Не ГруппировкаНайдена Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Создаем новую ветвь в дереве согласно ключу поставки, заполняем строки данными поставки.
	//Поля показателей оставляем нулевыми.
	Для Счетчик = ИндексГруппировки По ВсегоГруппировокВДереве - 1 Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Поставка, , "СуммаУпрУчет, ОбщийВес");
		ЭлементДерева.ИсточникОбеспечения =
			?(НЕ ЗначениеЗаполнено(Поставка.ИсточникОбеспечения), 
				Форма.ТекстНеЗаполнено, 
				Поставка.ИсточникОбеспечения);
		КоллекцияЭлементовДерева = ЭлементДерева.ПолучитьЭлементы();
		
		ЭлементДерева.УровеньВДереве = Счетчик;
		
		Индекс = 0;
		
	КонецЦикла;
	
//Пересчитаем показатели вверх по иерархии дерева в связи с обновлением поставки.
	ЭлементДереваНаУдаление = Неопределено;
	
	Пока ЭлементДерева <> Неопределено Цикл
		
		ЭлементДерева.СуммаУпрУчет  = ЭлементДерева.СуммаУпрУчет + ПриращениеСуммыУпрУчет;
		ЭлементДерева.Сумма         = ЭлементДерева.Сумма        + ПриращениеСуммыВалютаСоглашения;
		ЭлементДерева.ОбщийВес      = ЭлементДерева.ОбщийВес     + ПриращениеОбщегоВеса;
		ЭлементДерева.Количество    = ЭлементДерева.Количество   + ПриращениеКоличества;
		
		//Расчет статистики верного заполнения веса и цены в строке корзины заказов.
		Если Поставка.ЦенаВВалютеСоглашения = 0 
			И Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
			
			ЭлементДерева.СтрокБезЦены = ЭлементДерева.СтрокБезЦены + ДобавлениеУдалениеСтроки; 
			
		КонецЕсли;
		
		Если Поставка.Вес = 0 И (Не ВозможныРаботы Или Не Поставка.ЭтоРабота) Тогда
			
			ЭлементДерева.СтрокБезВеса = ЭлементДерева.СтрокБезВеса + ДобавлениеУдалениеСтроки;
			
		КонецЕсли;
		
		ЭлементДерева.ВсегоСтрок            = ЭлементДерева.ВсегоСтрок + ДобавлениеУдалениеСтроки; 
		ЭлементДерева.СуммаПосчитанаВерно   = (ЭлементДерева.СтрокБезЦены = 0); 
		ЭлементДерева.ВесПосчитанВерно      = (ЭлементДерева.СтрокБезВеса = 0); 
		
		//Запоминаем, если строка подлежит удалению.
		Если ЭлементДерева.Количество = 0 Тогда
			
			ЭлементДереваНаУдаление = ЭлементДерева;
			
		КонецЕсли;
		
		ЭлементДерева = ЭлементДерева.ПолучитьРодителя();
			
	КонецЦикла;
	
	//Удаляем ветку, при необходимости.
	Если ЭлементДереваНаУдаление <> Неопределено Тогда
		
		Родитель = ЭлементДереваНаУдаление.ПолучитьРодителя();
		Родитель = ?(Родитель <> Неопределено, Родитель, Форма.КорзинаЗаказов);
		Родитель.ПолучитьЭлементы().Удалить(ЭлементДереваНаУдаление);
	
	КонецЕсли;
	
	//Пересчитываем итоги подвала корзины заказов.
	Форма.КорзинаЗаказовИтогПолеОбщийВес    = Форма.КорзинаЗаказовИтогПолеОбщийВес   + ПриращениеОбщегоВеса;
	Форма.КорзинаЗаказовИтогПолеСумма       = Форма.КорзинаЗаказовИтогПолеСумма      + ПриращениеСуммыУпрУчет;
	Форма.КорзинаЗаказовИтогПолеСтрокВсего  = Форма.КорзинаЗаказовИтогПолеСтрокВсего + ДобавлениеУдалениеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСвязанныеПоставкиВКорзине(СоответствиеСтрок)
	
	// При пересчете округления могут быть затронуты все связанные строки. Их необходимо повторно отразить в корзине.
	Для Каждого КлючЗначение Из СоответствиеСтрок Цикл
		Строка = КлючЗначение.Ключ;
		
		КоличествоКЗаказу = Строка.Округлено * ?(Строка.Отметка, 1, 0);
		// Значение - признак таблицы Запасы.
		ОтразитьПоставкуВКорзине(ЭтаФорма, Строка, КоличествоКЗаказу, Не КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметку(ИмяТаблицы, Установить)
	
	ВыделенныеСтроки = ?(ИмяТаблицы = "Запасы", Элементы.Запасы.ВыделенныеСтроки,
	                                            Элементы.ЗаказыКОбеспечению.ВыделенныеСтроки);
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект[ИмяТаблицы].НайтиПоИдентификатору(Идентификатор);
		Если Строка.Отметка Тогда
			ОтразитьПоставкуВКорзине(ЭтаФорма, Строка, 0, ИмяТаблицы <> "Запасы");
		КонецЕсли;
		
		Строка.Отметка = Установить;
		
		ПересчитатьОкруглениеСервер(Строка, ИмяТаблицы = "Запасы");
		
		Если Строка.Отметка Тогда
			ОтразитьПоставкуВКорзине(ЭтаФорма, Строка, Строка.Округлено, ИмяТаблицы <> "Запасы");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметкуНаВсеСтроки(ИмяТаблицы, Установить)
	
	Таблица = Объект[ИмяТаблицы];

	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.Отметка Тогда
			ОтразитьПоставкуВКорзине(ЭтаФорма, Строка, 0, ИмяТаблицы <> "Запасы");
		КонецЕсли;
		
		Строка.Отметка = Установить;
		
		Если Строка.Отметка Тогда
			ОтразитьПоставкуВКорзине(ЭтаФорма, Строка, Строка.Округлено, ИмяТаблицы <> "Запасы");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШагСформированныеЗаказы

Процедура УстановитьСтатусНаСервере(МассивСсылок, Статус)

	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%';uk='Не вдалося записати %Документ%. %ОписаниеОшибки%'");

	Для Каждого Элемент Из МассивСсылок Цикл

		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Элемент.Ссылка);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Элемент.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Элемент.Ссылка);
			Продолжить;
		КонецПопытки;

		// Получение объекта документа
		ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();

		// Установка статуса документа
		Если Не ДокументОбъект.УстановитьСтатус(Статус, Неопределено) Тогда
			Продолжить;
		КонецЕсли;

		// Запись документа
		Попытка

			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

			СтрокаТаблицы = ТаблицаДокументы.НайтиПоИдентификатору(Элемент.ИдентификаторСтроки);
			СтрокаТаблицы.НеПоставленВГрафик = 0;
			СтрокаТаблицы.НеПоставленВГрафикПроизводства = 0;
			СтрокаТаблицы.Статус = ДокументОбъект.Статус;

		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Элемент.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Элемент.Ссылка);
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

//Создает заказы в информационной базе по имеющейся таблице заказов, зафиксированных пользователем.
//
&НаСервере
Функция СоздатьЗаказы()

	ДокументыОбъекты = Новый Массив();
	Сообщения        = Новый Массив();
	ТекстКомментарий = НСтр("ru='Сформирован автоматически обработкой ""Формирование заказов по потребностям"".';uk='Сформований автоматично обробкою ""Формування замовлень по потребах"".'");

	СекцииДляВыгрузки = "СвойстваПотребности, РеквизитыОбеспечивающегоЗаказа";
	Поля = Обработки.ОбеспечениеПотребностей.ПоляТаблицыЗаказы(СекцииДляВыгрузки);
	Поля.Вставить("Округлено", Новый ОписаниеТипов("Число"));
	Поля.Вставить("ЧислительУпаковки", Новый ОписаниеТипов("Число"));
	Поля.Вставить("ЗнаменательУпаковки", Новый ОписаниеТипов("Число"));
	Поля.Вставить("ТипЕдиницыИзмерения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзмеряемыхВеличин"));
	Поля.Вставить("Отметка", Новый ОписаниеТипов("Булево"));
	
	Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(Поля);
	ВыгрузитьОтмеченныеКЗаказу(Таблица, "ЗаказыКОбеспечению");

	Элементы.ГруппаНастройкаФоновыхОпераций.Видимость =
		Таблица.Найти(Справочники.Назначения.ПустаяСсылка(), "Назначение") <> Неопределено;

	ВыгрузитьОтмеченныеКЗаказу(Таблица, "Запасы");
	
	// Округление имеет смысл только когда могут использоваться упаковки номенклатуры
	Если ИспользоватьУпаковки Тогда
		ОкруглитьПередСозданиемЗаказов(Таблица);
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗначений", Таблица);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДатаСеанса()));

	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(ВременнаяТаблицаИзТаблицыКЗаказу(), "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаДанныеЗаполнения(), "");

	ТекстыЗапроса.Добавить(ТаблицаЗаказыПоставщикуКОформлению(),    "ТаблицаЗаказыПоставщику");
	ТекстыЗапроса.Добавить(ТаблицаЗаказыНаПеремещениеКоформлению(), "ТаблицаЗаказыНаПеремещение");
	ТекстыЗапроса.Добавить(ТаблицаЗаказыНаСборкуКОформлению(),      "ТаблицаЗаказыНаСборку");

	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса);
	
	ПоляКлючаЗаказа = "НаправлениеДеятельности, Соглашение, Партнер, Организация, Подразделение";
	МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Таблицы.ТаблицаЗаказыПоставщику, ПоляКлючаЗаказа);

	Для Каждого Элемент Из МассивТаблиц Цикл

		ПоляКлючаЗаказа = "Склад";
		ДанныеЗаполнения = Элемент.Ключ;
		ТаблицыПоСкладам = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Элемент.Таблица, ПоляКлючаЗаказа, "");

		Если ТаблицыПоСкладам.Количество() = 2 //Если заказ с товарами один, то добавляем работы в него.
			И Не ЗначениеЗаполнено(ТаблицыПоСкладам[0].Таблица[0].Склад) Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыПоСкладам[0].Таблица, ТаблицыПоСкладам[1].Таблица);
			ТаблицыПоСкладам.Удалить(0);

		КонецЕсли;

		Для Каждого Элемент1 Из ТаблицыПоСкладам Цикл

			ДанныеЗаполнения.Вставить("Склад", Элемент1.Ключ.Склад);
			Элемент1.Таблица.Колонки.ПодразделениеПолучатель.Имя = "Подразделение";
			
			ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментарий);
			ДанныеЗаполнения.Вставить("Товары", Элемент1.Таблица);
			Документ = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
				Документы.ЗаказПоставщику, ДанныеЗаполнения, Перечисления.СтатусыЗаказовПоставщикам.Подтвержден, Сообщения);
			ДокументыОбъекты.Добавить(Документ);

		КонецЦикла;

	КонецЦикла;

	ПоляКлючаЗаказа = "Организация, Подразделение, СкладОтправитель, СкладПолучатель";
	МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Таблицы.ТаблицаЗаказыНаПеремещение, ПоляКлючаЗаказа);

	Для Каждого Элемент Из МассивТаблиц Цикл

		ДанныеЗаполнения = Элемент.Ключ;
		ДанныеЗаполнения.Вставить("Товары", Элемент.Таблица);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментарий);
		Документ = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
			Документы.ЗаказНаПеремещение, ДанныеЗаполнения, Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению, Сообщения);
		ДокументыОбъекты.Добавить(Документ);

	КонецЦикла;

	ПоляКлючаЗаказа = "Организация, Подразделение, Склад, Номенклатура, Характеристика, Назначение,
		|НачалоСборкиРазборки, ОкончаниеСборкиРазборки, ДлительностьСборкиРазборки, Количество, КоличествоУпаковок";
	МассивТаблиц = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(Таблицы.ТаблицаЗаказыНаСборку, ПоляКлючаЗаказа);

	Для Каждого Элемент Из МассивТаблиц Цикл

		ДанныеЗаполнения = Элемент.Ключ;
		ДанныеЗаполнения.Вставить("ТипОперации", Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментарий);
		Документ = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
			Документы.ЗаказНаСборку, ДанныеЗаполнения, Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению, Сообщения);
		ДокументыОбъекты.Добавить(Документ);

	КонецЦикла;


	Результат = Новый Структура("Документы, Сообщения", ДокументыОбъекты, Сообщения);
	Возврат Результат;

КонецФункции

&НаСервере
Функция ТаблицаЗаказыПоставщикуКОформлению()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ИсточникОбеспечения = НЕОПРЕДЕЛЕНО ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ИНАЧЕ
		|				Т.ИсточникОбеспечения
		|		КОНЕЦ                                 КАК Партнер,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.Соглашение КАК Соглашение,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.Склад КАК Склад,
		|	Т.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(Т.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Назначение КАК Назначение,
		|	Т.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	Т.ВидЦены КАК ВидЦеныПоставщика,
		|	Т.ДатаПоставки КАК ДатаПоступления,
		|	СУММА(Т.Количество) КАК КоличествоУпаковок,
		|	СУММА(Т.Количество) КАК Количество
		|ИЗ
		|	ВтДанныеЗаполнения КАК Т
		|ГДЕ
		|	Т.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.НаправлениеДеятельности,
		|	Т.Соглашение,
		|	Т.ИсточникОбеспечения,
		|	Т.Организация,
		|	Т.Подразделение,
		|	Т.Склад,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.Назначение,
		|	Т.ДатаПоставки,
		|	Т.ВидЦены,
		|	Т.ПодразделениеПолучатель,
		|	Т.ИсточникОбеспечения
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаправлениеДеятельности,
		|	Соглашение,
		|	Партнер,
		|	Организация,
		|	Подразделение,
		|	Склад,
		|	Назначение,
		|	ДатаПоступления,
		|	Номенклатура,
		|	Характеристика,
		|	ПодразделениеПолучатель
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ТаблицаЗаказыНаПеремещениеКОформлению()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ИсточникОбеспечения = НЕОПРЕДЕЛЕНО ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ
		|				Т.ИсточникОбеспечения
		|		КОНЕЦ                                 КАК СкладОтправитель,
		|	Т.Организация                             КАК Организация,
		|	Т.Подразделение                           КАК Подразделение,
		|	Т.Склад                                   КАК СкладПолучатель,
		|
		|	Т.Номенклатура                            КАК Номенклатура,
		|	Т.Характеристика                          КАК Характеристика,
		|	Т.Назначение                              КАК Назначение,
		|
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Т.ДатаПоставки, ДЕНЬ, - Т.ДлительностьВДнях)) КАК НачалоОтгрузки,
		|
		|	Т.ДатаПоставки                            КАК ОкончаниеПоступления,
		|
		|	СУММА(Т.Количество)                       КАК КоличествоУпаковок,
		|	СУММА(Т.Количество)                       КАК Количество
		|ИЗ
		|	ВтДанныеЗаполнения КАК Т
		|ГДЕ
		|	Т.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
		|СГРУППИРОВАТЬ ПО
		|	Т.ИсточникОбеспечения, Т.Организация, Т.Подразделение, Т.Склад,
		|	Т.Номенклатура, Т.Характеристика, Т.Назначение, Т.ДатаПоставки, Т.ДлительностьВДнях
		|УПОРЯДОЧИТЬ ПО
		|	СкладОтправитель, Организация, Подразделение, СкладПолучатель,                 // порядок обхода заказов
		|	Назначение, НачалоОтгрузки, Номенклатура, Характеристика, ОкончаниеПоступления // порядок строк в заказе
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ТаблицаЗаказыНаСборкуКОформлению()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Организация                             КАК Организация,
		|	Т.Подразделение                           КАК Подразделение,
		|	Т.Склад                                   КАК Склад,
		|	Т.Номенклатура                            КАК Номенклатура,
		|	Т.Характеристика                          КАК Характеристика,
		|	Т.Назначение                              КАК Назначение,
		|
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Т.ДатаПоставки, ДЕНЬ, - Т.ДлительностьВДнях)) КАК НачалоСборкиРазборки,
		|
		|	Т.ДатаПоставки                            КАК ОкончаниеСборкиРазборки,
		|	Т.ДатаПоставки                            КАК ЖелаемаяДатаПоступления,
		|	Т.ДлительностьВДнях                       КАК ДлительностьСборкиРазборки,
		|
		|	СУММА(Т.Количество)                       КАК КоличествоУпаковок,
		|	СУММА(Т.Количество)                       КАК Количество
		|ИЗ
		|	ВтДанныеЗаполнения КАК Т
		|ГДЕ
		|	Т.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка)
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация, Т.Подразделение, Т.Склад, Т.Номенклатура, Т.Характеристика, Т.Назначение, Т.ДлительностьВДнях, Т.ДатаПоставки
		|УПОРЯДОЧИТЬ ПО
		|	Организация, Подразделение, Склад, Назначение, НачалоСборкиРазборки, Номенклатура, Характеристика // порядок обхода заказов
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции



#Область СлужебныеПроцедурыСозданияЗаказов

&НаСервере
Процедура ВыгрузитьОтмеченныеКЗаказу(Таблица, ИмяТаблицы)

	Для Каждого Строка Из Объект[ИмяТаблицы] Цикл

		Если Строка.Отметка И Строка.КЗаказу > 0 Тогда

			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВременнаяТаблицаИзТаблицыКЗаказу()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Номенклатура                               КАК Номенклатура,
		|	Т.Характеристика                             КАК Характеристика,
		|	Т.Склад                                      КАК Склад,
		|	Т.ПодразделениеПолучатель                    КАК ПодразделениеПолучатель,
		|	Т.Назначение                                 КАК Назначение,
		|
		|	Т.ТипОбеспечения                             КАК ТипОбеспечения,
		|	Т.ИсточникОбеспечения                        КАК ИсточникОбеспечения,
		|	Т.Соглашение                                 КАК Соглашение,
		|	Т.СпособОбеспечения                          КАК СпособОбеспечения,
		|	Т.ВидЦены                                    КАК ВидЦены,
		|	Т.ДатаПоставки                               КАК ДатаПоставки,
		|	Т.КЗаказу                                  КАК КЗаказу
		|
		|ПОМЕСТИТЬ ВтТаблицаЗначений
		|ИЗ
		|	&ТаблицаЗначений КАК Т
		|
		|ГДЕ
		|	Т.КЗаказу > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СпособОбеспечения
		|;
		|
		|////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ВременнаяТаблицаДанныеЗаполнения()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Номенклатура                               КАК Номенклатура,
		|	Т.Характеристика                             КАК Характеристика,
		|	Т.Склад                                      КАК Склад,
		|	Т.ПодразделениеПолучатель                    КАК ПодразделениеПолучатель,
		|	Т.Назначение                                 КАК Назначение,
		|
		|	Т.ТипОбеспечения                             КАК ТипОбеспечения,
		|	Т.ИсточникОбеспечения                        КАК ИсточникОбеспечения,
		|	Т.Соглашение                                 КАК Соглашение,
		|	ЕСТЬNULL(Т.Назначение.НаправлениеДеятельности,
		|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
		|
		|	ЕСТЬNULL(Т.СпособОбеспечения.Организация,
		|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))          КАК Организация,
		|
		|	ЕСТЬNULL(Т.СпособОбеспечения.Подразделение,
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
		|
		|	ЕСТЬNULL(Т.СпособОбеспечения.ДлительностьВДнях, 0)          КАК ДлительностьВДнях,
		|
		|	Т.ВидЦены                                    КАК ВидЦены,
		|	Т.ДатаПоставки                               КАК ДатаПоставки,
		|	Т.КЗаказу                                    КАК Количество
		|
		|ПОМЕСТИТЬ ВтДанныеЗаполнения
		|ИЗ
		|	ВтТаблицаЗначений КАК Т
		|;
		|
		|////////////////////////////////////////////////////////
		|";
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьНадписьПредупреждениеОРазмещенииЗаказов()

	Если Не РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку Тогда

		Элементы.СтраницыПредупреждениеОРазмещенииЗаказов.ТекущаяСтраница = Элементы.СтраницаНетПредупрежденияОРазмещении;

	ИначеЕсли ТаблицаДокументы.Итог("СтандартнаяКартинка") > 0 Тогда

		Элементы.СтраницыПредупреждениеОРазмещенииЗаказов.ТекущаяСтраница = Элементы.СтраницаИмеютсяНепроведенныеЗаказы;

	ИначеЕсли ТаблицаДокументы.Итог("НеПоставленВГрафик") Или ТаблицаДокументы.Итог("НеПоставленВГрафикПроизводства") > 0 Тогда

		Если ТаблицаДокументы.Итог("НеПоставленВГрафик") > 0 Тогда

			Элементы.СтраницыПредупреждениеОРазмещенииЗаказов.ТекущаяСтраница = Элементы.СтраницаПредупреждениеПодтвержден;


		КонецЕсли;

	Иначе

		Элементы.СтраницыПредупреждениеОРазмещенииЗаказов.ТекущаяСтраница = Элементы.СтраницаНетПредупрежденияОРазмещении;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПродолжитьСДругимиОтборамиНаСервере()

	Если РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку
		И (ТаблицаДокументы.Итог("НеПоставленВГрафик")
			+ ТаблицаДокументы.Итог("НеПоставленВГрафикПроизводства")) < ТаблицаДокументы.Количество() Тогда

		РазместитьЗаказыНаОтгрузку();

	КонецЕсли;

	КорзинаЗаказов.ПолучитьЭлементы().Очистить();
	Объект.Запасы.Очистить();
	Объект.ЗаказыКобеспечению.Очистить();
	Объект.СпособыОбеспечения.Очистить();
	ТаблицаДокументы.Очистить();
	УстановитьСтраницыПомощника("ШагОтборПотребностей");

КонецПроцедуры

&НаСервере
Процедура УдалитьСозданныеЗаказы()
	
	Обработки.ОбеспечениеПотребностей.УдалитьДокументы(ТаблицаДокументы);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьЗаказыНаОтгрузку()

	Поля = Обработки.ОбеспечениеПотребностей.ПоляТаблицыЗаказы("СвойстваПотребности, РеквизитыЗаказаКОбеспечению");
	ТаблицаКОбеспечению = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(Поля);
	Для Каждого Строка Из Объект.ЗаказыКОбеспечению цикл

		Если (Строка.Отметка И Строка.КЗаказу > 0 Или Строка.Требуется = Строка.Обеспечено)
			И Не ЗначениеЗаполнено(Строка.Назначение) Тогда

			НоваяСтрока = ТаблицаКОбеспечению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		КонецЕсли;

	КонецЦикла;

	Обработки.ОбеспечениеПотребностей.ОбеспечитьИзЗаказа(ТаблицаКОбеспечению);

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТаблицыДокументов(Ссылка)

	ПараметрыОтбора = Новый Структура("Документ", Ссылка);

	МассивНайденныхСтрок = ТаблицаДокументы.НайтиСтроки(ПараметрыОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		НовыеЗначенияРеквизитов = ПолучитьЗначенияРеквизитовДокументаИзСсылки(Ссылка);
		ЗаполнитьЗначенияСвойств(МассивНайденныхСтрок[0], НовыеЗначенияРеквизитов);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияРеквизитовДокумента(ДокументОбъект)

	ЗначенияРеквизитов = Новый Структура();
	
	ЗначенияРеквизитов.Вставить("Документ",            ДокументОбъект.Ссылка);
	ЗначенияРеквизитов.Вставить("СтандартнаяКартинка", ?(ДокументОбъект.Проведен, 0, ?(ДокументОбъект.ПометкаУдаления, 1, 2)));

	ЗаказНеПодтвержден = ?(ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЗаказПоставщику")
		Или ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
		Или ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
		Или ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт, ?(ДокументОбъект.Проведен, 0, 1), 1);

	ЗаказНаПроизводствоНеКПроизводству = 0;

	ЗначенияРеквизитов.Вставить("НеПоставленВГрафик",  ЗаказНеПодтвержден);
	ЗначенияРеквизитов.Вставить("НеПоставленВГрафикПроизводства", ЗаказНаПроизводствоНеКПроизводству);

	ЗначенияРеквизитов.Вставить("Статус",              ДокументОбъект.Статус);
	ЗначенияРеквизитов.Вставить("Организация",         ДокументОбъект.Организация);
	
	ДатаПоставки = '00010101';
	ИмяТабЧасти = "";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.Склад);
		ЗначенияРеквизитов.Вставить("ДатаПоставки",        ДокументОбъект.ЖелаемаяДатаПоступления);
		ДатаПоставки = ДокументОбъект.ОкончаниеСборкиРазборки;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.СкладОтправитель);
		ИмяТабЧасти = "Товары";
		ИмяРеквизитаДатыПоставки = "ОкончаниеПоступления";
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.Партнер);
		ЗначенияРеквизитов.Вставить("Сумма",               ДокументОбъект.СуммаДокумента);
		ЗначенияРеквизитов.Вставить("Валюта",              ДокументОбъект.Валюта);
		ИмяТабЧасти = "Товары";
		ИмяРеквизитаДатыПоставки = "ДатаПоступления";

	КонецЕсли;
	
	Если ИмяТабЧасти <> "" Тогда
		
		Для каждого Строка Из ДокументОбъект[ИмяТабЧасти] Цикл
			
			Если ДатаПоставки <> Строка[ИмяРеквизитаДатыПоставки] Тогда
				
				Если ДатаПоставки <> '00010101' Тогда
					
					//Если в документе более одной строки и разные даты поставок, то дату поставки не заполняем.
					ДатаПоставки = '00010101';
					Прервать;
					
				КонецЕсли;
				
				ДатаПоставки = Строка[ИмяРеквизитаДатыПоставки];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("ДатаПоставки", ДатаПоставки);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовДокументаИзСсылки(ДокументСсылка)

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка                              КАК Документ,
		|	МАКСИМУМ(Т.Статус)                   КАК Статус,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА Т.Проведен
		|			ТОГДА 0
		|		КОГДА Т.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ)                               КАК СтандартнаяКартинка,
		|	МАКСИМУМ(Т.Организация)              КАК Организация,";

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Т.Склад)                    КАК ИсточникОбеспечения,
		|	МАКСИМУМ(Т.ОкончаниеСборкиРазборки)  КАК ДатаПоставки,
		|	МИНИМУМ(Т.ОкончаниеСборкиРазборки)   КАК ДатаПоставкиМинимум,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Проведен ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ)                               КАК НеПоставленВГрафик,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Проведен ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ)                               КАК НеПоставленВГрафикПроизводства
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Т";
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Т.СкладОтправитель)           КАК ИсточникОбеспечения,
		|	МАКСИМУМ(ЗаказТовары.ОкончаниеПоступления) КАК ДатаПоставки,
		|	МИНИМУМ(ЗаказТовары.ОкончаниеПоступления)  КАК ДатаПоставкиМинимум,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Проведен ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ)                                 КАК НеПоставленВГрафик,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Проведен ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ)                               КАК НеПоставленВГрафикПроизводства
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Т.Партнер)                  КАК ИсточникОбеспечения,
		|	МАКСИМУМ(Т.СуммаДокумента)           КАК Сумма,
		|	МАКСИМУМ(Т.Валюта)                   КАК Валюта,
		|	МАКСИМУМ(ЗаказТовары.ДатаПоступления) КАК ДатаПоставки,
		|	МИНИМУМ(ЗаказТовары.ДатаПоступления)  КАК ДатаПоставкиМинимум,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Проведен И Т.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)) ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ)                               КАК НеПоставленВГрафик,
		|	0                                        КАК НеПоставленВГрафикПроизводства
		|ИЗ
		|	Документ.ЗаказПоставщику КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &Ссылка";
		

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ 
		|	Т.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО 
		|	Т.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗначенияРеквизитов = Новый Структура("
		|Документ,
		|Статус,
		|СтандартнаяКартинка,
		|НеПоставленВГрафик,
		|НеПоставленВГрафикПроизводства,
		|Организация,
		|ИсточникОбеспечения,
		|ДатаПоставки,
		|Сумма,
		|Валюта");
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
	Если ЗначенияРеквизитов.ДатаПоставки <> Выборка.ДатаПоставкиМинимум Тогда
		ЗначенияРеквизитов.ДатаПоставки = '00010101'; //очищаем дату поставки если их в документе несколько и они различны
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ЛогикаРаботыФормы

&НаСервере
Функция ДалееКШагуНастройкаСпособовОбеспеченияНаСервере()
	
	ЗаполнитьТаблицуСпособовОбеспечения();
	Если Объект.СпособыОбеспечения.Количество() > 0 Тогда
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНастройкаСпособовОбеспечения;
		УстановитьСтраницыПомощника("ШагНастройкаСпособовОбеспечения");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДалееКШагуЗапасы()
	
	ЗаписатьИзмененияСпособовОбеспечения();
	
	ОчиститьОтборыЗапасы();
	
	Настройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки;
	
	ТаблицаСпособыОбеспечения = Объект.СпособыОбеспечения.Выгрузить(Новый Структура("Отметка", Истина),
		"СпособОбеспечения, ФормироватьПлановыеЗаказы, ДатаПоставки");
	
	Таблица = Обработки.ОбеспечениеПотребностей.ТаблицаЗапасы(Настройки, "ОтборыКомпоновки", ТаблицаСпособыОбеспечения);
	
	Объект.Запасы.Очистить();
	КорзинаЗаказовИтогПолеСтрокВсего = 0;
	КорзинаЗаказовИтогПолеСумма      = 0;
	КорзинаЗаказовИтогПолеОбщийВес   = 0;
	
	Для Каждого Товар Из Таблица Цикл
	
		СтрокаЗапасы = Объект.Запасы.Добавить();
	
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, Товар);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.МинимальныйИМаксимальныйЗапасы(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.КоличествоКЗаказуДляПоддержанияЗапаса(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.УровеньЗапасаИКартинкаСменитьМетод(СтрокаЗапасы);
		ЗаполнитьЗначенияСвойств(СтрокаЗапасы, РезультатРасчета);
	
		СтрокаЗапасы.КЗаказуРекомендуется = СтрокаЗапасы.КЗаказу;
		СтрокаЗапасы.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(СтрокаЗапасы.ИсточникОбеспечения, ТекстНеЗаполнено);
	
	КонецЦикла;
	
	ЗаполнитьДеревоИндексов(Истина);
	
	// Пересчет округления для всех отмеченных строк
	Для Каждого Строка Из Объект.Запасы Цикл
		Если Строка.Отметка Тогда
			// В таблице Запасы нет повторяющихся строк. Каждая строка округляется отдельно
			
			СоответствиеСтрок = Новый Соответствие();
			СоответствиеСтрок.Вставить(Строка, Истина);
			ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьКорзинуЗаказов("Запасы");
	
КонецПроцедуры

&НаСервере
Процедура ДалееКШагуЗаказы()
	
	Отбор = Новый Структура("Отметка", Истина);
	ТаблицаЗапасы = Объект.Запасы.Выгрузить(Отбор, "Номенклатура, Характеристика, Склад, КЗаказу, Отметка, ИДИндекса");
	ТаблицаСпособыОбеспечения = Объект.СпособыОбеспечения.Выгрузить(Отбор,
		"СпособОбеспечения, ФормироватьПлановыеЗаказы, ДатаПоставки");
	Результат = Обработки.ОбеспечениеПотребностей.ТаблицаПотребностейПоЗаказамИОстатков(
		КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки, "ОтборыКомпоновщика", ТаблицаСпособыОбеспечения, ТаблицаЗапасы);
	
	Таблица = Результат.ТаблицаПотребностей;
	ТаблицаОстатков = Результат.ТаблицаОстатков;
	
	Объект.ЗаказыКОбеспечению.Очистить();
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, ПодразделениеПолучатель");
	ЕстьРаботы = Ложь;
	ЕстьТовары = Ложь;
	
	Объект.ЗаказыКОбеспечению.Загрузить(Таблица);
	Для Каждого СтрокаЗаказы Из Объект.ЗаказыКОбеспечению Цикл
		
		
		Если Не СтрокаЗаказы.ОбеспечиватьНезависимоОтЗапасов Или СтрокаЗаказы.ЭтоРабота Тогда
	
			//Расчет количества к резервированию.
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаЗаказы);
			СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Отбор);
			Если СтрокиОстатков.Количество() > 0 Тогда
				НайденнаяСтрока = СтрокиОстатков[0];
				КРезервированию = Мин(НайденнаяСтрока.КРезервированию, СтрокаЗаказы.Требуется);
				СтрокаЗаказы.КРезервированию = КРезервированию;
				НайденнаяСтрока.КРезервированию = НайденнаяСтрока.КРезервированию - КРезервированию;
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатРасчета = Обработки.ОбеспечениеПотребностей.КоличествоКЗаказуДляОбеспеченияЗаказов(СтрокаЗаказы);
		ЗаполнитьЗначенияСвойств(СтрокаЗаказы, РезультатРасчета);
	
		СтрокаЗаказы.КЗаказуРекомендуется = СтрокаЗаказы.КЗаказу;
		СтрокаЗаказы.Обеспечено = СтрокаЗаказы.КРезервированию;
	
		СтрокаЗаказы.Получатель = ?(СтрокаЗаказы.ЭтоРабота, СтрокаЗаказы.ПодразделениеПолучатель, СтрокаЗаказы.Склад);
		ЗаполнитьРасчетныеПоляСтрокиЗаказы(СтрокаЗаказы, КэшированныеЗначения);
	
		СтрокаЗаказы.ИсточникОбеспечения = ОбработатьПустойИсточникОбеспечения(СтрокаЗаказы.ИсточникОбеспечения, ТекстНеЗаполнено);
		
		ЕстьРаботы = ЕстьРаботы Или СтрокаЗаказы.ЭтоРабота;
		ЕстьТовары = ЕстьТовары Или Не СтрокаЗаказы.ЭтоРабота;
	
	КонецЦикла;
	
	ОчиститьОтборыЗаказы();
	
	Элементы.Получатель.Заголовок = ?(ЕстьРаботы И ЕстьТовары, НСтр("ru='Получатель';uk='Одержувач'"),
		?(ЕстьРаботы, НСтр("ru='Подразделение-получатель';uk='Підрозділ-одержувач'"), НСтр("ru='Склад';uk='Склад'")));
	
	ЗаполнитьДеревоИндексов(Ложь);
	
	СоответствиеСтрок = Новый Соответствие();
	Коллекция = ИндексыПоиска.ПолучитьЭлементы(); 
	Для Каждого Корень Из Коллекция Цикл
		
		СоответствиеСтрок.Очистить();
		Строки = Корень.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из Строки Цикл
			
			ТаблицаФормы = ?(СтрокаДерева.ТаблицаЗапасы, Объект.Запасы, Объект.ЗаказыКОбеспечению);
			СтрокаТаблицы = ТаблицаФормы.НайтиПоИдентификатору(СтрокаДерева.ИДСтроки);
			
			Если СтрокаТаблицы.Отметка Тогда
				СоответствиеСтрок.Вставить(СтрокаТаблицы, СтрокаДерева.ТаблицаЗапасы);
			КонецЕсли;
			
		КонецЦикла;
		
		ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки);
		
	КонецЦикла;
	
	ЗаполнитьКорзинуЗаказов("ЗаказыКОбеспечению");
	
КонецПроцедуры

&НаСервере
Функция ДалееКШагуСформированныеЗаказыНаСервере()

	Результат = СоздатьЗаказы();

	ИспользованиеСтатусов = Новый Соответствие();
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	ИспользованиеСтатусов.Вставить(Тип("ДокументСсылка.ЗаказПоставщику"),     ИспользоватьСтатусы);
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку");
	ИспользованиеСтатусов.Вставить(Тип("ДокументСсылка.ЗаказНаСборку"),       ИспользоватьСтатусы);
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение");
	ИспользованиеСтатусов.Вставить(Тип("ДокументСсылка.ЗаказНаПеремещение"),  ИспользоватьСтатусы);
	ИспользованиеСтатусовИтог = Ложь;
	Для Каждого Документ Из Результат.Документы Цикл

		НоваяСтрока = ТаблицаДокументы.Добавить();
		НовыеЗначенияРеквизитов = ПолучитьЗначенияРеквизитовДокумента(Документ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыеЗначенияРеквизитов);
		НоваяСтрока.ИспользованиеСтатусов = ИспользованиеСтатусов[ТипЗнч(НоваяСтрока.Документ)];
		ИспользованиеСтатусовИтог = ИспользованиеСтатусовИтог Или НоваяСтрока.ИспользованиеСтатусов;

	КонецЦикла;

	Элементы.Статус.Видимость = ИспользованиеСтатусовИтог;

	Для Каждого Сообщение Из Результат.Сообщения Цикл

		Сообщение.Сообщить();

	КонецЦикла;

	Элементы.Помощник.ТекущаяСтраница = Элементы.ШагСформированныеЗаказы;

	УстановитьСтраницыПомощника("ШагСформированныеЗаказы");
	Оповещения = ОповещенияОЗаписи();
	Возврат Оповещения;

КонецФункции

&НаСервере
Функция ОповещенияОЗаписи()

	Оповещения = Новый Массив();
	Для Каждого Строка Из ТаблицаДокументы Цикл

		ПолноеИмя = Строка.Документ.Метаданные().ПолноеИмя();
		ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".")[1];
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Запись_%1", ИмяОбъекта);
		РежимЗаписи = ?(Строка.СтандартнаяКартинка = 0, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);

			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("РежимЗаписи", РежимЗаписи);
			ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Истина);

		Оповещения.Добавить(
			Новый Структура("ИмяСобытия, ПараметрыОповещения, Источник",
			ИмяСобытия, ПараметрыОповещения, Строка.Документ));

	КонецЦикла;

	Возврат Оповещения;

КонецФункции

&НаСервере
Процедура НазадКШагуСоставЗаказаНаСервере()

	УдалитьСозданныеЗаказы();

КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницыПомощника(ИмяШага)

	Если ИмяШага = "ШагОтборПотребностей" Тогда

		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагОтборПотребностей;
		Элементы.НадписьШаг.Заголовок = НСтр("ru='Шаг 1 из 5. Отбор потребностей';uk='Крок 1 з 5. Відбір потреб'");

	ИначеЕсли ИмяШага = "ШагНастройкаСпособовОбеспечения" Тогда

		Элементы.ДалееНастройка.КнопкаПоУмолчанию = Истина;
		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагНастройкаСпособовОбеспечения;
		Элементы.НадписьШаг.Заголовок = НСтр("ru='Шаг 2 из 5. Настройка способов обеспечения';uk='Крок 2 з 5. Настройка способів забезпечення'");

	ИначеЕсли ИмяШага = "ШагЗапасы" Тогда

		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности;
		Элементы.СтраницыКомандыИФильтрыПотребностей.ТекущаяСтраница = Элементы.СтраницаКомандыИФильтрыЗапасы;
		Элементы.СтраницаКомандыИФильтрыЗаказы.Видимость = Ложь;
		Элементы.СтраницаКомандыИФильтрыЗапасы.Видимость = Истина;
		Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗапасы;
		Элементы.ДалееСоставЗаказа.КнопкаПоУмолчанию = Истина;
		Элементы.НадписьШаг.Заголовок = НСтр("ru='Шаг 3 из 5. Поддержание запасов';uk='Крок 3 з 5. Підтримання запасів'");

	ИначеЕсли ИмяШага = "ШагЗаказы" Тогда

		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагиПотребности;
		Элементы.СтраницыКомандыИФильтрыПотребностей.ТекущаяСтраница = Элементы.СтраницаКомандыИФильтрыЗаказы;
		Элементы.СтраницаКомандыИФильтрыЗаказы.Видимость = Истина;
		Элементы.СтраницаКомандыИФильтрыЗапасы.Видимость = Ложь;
		Элементы.СтраницыТаблицаПотребностей.ТекущаяСтраница = Элементы.СтраницаТаблицаЗаказы;
		Элементы.ДалееСоставЗаказа.КнопкаПоУмолчанию = Истина;
		Элементы.НадписьШаг.Заголовок = НСтр("ru='Шаг 4 из 5. Обеспечение заказов к отгрузке';uk='Крок 4 з 5. Забезпечення до відвантаження замовлень'");

	ИначеЕсли ИмяШага = "ШагСформированныеЗаказы" Тогда

		Элементы.Помощник.ТекущаяСтраница = Элементы.ШагСформированныеЗаказы;
		Элементы.ПродолжитьСДругимиОтборами.КнопкаПоУмолчанию = Истина;
		Элементы.НадписьШаг.Заголовок = НСтр("ru='Шаг 5 из 5. Уточнение сформированных заказов';uk='Крок 5 з 5. Уточнення сформованих замовлень'");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КШагуДокументыНаКлиенте()

	Если КорзинаЗаказов.ПолучитьЭлементы().Количество() = 0 Тогда

		ТекстОшибки = НСтр("ru='Нет заказов к оформлению. Отметьте флажком количество в колонке 
            |""К заказу"" для номенклатурной позиции которую необходимо заказать.'
            |;uk='Немає замовлень до оформлення. Відзначте прапорцем кількість в колонці 
            |""До замовлення"" для номенклатурної позиції яку необхідно замовити.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);

	Иначе

		Оповещения = ДалееКШагуСформированныеЗаказыНаСервере();
		Для Каждого Оповещение Из Оповещения Цикл

			Оповестить(Оповещение.ИмяСобытия, Оповещение.ПараметрыОповещения, Оповещение.Источник);

		КонецЦикла;

		ОбновитьНадписьПредупреждениеОРазмещенииЗаказов();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтборыСКД

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекДляОтборов(ДоступныеТипыОбеспечения)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
	УстановитьДоступныеТипыОбеспеченияВСКД(СхемаКомпоновкиДанных, ДоступныеТипыОбеспечения);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроекДляОтборов.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекДляОтборов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекДляОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеТипыОбеспеченияВСКД(СхемаКомпоновкиДанных, ДоступныеТипыОбеспечения)

	ПолеТипОбеспечения = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Найти(Новый полеКомпоновкиДанных("ТипОбеспечения"));

	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(ДоступныеТипыОбеспечения);
	ПолеТипОбеспечения.УстановитьДоступныеЗначения(Список);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИменаСохраняемыхРеквизитов =
		"РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку,
		|ФильтрНеобеспеченные";

	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);

	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ОбработкаОбеспечениеПотребностей", "Основная", Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ОбработкаОбеспечениеПотребностей", "Основная");

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		КомпоновщикНастроекДляОтборов.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		КомпоновщикНастроекДляОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
		Если Не ЗначениеНастроек.Свойство("РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку") Тогда

			РазместитьЗаказыНаОтгрузкуВСформированныхЗаказахНаПоставку = Истина;

		КонецЕсли;

		Если Не ЗначениеНастроек.Свойство("ФильтрНеобеспеченные") Тогда

			ФильтрНеобеспеченные = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьДоступностьТиповОбеспечения(ПараметрОтбор)

	СписокВыбора = Элементы.ОтборПоТипуОбеспечения.СписокВыбора;

	ПроизводствоНаСторонеДоступно = Ложь;
	
	//Ограничиваем возможные типы обеспечения в зависимости от функциональных опций.
	ПроизводствоДоступно = Ложь;
	СборкаДоступна                = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	ПеремещениеДоступно           = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
	ПокупкаДоступна               = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");

	//Ограничиваем возможные типы обеспечения в зависимости от прав текущего пользователя.
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		ПеремещениеДоступно = Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку) Тогда
		СборкаДоступна = Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		ПокупкаДоступна = Ложь;
	КонецЕсли;


	//Ограничиваем возможные типы обеспечения при запуске обработки из подсистемы производства.
	Если ПараметрОтбор = Перечисления.ТипыОбеспечения.Производство Тогда

		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.Производство;
		СборкаДоступна                = Ложь;
		ПеремещениеДоступно           = Ложь;
		ПокупкаДоступна               = Ложь;
		ПроизводствоНаСторонеДоступно = Ложь;

	ИначеЕсли ПараметрОтбор = Перечисления.ТипыОбеспечения.Покупка Тогда

		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.Покупка;
		СборкаДоступна                = Ложь;
		ПеремещениеДоступно           = Ложь;
		ПроизводствоДоступно          = Ложь;
		ПроизводствоНаСторонеДоступно = Ложь;

	ИначеЕсли ПараметрОтбор = Перечисления.ТипыОбеспечения.Перемещение Тогда

		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.Перемещение;
		СборкаДоступна                = Ложь;
		ПокупкаДоступна		          = Ложь;
		ПроизводствоДоступно          = Ложь;
		ПроизводствоНаСторонеДоступно = Ложь;

	ИначеЕсли ПараметрОтбор = Перечисления.ТипыОбеспечения.СборкаРазборка Тогда

		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.СборкаРазборка;
		ПеремещениеДоступно           = Ложь;
		ПокупкаДоступна		          = Ложь;
		ПроизводствоДоступно          = Ложь;
		ПроизводствоНаСторонеДоступно = Ложь;

	ИначеЕсли ПараметрОтбор = Перечисления.ТипыОбеспечения.ПроизводствоНаСтороне Тогда

		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.ПроизводствоНаСтороне;
		СборкаДоступна       = Ложь;
		ПеремещениеДоступно  = Ложь;
		ПокупкаДоступна		 = Ложь;
		ПроизводствоДоступно = Ложь;

	КонецЕсли;

	//Формируем окончательно список выбора типа обеспечения в простых отборах.
	Если Не ПроизводствоДоступно Тогда
		СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(Перечисления.ТипыОбеспечения.Производство));
	КонецЕсли;

	Если Не ПроизводствоНаСторонеДоступно Тогда
		СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(Перечисления.ТипыОбеспечения.ПроизводствоНаСтороне));
	КонецЕсли;

	Если Не ПеремещениеДоступно Тогда
		СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(Перечисления.ТипыОбеспечения.Перемещение));
	КонецЕсли;

	Если Не СборкаДоступна Тогда
		СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(Перечисления.ТипыОбеспечения.СборкаРазборка));
	КонецЕсли;

	Если Не ПокупкаДоступна Тогда
		СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению(Перечисления.ТипыОбеспечения.Покупка));
	КонецЕсли;

	//Приведение значения отбора по типу обеспечения к допустимому.
	Если СписокВыбора.Количество() = 1 Тогда
		ОтборПоТипуОбеспечения = СписокВыбора[0].Значение;
	ИначеЕсли СписокВыбора.НайтиПоЗначению(ОтборПоТипуОбеспечения) = Неопределено Тогда
		ОтборПоТипуОбеспечения = Перечисления.ТипыОбеспечения.ПустаяСсылка();
	КонецЕсли;

	//Настройка формы в целом в зависимости от доступных типов обеспечения.
	Если СписокВыбора.Количество() = 1 Тогда
		
		Элементы.ОтборПоТипуОбеспечения.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ОтборПоТипуОбеспечения.ЦветТекста = Метаданные.ЭлементыСтиля.ПоясняющийТекст.Значение;
		Элементы.ОтборПоТипуОбеспечения.Шрифт = Новый Шрифт(Элементы.ОтборПоТипуОбеспечения.Шрифт,,,Истина);

	ИначеЕсли СписокВыбора.Количество() = 0 Тогда

		Элементы.НетДоступныхТиповОбеспечения.Заголовок =
			НСтр("ru='Текущая настройка не позволяет формировать обеспечивающие заказы.
                |Для создания заказов необходимо настроить использование заказов в разделе ""Администрирование""'
                |;uk='Поточна настройка не дозволяє формувати забезпечуючи замовлення.
                |Для створення замовлень необхідно налаштувати використання замовлень у розділі ""Адміністрування""'");
		Элементы.НетДоступныхТиповОбеспечения.Видимость = Истина;
		Элементы.Помощник.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПростойОтбор(РеквизитФормы, ИмяПоля, ЗначениеПоУмолчанию, ЭлементОтбора, ЭлементПользовательскойНастройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если ПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение Тогда
		
		РеквизитФормы = ?(ЭлементПользовательскойНастройки.Использование,
			ЭлементПользовательскойНастройки.ПравоеЗначение, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек,
	ИмяПоля, Значение, ЭтоОтборПоГруппе)

	//Отбор предопределенный в настройках СКД.
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементНайден = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки 
				= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
					ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЭлементПользовательскойНастройки.Использование = (Значение <> Неопределено) И Не Значение.Пустая();
				Если ЭлементПользовательскойНастройки.Использование Тогда
					
					ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;
					
					Если ЭтоОтборПоГруппе Тогда
						
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
						
					КонецЕсли;
					
					ЭлементПользовательскойНастройки.ВидСравнения   = ВариантВидаСравнения;
					ЭлементПользовательскойНастройки.ПравоеЗначение = Значение;
					
				КонецЕсли;
				
				ЭлементНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Отбор по подчиненным полям (поиск в добавляемых пользователем элементах отбора).
	Если Не ЭлементНайден Тогда
		ИдентификаторОтбора = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
		Отбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтбора);
		ЭлементОтбора = Неопределено;
		Для каждого СуществующийЭлементОтбора Из Отбор.Элементы Цикл
			
			Если Строка(СуществующийЭлементОтбора.ЛевоеЗначение) = ИмяПоля Тогда
				ЭлементОтбора = СуществующийЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.Использование  = ЗначениеЗаполнено(Значение);
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ПравоеЗначение = Значение;
		
		ЭлементОтбора.ВидСравнения   = ?(ЭтоОтборПоГруппе, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтразитьОтборКомпоновкиВПростыхОтборах()
	
	//Отбор по подчиненным полям (поиск в добавляемых пользователем элементах отбора).
	//В простые отборы возможно отразить только отборы по полям "Товарная категория" и "Марка", подчиенным Номенклатуре.
	ИдентификаторОтбора = КомпоновщикНастроекДляОтборов.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	Отбор = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтбора);
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.Использование Тогда
			
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОтборПоГруппеДоступен = Не ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Партнеры")
				И Не ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия");
				
			СтрокаЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
			ОтражениеДопустимо = (СтрокаЛевоеЗначение = "Номенклатура.ТоварнаяКатегория"
					Или СтрокаЛевоеЗначение = "Номенклатура.Марка")
				И (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии И ОтборПоГруппеДоступен)
				И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных")
				И СтрокаЛевоеЗначение <> "Характеристика"
				И СтрокаЛевоеЗначение <> "СпособОбеспечения";
			
			Если Не ОтражениеДопустимо Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			
			ОтборПоГруппеДоступен = Не ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Партнеры")
				И Не ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия");

			ОтражениеДопустимо = (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии И ОтборПоГруппеДоступен)
				И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных")
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("СправочникСсылка.СпособыОбеспеченияПотребностей");
			Если Не ОтражениеДопустимо Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	//Заполнение простых отборов по подчиненным полям.
	ОтборПоТоварнойКатегории = ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка");
	ОтборПоМарке             = ПредопределенноеЗначение("Справочник.Марки.ПустаяСсылка");
	
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
		
		Если СтрокаЛевоеЗначение = "Номенклатура.ТоварнаяКатегория" Тогда
			ОтборПоТоварнойКатегории = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли СтрокаЛевоеЗначение = "Номенклатура.Марка" Тогда
			ОтборПоМарке = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполнение простых отборов из предопределенных отборов СКД.
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
		
		ЭлементПользовательскойНастройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
			
			ЗаполнитьПростойОтбор(ОтборПоСкладу,
				"Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"), 
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			ЗаполнитьПростойОтбор(ОтборПоНоменклатуре,
				"Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
				
			ЗаполнитьПростойОтбор(ОтборПоТипуОбеспечения,
				"ТипОбеспечения", ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			ЗаполнитьПростойОтбор(ОтборПоСегменту,
				"СегментНоменклатуры", ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			ЗаполнитьПростойОтбор(ОтборПоИсточникуОбеспечения,
				"ИсточникОбеспечения", ТекстНеЗаполнено,
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			ЗаполнитьПростойОтбор(ОтборПоПодразделению,
				"Подразделение", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			ЗаполнитьПростойОтбор(ОтборПоНазначению,
				"Назначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"),
				ЭлементОтбора, ЭлементПользовательскойНастройки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОтборПоГруппеНаСервере(ЗначениеОтбора)
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектМетаданнных = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеОтбора));
	
	Если НЕ ОбъектМетаданнных.Иерархический
		ИЛИ ОбъектМетаданнных.ВидИерархии <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСправочника.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник." + ОбъектМетаданнных.Имя + " КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЭтоГруппа;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЭтоОтборПоГруппе(Ключ)
	
	Если КэшируемыеЗначения = Неопределено Тогда 
		
		КэшируемыеЗначения = Новый Структура("ОтборПоГруппе");
		КэшируемыеЗначения.ОтборПоГруппе = Новый Соответствие();
		
	КонецЕсли;
	
	ПризнакОтбораПоГруппе = КэшируемыеЗначения.ОтборПоГруппе.Получить(Ключ);
	Если ПризнакОтбораПоГруппе = Неопределено Тогда
		
		ПризнакОтбораПоГруппе = ЭтоОтборПоГруппеНаСервере(Ключ);
		КэшируемыеЗначения.ОтборПоГруппе.Вставить(Ключ, ПризнакОтбораПоГруппе);
		
	КонецЕсли;
	
	Возврат ПризнакОтбораПоГруппе;
	
КонецФункции

#КонецОбласти

#Область ФильтрыТаблицПотребностей

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЛюбой()
	Возврат НСтр("ru='<любой>';uk='<будь-який>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодУровняЗапаса(Уровень)
	
	Код = 0;
	Пока Код < 7 Цикл
		
		Если Уровень = УровеньЗапасаПоКоду(Код) Тогда
			Возврат Код;
		КонецЕсли;
		
		Код = Код + 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УровеньЗапасаПоКоду(Код)
	
	Возврат
		?(Код = 0, ТекстЛюбой(),
		?(Код = 1, НСтр("ru='Критический';uk='Критичний'"),
		?(Код = 2, НСтр("ru='Близкий к критическому';uk='Близький до критичного'"),
		?(Код = 3, НСтр("ru='К отмене заказа';uk='До скасуванні замовлення'"),
		?(Код = 4, НСтр("ru='Меньше половины';uk='Менше половини'"),
		?(Код = 5, НСтр("ru='Больше половины';uk='Більше половини'"),
		?(Код = 6, НСтр("ru='Избыток';uk='Надлишок'"), Неопределено)))))));
	
КонецФункции

&НаСервере
Процедура ОтборЗапасыНаСервере()

	СтруктураОтбора = Новый Структура();

	Если ФильтрОтметкаЗапасы Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;

	Если ФильтрУровеньЗапаса <> ТекстЛюбой() Тогда

		Если КодУровняЗапаса(ФильтрУровеньЗапаса) = 3 Тогда // к отмене заказа
			СтруктураОтбора.Вставить("КОтменеЗаказаКартинка", Истина);
		ИначеЕсли КодУровняЗапаса(ФильтрУровеньЗапаса) = 1
			Или КодУровняЗапаса(ФильтрУровеньЗапаса) = 2
			Или КодУровняЗапаса(ФильтрУровеньЗапаса) = 4 Тогда
			СтруктураОтбора.Вставить("УровеньЗапаса", КодУровняЗапаса(ФильтрУровеньЗапаса));
		ИначеЕсли КодУровняЗапаса(ФильтрУровеньЗапаса) = 5 Или КодУровняЗапаса(ФильтрУровеньЗапаса) = 6 Тогда
			СтруктураОтбора.Вставить("УровеньЗапасаМаксимум", КодУровняЗапаса(ФильтрУровеньЗапаса));
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(ФильтрКЗаказуНеПозднее) Тогда

		СтруктураОтбора.Вставить("УдовлетворяетОтбору", Истина);
		ОбновитьФильтрКЗаказуНеПозднее();

	КонецЕсли;

	СтруктураОтбораФиксированная = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.Запасы.ОтборСтрок = СтруктураОтбораФиксированная;

КонецПроцедуры

&НаСервере
Процедура ОтборЗаказыНаСервере()

	СтруктураОтбора = Новый Структура();

	Если ФильтрОтметкаЗаказы Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;

	Если ФильтрНеОбеспеченные Тогда
		СтруктураОтбора.Вставить("УдовлетворяетОтбору", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ФильтрПриоритет) Тогда
		СтруктураОтбора.Вставить("Приоритет", ФильтрПриоритет);
	КонецЕсли;

	Если ЗначениеЗаполнено(ФильтрКОтгрузкеНеРанее) Тогда
		СтруктураОтбора.Вставить("УдовлетворяетОтбору", Истина);
	КонецЕсли;

	Если ЗначениеЗаполнено(ФильтрКОтгрузкеНеПозднее) Тогда
		СтруктураОтбора.Вставить("УдовлетворяетОтбору", Истина);
	КонецЕсли;

	Если СтруктураОтбора.Свойство("УдовлетворяетОтбору") Тогда
		ОбновитьФильтрКОтгрузке();
	КонецЕсли;

	СтруктураОтбораФиксированная = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ЗаказыКОбеспечению.ОтборСтрок = СтруктураОтбораФиксированная;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФильтрКЗаказуНеПозднее()

	ДоТочкиЗаказаДней = (ФильтрКЗаказуНеПозднее - НачалоДня(ТекущаяДатаСеанса())) / 86400; //86400 - длительность суток
	Для каждого Строка из Объект.Запасы Цикл

		НаступитДатаЗаказа  = Строка.ФормироватьПлановыеЗаказы И Строка.ДатаЗаказа <= ФильтрКЗаказуНеПозднее;
		НаступитТочкаЗаказа = ?(Строка.МетодОбеспечения = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс,
			Строка.ТочкаЗаказаКартинка,
			Строка.СреднедневноеПотребление > 0 И Строка.ДоТочкиЗаказа / Строка.СреднедневноеПотребление <= ДоТочкиЗаказаДней);

		ЕстьКоличествоКЗаказу = Строка.Остаток + Строка.ЗаказыКПоступлению - Строка.МинимальныйЗапас < Строка.МаксимальныйЗапас;
		Строка.УдовлетворяетОтбору = НаступитТочкаЗаказа И Строка.ФормироватьПлановыеЗаказы
			Или НаступитДатаЗаказа И ЕстьКоличествоКЗаказу
			Или НаступитТочкаЗаказа И Не Строка.ФормироватьПлановыеЗаказы И ЕстьКоличествоКЗаказу;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФильтрКОтгрузке()

	Для каждого Строка из Объект.ЗаказыКОбеспечению Цикл

		Строка.УдовлетворяетОтбору =
			Строка.ДатаОтгрузки >= ФильтрКОтгрузкеНеРанее
			И (Строка.ДатаОтгрузки <= ФильтрКОтгрузкеНеПозднее Или Не ЗначениеЗаполнено(ФильтрКОтгрузкеНеПозднее))
			И (Строка.Требуется > Строка.Обеспечено Или Не ФильтрНеобеспеченные);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьОтборыЗапасы()

	ФильтрКЗаказуНеПозднее = '00010101'; //очистка даты
	ФильтрУровеньЗапаса = ТекстЛюбой();
	ФильтрОтметкаЗапасы = Ложь;
	ОтборЗапасыНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОчиститьОтборыЗаказы()

	ФильтрКОтгрузкеНеРанее = '00010101'; //очистка даты
	ФильтрКОтгрузкеНеПозднее = '00010101'; //очистка даты
	ФильтрОтметкаЗаказы = Ложь;
	ФильтрПриоритет = Справочники.Приоритеты.ПустаяСсылка();
	ОтборЗаказыНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораФильтраУровняЗапаса()

	СписокВыбора = Элементы.ФильтрУровеньЗапаса.СписокВыбора;
	СписокВыбора.Очистить();

	Для Счетчик = 0 по 6 Цикл

		СписокВыбора.Добавить(УровеньЗапасаПоКоду(Счетчик));

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиВозможностиВыполненияДействий

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРеквизитовТаблицыСпособовОбеспечения()
	
	Возврат Новый Структура(
		"СпособОбеспечения,
		|ДатаПоставки,
		|НетГрафикаПоставок,
		|НетДатыПоставкиПоКалендарю,
		|НетПлановойДатыЗаказаПоКалендарю,
		|ДатаСледующейПоставки,
		|ОбеспечиваемыйПериод,
		|СрокИсполненияЗаказа,
		|СпособОбеспеченияПредставление,
		|ПлановаяДатаЗаказа,
		|ДнейДоПлановогоЗаказа,
		|ФормироватьПлановыеЗаказы,
		|НаступилаДатаОчередногоЗаказа");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрошедшаяДата(ИндексСтроки, Дата, ИмяПоля, НачалоПериода)
	
	Если Дата >= НачалоПериода Или Не ЗначениеЗаполнено(Дата) Тогда
		Возврат ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Установка прошедшей даты недопустима.';uk='Встановлення дати, що пройшла, є неприпустимим.'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"СпособыОбеспечения[%1]." + ИмяПоля,
			ИндексСтроки),
		"Объект");
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ТаблицаСпособовЗаполненаВерно()
	
	НетОшибок = Истина;
	ЕстьОтмеченные = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.СпособыОбеспечения Цикл
		Если Не СтрокаТаблицы.Отметка Тогда
			Продолжить;
		Иначе
			ЕстьОтмеченные = Истина;
		КонецЕсли;
		ТекстОшибки = "";
		Если СтрокаТаблицы.НаступилаДатаОчередногоЗаказа Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаСледующейПоставки) Тогда
				ТекстОшибки = НСтр("ru='При плановом обеспечении необходимо указывать дату следующей поставки 
                    |(для расчета количества к заказу).'
                    |;uk='При плановому забезпечення необхідно вказувати дату наступного постачання 
                    |(для розрахунку кількості до замовлення).'");
			ИначеЕсли СтрокаТаблицы.ДатаСледующейПоставки <= СтрокаТаблицы.ДатаПоставки Тогда
				ТекстОшибки = НСтр("ru='Дата следующей поставки должна быть больше даты поставки, планируемой 
                    |в текущем сеансе работы.'
                    |;uk='Дата наступної поставки повинна бути більше дати поставки, планованої 
                    |в поточному сеансі роботи.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("СпособыОбеспечения[%1].ДатаСледующейПоставки",
					Объект.СпособыОбеспечения.Индекс(СтрокаТаблицы)),
				"Объект");
				
			НетОшибок = Ложь;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.НетДатыПоставкиПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru='Заполните график работы предприятия, либо укажите дату поставки вручную';uk='Заповніть графік роботи підприємства, або вкажіть дату поставки вручну'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("СпособыОбеспечения[%1].ДатаПоставки",
					Объект.СпособыОбеспечения.Индекс(СтрокаТаблицы)),
				"Объект");
				
			НетОшибок = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьОтмеченные Тогда

		ТекстОшибки = НСтр("ru='Для перехода к следующему шагу необходимо отметить хотя бы один способ обеспечения из списка';uk='Для переходу до наступного кроку необхідно відзначити хоча б один спосіб забезпечення зі списку'");
		ПоказатьПредупреждение(, ТекстОшибки);

		НетОшибок = Ложь;

	КонецЕсли;

	Возврат НетОшибок;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОтсутствииПотребностей()
	
	ТекстПредупреждения = НСтр("ru='Для товаров не установлены параметры поддержания запаса
            |и нет заказов клиентов, заказов на перемещение и т.п. к обеспечению.
            |Установите параметры обеспечения потребностей, либо измените условия отбора потребностей.
            |Важно: полностью отгруженные заказы %1не учитываются.'
            |;uk='Для товарів, не встановлені параметри підтримання запасу
            |і немає замовлень клієнтів, замовлень на переміщення і т. п. до забезпечення.
            |Встановіть параметри забезпечення потреб, або змініть умови відбору потреб.
            |Важливо: повністю відвантажені замовлення %1не враховуються.'");

	ИспользуютсяСтатусы = ИспользуютсяСтатусы();
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ?(ИспользуютсяСтатусы,
		НСтр("ru='и заказы в статусе ниже чем ""К обеспечению""';uk='і замовлення в статусі нижче чим ""До забезпечення""'") + " ", ""));

	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуютсяСтатусы()

	ИспользуютсяСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Или
		ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление") Или
		ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Или
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Или
		ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку");
		


	Возврат ИспользуютсяСтатусы;

КонецФункции

&НаКлиенте
Процедура ОчисткаТаблицыПотребностейВопросОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Результат = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Результат = Ложь;
	КонецЕсли;

	Если Результат Тогда

		Если ДополнительныеПараметры.Операция = "Закрытие" Тогда

			ОчисткаТаблицыПотребностейОтветПолучен = Истина;
			Закрыть();

		ИначеЕсли ДополнительныеПараметры.Операция = "ШагНазад" Тогда

			//чтобы не передавать лишние данные на сервер.
			КорзинаЗаказов.ПолучитьЭлементы().Очистить();
			Объект.Запасы.Очистить();
			Объект.ЗаказыКОбеспечению.Очистить();

			ОчиститьДеревоИндексов(Истина);
			
			ОчиститьСообщения();
			УстановитьСтраницыПомощника("ШагНастройкаСпособовОбеспечения");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицыПотребностейВопрос(Операция)

	Кнопки = Новый СписокЗначений();
	Текст = НСтр("ru='Очистить список потребностей';uk='Очистити список потреб'");
	Кнопки.Добавить(КодВозвратаДиалога.Да, Текст);
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	ТекстВопроса = НСтр("ru='В списке потребностей имеются отмеченные позиции, заказы по которым не сформированы. Список потребностей будет очищен.';uk='У списку потреб є відмічені позиції, замовлення по яких не сформовані. Список потреб буде очищений.'");

	ДополнительныеПараметры = Новый Структура("Операция", Операция);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаТаблицыПотребностейВопросОповещение",
		ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПодтверждениеОчисткиТаблицыЗаказыКОбеспечению(Знач Оповещение)

	Если Объект.ЗаказыКОбеспечению.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
		Возврат;
	КонецЕсли;

	Режим = Новый СписокЗначений();
	Текст = НСтр("ru='Очистить список потребностей';uk='Очистити список потреб'");
	Режим.Добавить(КодВозвратаДиалога.Да, Текст);
	Режим.Добавить(КодВозвратаДиалога.Отмена);
	ТекстВопроса = НСтр("ru='В списке потребностей имеются отмеченные позиции, заказы по которым не сформированы. Список потребностей будет очищен.';uk='У списку потреб є відмічені позиції, замовлення по яких не сформовані. Список потреб буде очищений.'");

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ПолучитьПодтверждениеОчисткиТаблицыЗаказыКОбеспечениюЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ТекстВопроса, Режим, 0);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПодтверждениеОчисткиТаблицыЗаказыКОбеспечениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Ответ = РезультатВопроса;
    
    ВыполнитьОбработкуОповещения(Оповещение, Ответ = КодВозвратаДиалога.Да);
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеРанее(Дата, СтандартнаяОбработка)

	Если Дата > ФильтрКОтгрузкеНеПозднее И ЗначениеЗаполнено(ФильтрКОтгрузкеНеПозднее) Тогда

		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru='Дата начала периода не может быть больше даты окончания';uk='Дата початку періоду не може бути більше дати закінчення'"), , );

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормыКлиентскогоПриложенияТакси()
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		Элементы.ОтметитьКЗаказуЗаказы.Отображение = ОтображениеКнопки.Картинка;
		Элементы.ОтметитьКЗаказуЗапасы.Отображение = ОтображениеКнопки.Картинка;
		Элементы.СнятьОтметкуЗаказы.Отображение    = ОтображениеКнопки.Картинка;
		Элементы.СнятьОтметкуЗапасы.Отображение    = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьВФормате(Параметр, ЕдиницаИзмерения, ФорматнаяСтрока)
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", Формат(Параметр, ФорматнаяСтрока), ЕдиницаИзмерения);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВДату(ДатаСтрокой)
	
	Год = Прав(ДатаСтрокой,4);
	Месяц = Сред(ДатаСтрокой,4,2);
	День = Лев(ДатаСтрокой,2);
	
	Если Не ЗначениеЗаполнено(Год + Месяц + День) Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Дата(Год, Месяц, День);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Нет доступа к заказу
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Нет доступа к заказу';uk='Немає доступу до замовлення'");

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Заказ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет доступа к данным заказа>';uk='<немає доступу до даних замовлення>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Гиперссылка метод обеспечения потребностей
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Гиперссылка метод обеспечения';uk='Гіперпосилання метод забезпечення'");

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МетодОбеспечения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.МетодОбеспечения");
	СписокМетодов = Новый СписокЗначений();
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	// Документ имеет высокий приоритет
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет высокий приоритет';uk='Документ має високий пріоритет'");

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыКОбеспечению.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);

	// Документ имеет низкий приоритет
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет низкий приоритет';uk='Документ має низький пріоритет'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыКОбеспечению.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);

	//Текст поля "Способ обеспечения" для номенклатуры, обеспечиваемой без указания способа

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияСпособОбеспечения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.СпособОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<обеспечение без указания способа>';uk='<забезпечення без зазначення способу>'"));

	//Выделение цветом ошибки в поле "Дней до планового заказа" когда просрочена дата заказа по плану, нет плановой даты поставки либо незаполнен календарь

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДнейДоЗаказаПоГрафикуПредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.ДнейДоПлановогоЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НетПлановойДатыЗаказаПоКалендарю");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НетГрафикаПоставок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//Недоступность поля "Дней до планового заказа" для способа с заказом по точке заказа

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДнейДоЗаказаПоГрафикуПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.ФормироватьПлановыеЗаказы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<только для поставок по графику>';uk='<тільки для поставок за графіком>'"));

	//Текст ошибки в поле "Дата поставки" при незаполненном календаре

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДатаПоставки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НетДатыПоставкиПоКалендарю");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не заполнен график работы предприятия>';uk='<не заповнений графік роботи підприємства>'"));

	//Отметка незаполненного в поле "Дата следующей поставки" в режиме "Все, плановое формирование заказа"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДатаСледующейПоставки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НаступилаДатаОчередногоЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.ДатаСледующейПоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//Отмена отметки незаполненного в поле "Дата следующей поставки"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДатаСледующейПоставки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НаступилаДатаОчередногоЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.ДатаСледующейПоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//Текст поля "Дата следующей поставки" при заказе товаров, достигших точки заказа

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СпособыОбеспеченияДатаСледующейПоставки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособыОбеспечения.НаступилаДатаОчередногоЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<только при плановом формировании заказа>';uk='<тільки при плановому формуванні замовлення>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//Не отображать поля соглашений на первом уровне группировки корзины заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоглашениеСПоставщиком.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПоступленияПоЗаказу.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВалютаСоглашения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаВВалютеСоглашения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыСпособПополненияЗапаса.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//Не отображать источник пополнения запасов на первом уровне группировки корзины заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//Первый уровень группировки в корзине заказов жирный

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыКОформлению.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//Текст "не указан поставщик" в поле Источник обеспечения в корзине заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ИсточникОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТекстНеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Покупка;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не указан поставщик>';uk='<не зазначений постачальник>'"));

	//Текст "не указанобеспечивающий склад" в поле Источник обеспечения в корзине заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ИсточникОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТекстНеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Перемещение;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не указан обеспечивающий склад>';uk='<не зазначений склад, що забезпечує>'"));

	//Текст "производство" в поле Источник обеспечения в корзине заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ИсточникОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТекстНеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Производство;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<производство>';uk='<виробництво>'"));

	//Текст "производство силами переработчика" в поле Источник обеспечения в корзине заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ИсточникОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТекстНеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.ПроизводствоНаСтороне;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<производство силами переработчика>';uk='<виробництво силами переробника>'"));

	//Текст "сборка" в поле Источник обеспечения в корзине заказов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыИсточникПополненияЗапаса.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ИсточникОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТекстНеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.УровеньВДереве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.СборкаРазборка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<сборка>';uk='<збирання>'"));

	//Если статуса созданного заказа нет, то надпись не проведен.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокументы.СтандартнаяКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не проведен>';uk='<не проведений>'"));

	//Оформление цветом отрицательного остатка

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СуммаВВалютеСоглашения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорзинаЗаказов.ВалютаСоглашения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//Выделение цветом отрицательного остатка на складе

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Остаток.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.Остаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//Текст <производство> в источнике обеспечения

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗаказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Производство;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<производство>';uk='<виробництво>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗапасы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.Производство;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<производство>';uk='<виробництво>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//Текст <сборка> в источнике обеспечения

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗаказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.СборкаРазборка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<сборка>';uk='<збирання>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗапасы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.ТипОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбеспечения.СборкаРазборка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<сборка>';uk='<збирання>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//Недоступность источника обеспечения, если он задан в способе обеспечения

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗапасы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Запасы.ИсточникОбеспеченияТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсточникОбеспеченияЗаказы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ИсточникОбеспеченияТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//Текст "обеспечивать независимо от запасов"

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Обеспечено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ОбеспечиватьНезависимоОтЗапасов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<запасы не учитываются>';uk='<запаси не обліковуються>'"));

	//Текст "<не используется>" в поле Статус

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокументы.ИспользованиеСтатусов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));

	// Просроченная дата отгрузки потребности по заказу
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОтгрузки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ДатаОтгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказыКОбеспечению.ДатаПоставки");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказки()

	Подсказки = Новый Структура();

	НадписьОбеспечиваемыйПериод = НСтр("ru='Число дней работы склада, в течении
        |которых необходимо обеспечить отгрузку
        |товаров формируемым заказом.
        |Рассчитывается от даты поставки до
        |границы обеспечиваемого периода'
        |;uk='Число днів роботи складу, протягом
        |яких необхідно забезпечити відвантаження
        |товарів замовленням, що формується.
        |Розраховується від дати поставки до
        |межі забезпечуваного періоду'");

	НадписьДействующийМетод = НСтр("ru='Действующий метод обеспечения потребностей';uk='Діючий метод забезпечення потреб'");

	НадписьСрокПоставки = НСтр("ru='Число дней работы склада до даты
        |поставки товара по формируемому заказу'
        |;uk='Число днів роботи складу до дати
        |постачання товару за замовленням, що формується'");

	НадписьОстаток = НСтр("ru='Текущий остаток товара на складе';uk='Поточний залишок товару на складі'");

	НадписьПоступления = НСтр("ru='Количество, заказаное ранее и ожидаемое к
        |поступлению'
        |;uk='Кількість, замовлена раніше і очікувана до
        |надходження'");

	НадписьСтраховойЗапас = НСтр("ru='Страховое количество запаса,
        |указанное в товарном ограничении'
        |;uk='Страхова кількість запасу,
        |зазначена в товарному обмеження'");

	НадписьЗапасДоТочкиЗаказа = НСтр("ru='Запас товара на складе свыше уровня
        |точки заказа. Уровень запаса точки
        |заказа рассчитывется как минимальный
        |запас плюс страховой запас'
        |;uk='Запас товару на складі понад рівня
        |точки замовлення. Рівень запасу точки
        |замовлення розраховується як мінімальний
        |запас плюс страховий запас'");

	НадписьЗапасНаСрок = НСтр("ru='Число дней работы склада, включая
        |текущую дату, в течение которых
        |будет израсходован текущий запас
        |товара по прогнозу потребления'
        |;uk='Число днів роботи складу, включаючи
        |поточну дату, протягом яких
        |буде витрачений поточний запас
        |товару за прогнозом споживання'");

	НадписьСрокДоТочкиЗаказаПрогноз = НСтр("ru='Временной запас до наступления точки
        |заказа. Число дней по истечении которых
        |запас товара достигнет уровня точки
        |заказа по прогнозу потребления'
        |;uk='Часовий запас до настання точки
        |замовлення. Число днів після закінчення яких
        |запас товару досягне рівня точки
        |замовлення за прогнозом споживання'");

	Подсказки.Вставить("СпособыОбеспеченияНаступилаДатаОчередногоЗаказа",
		НСтр("ru='Определяет состав товаров,
        |автоматически включаемых в
        |формируемый заказ на третьем
        |шаге работы обработки'
        |;uk='Визначає склад товарів,
        |які автоматично включаються в
        |замовлення, що формується, на третьому
        |кроці обробки'"));
		
	Подсказки.Вставить("СпособыОбеспеченияДатаПоставки", НСтр("ru='Дата ожидаемого поступления, которая
        |будет указана в формируемом заказе'
        |;uk='Дата очікуваного надходження, яка
        |буде вказана в замовленні, що формується'"));
		
	Подсказки.Вставить("СпособыОбеспеченияДатаСледующейПоставки",
		НСтр("ru='Граница периода, обеспечиваемого поставкой по графику';uk='Межа періоду, що забезпечується постачанням за графіком'"));
	
	Подсказки.Вставить("СпособыОбеспеченияДнейДоЗаказаПоГрафикуПредставление",
		НСтр("ru='Число дней до даты формирования
        |заказа на ближайшую поставку по графику'
        |;uk='Число днів до дати формування
        |замовлення на найближче постачання за графіком'"));

	Подсказки.Вставить("ГруппаКЗаказуЗапасы",
		НСтр("ru='Количество, которое будет указано
        |в формируемом заказе, заказываемое
        |для поддержания запаса'
        |;uk='Кількість, яку буде вказано
        |в формованому замовленні, що замовляється
        |для підтримання запасу'"));

	Подсказки.Вставить("Остаток", НадписьОстаток);

	Подсказки.Вставить("ЗаказыКПоступлению", НадписьПоступления);

	Подсказки.Вставить("МетодОбеспечения",
		НСтр("ru='Действующий метод обеспечения потребностей.
        |Поддержание запаса с установкой минимального
        |и максимального запасов вручную, либо расчетным
        |путем по норме или по статистике потребления'
        |;uk='Діючий метод забезпечення потреб.
        |Підтримка запасу з встановленням мінімального
        |і максимального запасів вручну, або шляхом
        |розрахунку за нормою або за статистикою споживання'"));

	Подсказки.Вставить("МинимальныйЗапас",
		НСтр("ru='Минимальное количество запаса,
        |указанное в товарном ограничении,
        |или рассчитанное по статистике'
        |;uk='Мінімальна кількість запасу,
        |зазначена в товарному обмеженні,
        |або розрахована за статистикою'"));

	Подсказки.Вставить("МаксимальныйЗапас",
		НСтр("ru='Максимальное количество запаса,
        |указанное в товарном ограничении,
        |или рассчитанное по статистике'
        |;uk='Максимальна кількість запасу,
        |зазначена в товарному обмеженні,
        |або розраховане за статистикою'"));

	Подсказки.Вставить("Остаток", НадписьОстаток);

	Для Каждого Подсказка Из Подсказки Цикл
		Элементы[Подсказка.Ключ].Подсказка = Подсказка.Значение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьЗаполненияФильтраКОтгрузкеНеПозднее(Дата, СтандартнаяОбработка)

	Если Дата < ФильтрКОтгрузкеНеРанее И ЗначениеЗаполнено(ФильтрКОтгрузкеНеРанее) Тогда

		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru='Дата окончания периода не может быть меньше даты начала';uk='Дата закінчення періоду не може бути менша дати початку'"), , );

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбработатьПустойИсточникОбеспечения(ИсточникОбеспечения, ТекстНеЗаполнено)
	
	Если Не ЗначениеЗаполнено(ИсточникОбеспечения) Тогда
		ИсточникОбеспечения = ТекстНеЗаполнено;
	КонецЕсли;
	
	Возврат ИсточникОбеспечения;
	
КонецФункции

#КонецОбласти

#Область ОкруглениеКоличества

// Пересчитывает округление для всех строк соответствующих корню ИДИндекса
//
// Параметры:
//  Строка	 - ДанныеФормыКоллекция	 - Строка, содержащая идентификатор корня в дереве ИндексыПоиска, по ветвям которого работает алгоритм
//  Запасы	 - Булево	 - Признак того, что вызов процедуры производится на шаге Запасы
//  	  
// Возвращаемое значение:
//   - СоответствиеСтрок - обработанные строки
&НаКлиенте
Функция ПересчитатьОкруглениеКлиент(Строка, Запасы = Ложь)
	
	Если Строка = Неопределено Тогда

		Возврат Неопределено;
	КонецЕсли;
	
	ИДИндекса = Строка.ИДИндекса;
	
	СоответствиеСтрок = ПодготовитьСоответствиеСтрокДляОкругленияКлиент(ИДИндекса);
	
	Структура = ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки);
	
	Возврат СоответствиеСтрок;
	
КонецФункции

// Пересчитывает округление для всех строк соответствующих корню ИДИндекса
//
// Параметры:
//  Строка	 - ДанныеФормыКоллекция	 - Строка, содержащая идентификатор корня в дереве ИндексыПоиска, по ветвям которого работает алгоритм
//  Запасы	 - Булево	 - Признак того, что вызов процедуры производится на шаге Запасы
//  	  
// Возвращаемое значение:
//   - СоответствиеСтрок - обработанные строки
&НаСервере
Функция ПересчитатьОкруглениеСервер(Строка, Запасы = Ложь)
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИДИндекса = Строка.ИДИндекса;
	
	СоответствиеСтрок = ПодготовитьСоответствиеСтрокДляОкругленияСервер(ИДИндекса);
	
	Структура = ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки);
	
	Возврат СоответствиеСтрок;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСоответствиеСтрокДляОкругленияКлиент(ИДИндекса)
	
	Корень = ИндексыПоиска.НайтиПоИдентификатору(ИДИндекса);
	
	ВетвиКорня = Корень.ПолучитьЭлементы();
	
	// Сортировка результата с помощью дополнительной таблицы, для распределения остатка от округления по датам
	ИндексыПоискаТаблицаСортировки.Очистить();
	
	Для Каждого Ветвь Из ВетвиКорня Цикл
		Строка = ?(Ветвь.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(Ветвь.ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(Ветвь.ИДСтроки));
		
		СтрокаСортировки = ИндексыПоискаТаблицаСортировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСортировки, Ветвь);
		СтрокаСортировки.ДатаПоставки = Строка.ДатаПоставки;
	КонецЦикла;
	
	ИндексыПоискаТаблицаСортировки.Сортировать("ДатаПоставки");
	
	Соответствие = Новый Соответствие();
	
	Для Каждого СтрокаСортировки Из ИндексыПоискаТаблицаСортировки Цикл
		Строка = ?(СтрокаСортировки.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(СтрокаСортировки.ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(СтрокаСортировки.ИДСтроки));
		
		Соответствие.Вставить(Строка, СтрокаСортировки.ТаблицаЗапасы);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПодготовитьСоответствиеСтрокДляОкругленияСервер(ИДИндекса)
	
	Корень = ИндексыПоиска.НайтиПоИдентификатору(ИДИндекса);
	
	ВетвиКорня = Корень.ПолучитьЭлементы();
	
	// Сортировка результата с помощью дополнительной таблицы, для распределения остатка от округления по датам
	ИндексыПоискаТаблицаСортировки.Очистить();
	
	Для Каждого Ветвь Из ВетвиКорня Цикл
		Строка = ?(Ветвь.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(Ветвь.ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(Ветвь.ИДСтроки));
		
		СтрокаСортировки = ИндексыПоискаТаблицаСортировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСортировки, Ветвь);
		СтрокаСортировки.ДатаПоставки = Строка.ДатаПоставки;
	КонецЦикла;
	
	ИндексыПоискаТаблицаСортировки.Сортировать("ДатаПоставки");
	
	Соответствие = Новый Соответствие();
	
	Для Каждого СтрокаСортировки Из ИндексыПоискаТаблицаСортировки Цикл
		Строка = ?(СтрокаСортировки.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(СтрокаСортировки.ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(СтрокаСортировки.ИДСтроки));
		
		Соответствие.Вставить(Строка, СтрокаСортировки.ТаблицаЗапасы);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьСоответствиеСтрок(СоответствиеСтрок, ИспользоватьУпаковки)
	
	ОстатокОкругления = 0;
	ОкругленоИтог = 0;
	КЗаказуИтог = 0;
	
	КЗаказуИтогЗапасы = 0;
	КЗаказуИтогЗаказы = 0;
	
	Для Каждого КлючЗначение Из СоответствиеСтрок Цикл
		
		Строка = КлючЗначение.Ключ;
		
		Округлено = 0;
		
		Если Строка <> Неопределено Тогда
			Если Строка.Отметка Тогда
				
				Если ИспользоватьУпаковки Тогда
					Если ОстатокОкругления >= Строка.КЗаказу Тогда
						ОстатокОкругления = ОстатокОкругления - Строка.КЗаказу;
						Округлено = 0; // ОстатокОкругления списывается полностью или частично. Эта строка обеспечена полностью
					Иначе
						КЗаказу = Строка.КЗаказу - ОстатокОкругления; // ОстатокОкругления списывается полностью в счет количества КЗаказу
						Округлено = Округлить(КЗаказу, ?(Строка.ЧислительУпаковки = 0 Или Строка.ЗнаменательУпаковки = 0, 1, Строка.ЧислительУпаковки / Строка.ЗнаменательУпаковки),
						Строка.ТипЕдиницыИзмерения);
						ОстатокОкругления = Округлено - КЗаказу;
					КонецЕсли;
				Иначе
					Округлено = Строка.КЗаказу;
				КонецЕсли;
				
				Строка.Округлено = Округлено;
				ОкругленоИтог = ОкругленоИтог + Округлено;
				
				КЗаказуИтог = КЗаказуИтог + Строка.КЗаказу;
				
				// Если истина - накапливается итог по таблице запасов, иначе - заказов
				Если КлючЗначение.Значение Тогда
					КЗаказуИтогЗапасы = КЗаказуИтогЗапасы + Строка.КЗаказу;
				Иначе
					КЗаказуИтогЗаказы = КЗаказуИтогЗаказы + Строка.КЗаказу;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура();
	Структура.Вставить("ОкругленоИтог", 	ОкругленоИтог);
	Структура.Вставить("КЗаказуИтог", 		КЗаказуИтог);
	Структура.Вставить("КЗаказуИтогЗапасы", КЗаказуИтогЗапасы);
	Структура.Вставить("КЗаказуИтогЗаказы", КЗаказуИтогЗаказы);
	
	Возврат Структура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Округлить(Количество, Кратность, ТипЕдиницыИзмерения)
	
	Если Кратность <> 1
		Или ТипЕдиницыИзмерения = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук") Тогда
		Если Количество % Кратность <> 0 Тогда
			Остаток = Цел(Количество / Кратность) + 1;
			Возврат Остаток * Кратность;
		Иначе
			Возврат Количество;
		КонецЕсли;
	Иначе 
		Возврат Количество;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьРасчитанноеОкругление(Строка, Запасы)
	
	Если Строка = Неопределено Тогда
		СформироватьИнформационнуюСтроку(Неопределено, 0, 0, 0, 0, Запасы);
		Возврат;
	КонецЕсли;
	
	ИДИндекса = Строка.ИДИндекса;
	
	Корень = ИндексыПоиска.НайтиПоИдентификатору(ИДИндекса);
	ВетвиКорня = Корень.ПолучитьЭлементы();
	
	ОкругленоИтог = 0;
	КЗаказуИтог = 0;
	
	КЗаказуИтогЗапасы = 0;
	КЗаказуИтогЗаказы = 0;
	
	Для Каждого Ветвь Из ВетвиКорня Цикл
		Округлено = 0;
		СтрокаПоДереву = ?(Ветвь.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(Ветвь.ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(Ветвь.ИДСтроки));
		
		Если СтрокаПоДереву <> Неопределено Тогда
			Если СтрокаПоДереву.Отметка Тогда
				
				Округлено = СтрокаПоДереву.Округлено;
				ОкругленоИтог = ОкругленоИтог + Округлено;
				КЗаказуИтог = КЗаказуИтог + СтрокаПоДереву.КЗаказу;
				
				Если Ветвь.ТаблицаЗапасы Тогда
					КЗаказуИтогЗапасы = КЗаказуИтогЗапасы + СтрокаПоДереву.КЗаказу;
				Иначе
					КЗаказуИтогЗаказы = КЗаказуИтогЗаказы + СтрокаПоДереву.КЗаказу;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СформироватьИнформационнуюСтроку(Строка, ОкругленоИтог, КЗаказуИтог, КЗаказуИтогЗапасы, КЗаказуИтогЗаказы, Запасы);
	
КонецПроцедуры

// Обновляет реквизит формы ИнформационнаяСтрока
//
// Параметры:
//  Строка				 - ДанныеФормыКоллекция - источник данных для формирования информационной строки
//  ОкругленоИтог		 - Число - итогое значение по округлению
//  КЗаказуИтог			 - Число - итогое значение по количеству к заказу
//  КЗаказуИтогЗапасы	 - Число - итогое значение по количеству к заказу таблицы Запасы
//  КЗаказуИтогЗаказы	 - Число - итогое значение по количеству к заказу таблицы Заказы
//  Запасы				 - Булево - Признак того, что вызов процедуры производится на шаге Запасы
&НаКлиенте
Процедура СформироватьИнформационнуюСтроку(Строка, ОкругленоИтог, КЗаказуИтог, КЗаказуИтогЗапасы, КЗаказуИтогЗаказы, Запасы)

	Шрифт = Элементы.ИнформационнаяСтрока.Шрифт;
	ШрифтЖирный = Новый Шрифт(Шрифт, , , Истина);
	ШрифтКурсив = Новый Шрифт(Шрифт, , , , Истина);
	
	ИнформационнаяСтрокаМассив = Новый Массив();
	
	Если Строка = Неопределено Тогда
		ИнформационнаяСтрокаМассив.Добавить(НСтр("ru='Строка не выбрана';uk='Рядок не вибраний'"));
	Иначе
	
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(Строка.Номенклатура), , , ,
			ПолучитьНавигационнуюСсылку(Строка.Номенклатура)));
		
		Если НЕ Строка.Характеристика.Пустая() Тогда
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(", "));
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(Строка.Характеристика), , , ,
				ПолучитьНавигационнуюСсылку(Строка.Характеристика)));
				
		КонецЕсли;
			
		Если НЕ Строка.Склад.Пустая() Тогда
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(", "));
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(Строка.Склад), , , ,
				ПолучитьНавигационнуюСсылку(Строка.Склад)));
		
		КонецЕсли;
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(": "));
		
		Если Запасы Тогда
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='К заказу по запасам:';uk='До замовлення по запасах:'")));
		Иначе
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Всего к заказу:';uk='Всього до замовлення:'")));
		КонецЕсли;
		
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(КЗаказуИтог) + " ", ШрифтЖирный));
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(Строка.ЕдиницаИзмерения), ШрифтЖирный));
		
		Если НЕ Запасы И ОкругленоИтог > 0 Тогда
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='(по запасам:';uk='(по запасах:'")));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(КЗаказуИтогЗапасы), ШрифтЖирный));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(", "));
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='по заказам:';uk='по замовленнях:'")));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(КЗаказуИтогЗаказы), ШрифтЖирный));
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока("), "));
			
		Иначе
			
			ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(", "));
			
		КонецЕсли;
		
		Если ОкругленоИтог > 0 И ИспользоватьУпаковки Тогда
			
			СсылкаУпаковка = "ОткрытьФормуВыбораУпаковки";
			
			// Вывод информации о упаковке.
			Если Строка.УпаковкаЗаказа.Пустая() Тогда
				Если Строка.ИспользоватьУпаковки 
					И ЕстьДоступКИзменениюУпаковки Тогда
					Упаковка = НСтр("ru='<задать упаковку для округления>';uk='<задати упаковку для округлення>'");
					ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Упаковка + " ", ШрифтКурсив, , , СсылкаУпаковка));
				КонецЕсли;
			Иначе
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Округлено до:';uk='Округлено до:'")));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(ОкругленоИтог) + " ", ШрифтЖирный));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(Строка.ЕдиницаИзмерения) + ", ", ШрифтЖирный));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='(Упаковка:';uk='(Упаковка:'"), ШрифтКурсив));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
				
				Упаковка = Строка(Строка.УпаковкаЗаказа);
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Упаковка, ШрифтКурсив, , , СсылкаУпаковка));
				ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока("), ", ШрифтКурсив));
			КонецЕсли;
		КонецЕсли;
		
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='На сумму:';uk='На суму:'")));
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" "));
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(Строка(ОкругленоИтог * Строка.ЦенаВВалютеУправленческогоУчета), ШрифтЖирный));
		ИнформационнаяСтрокаМассив.Добавить(Новый ФорматированнаяСтрока(" " + ВалютаУправленческогоУчета, ШрифтЖирный));
		
	КонецЕсли;
		
	ИнформационнаяСтрока = Новый ФорматированнаяСтрока(ИнформационнаяСтрокаМассив);

КонецПроцедуры

// Индексирует таблицу, определяемую параметром Запасы
// Повторяющиеся строки по ключу Номенклатура, Характеристика, Склад сворачиваются
// в один корневой элемент дерева ИндексыПоиска
//
// Параметры:
//  Запасы	 - Булево - Признак того, что вызов процедуры производится на шаге Запасы
&НаСервере
Процедура ЗаполнитьДеревоИндексов(Запасы)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ВыгрузитьНоменклатуруСИдентификаторамиСтрок(Объект.Запасы)); 
	Запрос.УстановитьПараметр("ТаблицаЗаказы", ВыгрузитьНоменклатуруСИдентификаторамиСтрок(Объект.ЗаказыКОбеспечению));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.ДатаПоставки   КАК ДатаПоставки,
		|	Таблица.Индекс         КАК Индекс
		|ПОМЕСТИТЬ ВтТаблицаЗапасы
		|ИЗ
		|	&ТаблицаЗапасы КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.ДатаПоставки   КАК ДатаПоставки,
		|	Таблица.Индекс         КАК Индекс
		|ПОМЕСТИТЬ ВтТаблицаЗаказы
		|ИЗ
		|	&ТаблицаЗаказы КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Индекс         КАК Индекс,
		|	Таблица.ДатаПоставки   КАК ДатаПоставки,
		|	ИСТИНА                 КАК ЭтоЗапасы
		|ИЗ
		|	ВтТаблицаЗапасы КАК Таблица
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Индекс         КАК Индекс,
		|	Таблица.ДатаПоставки   КАК ДатаПоставки,
		|	ЛОЖЬ                   КАК ЭтоЗапасы
		|ИЗ
		|	ВтТаблицаЗаказы КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад, ДатаПоставки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Коллекция = ИндексыПоиска.ПолучитьЭлементы();
	Коллекция.Очистить();
	
	Ключ = Новый Структура("Номенклатура, Характеристика, Склад");
	Пока Выборка.Следующий() Цикл
		
		Если Ключ.Номенклатура <> Выборка.Номенклатура Или Ключ.Характеристика <> Выборка.Характеристика Или Ключ.Склад <> Выборка.Склад Тогда
			
			ЗаполнитьЗначенияСвойств(Ключ, Выборка);
			Корень = Коллекция.Добавить();
			Строки = Корень.ПолучитьЭлементы();
			
		КонецЕсли;
		
		ТаблицаФормы = ?(Выборка.ЭтоЗапасы, Объект.Запасы, Объект.ЗаказыКОбеспечению);
		
		НоваяСтрока = Строки.Добавить();
		НоваяСтрока.ИДСтроки      = ТаблицаФормы[Выборка.Индекс].ПолучитьИдентификатор(); 
		НоваяСтрока.ТаблицаЗапасы = Выборка.ЭтоЗапасы; 
		
		ТаблицаФормы[Выборка.Индекс].ИДИндекса = Корень.ПолучитьИдентификатор();
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНоменклатуруСИдентификаторамиСтрок(ТаблицаФормы)
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений();
	ТаблицаВыгрузки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыгрузки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыгрузки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаВыгрузки.Колонки.Добавить("ДатаПоставки",   Новый ОписаниеТипов("Дата"));
	ТаблицаВыгрузки.Колонки.Добавить("Индекс",         Новый ОписаниеТипов("Число"));
	
	ВсегоСтрок = ТаблицаФормы.Количество() - 1;
	Для Индекс = 0 По ВсегоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаФормы[Индекс];
		ВыгруженнаяСтрока = ТаблицаВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ВыгруженнаяСтрока, СтрокаТаблицы);
		ВыгруженнаяСтрока.Индекс = Индекс;
		
	КонецЦикла;
	Возврат ТаблицаВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьУпаковкуКлиент(ИмяТаблицы)

	Поставка = Элементы[ИмяТаблицы].ТекущиеДанные;

	ЕдиницыИзмерения = Новый Массив();
	ЕдиницыИзмерения.Добавить(Поставка.ЕдиницаИзмерения);
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Владелец", Поставка.Номенклатура));
	ПараметрыФормы.Вставить("ЕдиницыИзмерения", ЕдиницыИзмерения);
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораУпаковкиЕдиницы", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

// Распространяет по таблицам Запасы и ЗаказыКОбеспечению изменение упаковки
// Записывает изменение упаковки в базу данных
//
// Параметры:
//  ИДИндекса		 - Число - Идентификатор корня в дереве ИндексыПоиска, по ветвям которого работает алгоритм
//  Упаковка		 - СправочникСсылка.УпаковкиЕдиницыИзмерения - новое значение упаковки
&НаСервере
Процедура ЗаполнитьЗаписатьУпаковкуПоДеревуИндексов(ИДИндекса, Упаковка)
	
	Если Упаковка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислительИЗнаменательУпаковки = Новый Структура("Числитель, Знаменатель", 1, 1);
	
	// Выбор единицы измерения означает команду на очищение
	Если Упаковка.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		ЧислительИЗнаменательУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Упаковка, "Числитель, Знаменатель");
	Иначе
		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Корень = ИндексыПоиска.НайтиПоИдентификатору(ИДИндекса);
	
	// Обход всех соответствующих строк в обеих таблицах, с заменой упаковки и коэффициента
	Коллекция = Корень.ПолучитьЭлементы();
	Строка = Неопределено;
	
	Если Коллекция.Количество() > 0 Тогда
		Строка = ?(Коллекция[0].ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(Коллекция[0].ИДСтроки),
			Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(Коллекция[0].ИДСтроки));
	КонецЕсли;
	
	Если Строка <> Неопределено Тогда
		// Запись изменения в регистр сведений ТоварныеОграничения
		Набор = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
		Набор.Отбор.Номенклатура.Установить(Строка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Строка.Характеристика);
		Набор.Отбор.Склад.Установить(Строка.Склад);
		
		Набор.Прочитать();
		ДанныеИзменены = Ложь;
		Если Набор.Количество() > 0 Тогда
			
			Запись = Набор[0];
			Если Не ЗначениеЗаполнено(Запись.Группировка) Тогда
				
				Запись.УпаковкаЗаказа = Упаковка;
				Набор.Записать();
				ДанныеИзменены = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
			Запись.УпаковкаЗаказа = Упаковка;
			Набор.Записать();
			ДанныеИзменены = Истина;
			
		КонецЕсли;
		
		Если ДанныеИзменены Тогда
			
			Для Каждого Ветвь Из Коллекция Цикл
				
				Строка = ?(Ветвь.ТаблицаЗапасы, Объект.Запасы.НайтиПоИдентификатору(Ветвь.ИДСтроки),
					Объект.ЗаказыКОбеспечению.НайтиПоИдентификатору(Ветвь.ИДСтроки));
				
				Строка.УпаковкаЗаказа = Упаковка;
				Строка.ЧислительУпаковки = ЧислительИЗнаменательУпаковки.Числитель;
				Строка.ЗнаменательУпаковки = ЧислительИЗнаменательУпаковки.Знаменатель;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает дерево ИндексыПоиска полностью, либо только записи ссылающиеся на таблицу ЗаказыКОбеспечению
//
// Параметры:
//  Запасы	 - Булево - Признак того, что вызов процедуры производится на шаге Запасы
&НаКлиенте
Процедура ОчиститьДеревоИндексов(Запасы)
	
	Корни = ИндексыПоиска.ПолучитьЭлементы();
	
	// Таблица Запасы - первая. Ее очищение по кнопке Назад равнозначно полной очистке таблицы
	Если Запасы Тогда
		Корни.Очистить();
	КонецЕсли;
	
	Количество = Корни.Количество() - 1;
	Для н = 0 По Количество Цикл
		
		ИндексКорня = Количество - н;
		Корень = Корни[ИндексКорня];
		
		Ветви = Корень.ПолучитьЭлементы();
		КоличествоВетвей = Ветви.Количество() - 1;
		
		// Удаление ветвей связанных с таблицей ЗаказыКОбеспечению
		Для м = 0 По КоличествоВетвей Цикл
			
			ИндексВетви = КоличествоВетвей - м;
			Ветвь = Ветви[ИндексВетви];
			Если Ветвь.ТаблицаЗапасы = Ложь Тогда
				Ветви.Удалить(ИндексВетви);
			КонецЕсли;
			
		КонецЦикла;
		
		// Если из корня удалены все ветви, удаляется корень
		Если Корень.ПолучитьЭлементы().Количество() = 0 Тогда
			Корни.Удалить(ИндексКорня);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОкруглитьПередСозданиемЗаказов(Таблица)
	
	Таблица.Сортировать("Номенклатура, Характеристика, Склад, ДатаПоставки", Новый СравнениеЗначений());
	
	ПоляКлюча = "Номенклатура, Характеристика, Склад";
	Ключ = Новый Структура(ПоляКлюча);
	
	Остаток = 0;
	ОкругленнаяСтрока = Неопределено;
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		
		Строка = Таблица[ИндексСтроки];
		
		Если Не Строка.Отметка 
			Или Строка.КЗаказу = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменилсяКлюч = ОбеспечениеКлиентСервер.ИзменилсяКлюч(Ключ, Строка);
		ЗаполнитьЗначенияСвойств(Ключ, Строка);
		
		Если ИзменилсяКлюч Тогда
			
			Если Остаток > 0 Тогда
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОкругленнаяСтрока);
				НоваяСтрока.КЗаказу = Остаток;
				НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
			
			Округлено = Округлить(Строка.КЗаказу, ?(Строка.ЧислительУпаковки = 0 Или Строка.ЗнаменательУпаковки = 0, 1, Строка.ЧислительУпаковки / Строка.ЗнаменательУпаковки),
				Строка.ТипЕдиницыИзмерения);
			Остаток = Округлено - Строка.КЗаказу;
			ОкругленнаяСтрока = Строка;
			
		Иначе
			
			Если Остаток >= Строка.КЗаказу Тогда
				Строка.ДатаПоставки = ОкругленнаяСтрока.ДатаПоставки;
				Остаток = Остаток - Строка.КЗаказу;
			Иначе
				
				КЗаказуДляНовойОкругленнойСтроки = Строка.КЗаказу - Остаток;
				
				// Частично относим на дату округленной строки, новой строкой
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КЗаказу = Остаток;
				НоваяСтрока.ДатаПоставки = ОкругленнаяСтрока.ДатаПоставки;
				
				// Частично оставляем на дату текущей строки
				Строка.КЗаказу = КЗаказуДляНовойОкругленнойСтроки;
				
				Округлено = Округлить(Строка.КЗаказу, ?(Строка.ЧислительУпаковки = 0 Или Строка.ЗнаменательУпаковки = 0, 1, Строка.ЧислительУпаковки / Строка.ЗнаменательУпаковки),
					Строка.ТипЕдиницыИзмерения);
				Остаток = Округлено - Строка.КЗаказу;
				ОкругленнаяСтрока = Строка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Остаток > 0 Тогда
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОкругленнаяСтрока);
		НоваяСтрока.КЗаказу = Остаток;
		НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Производительность

&НаКлиенте
Процедура ИсточникОбеспеченияЗаказыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ИсточникОбеспеченияЗаказы.ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияЗапасыПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ОбеспечениеПотребностей.Форма.Элемент.ИсточникОбеспеченияЗапасы.ПриИзменении");
	
КонецПроцедуры

#КонецОбласти

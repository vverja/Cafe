#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыСборокТоваров[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.Шапка);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ИнициализироватьДокумент();
	Серии.Очистить();
	ВидЗапасов           = Неопределено;
	ЗаказНаСборку        = Неопределено;
	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		
		Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей("Индекс,Номенклатура,Назначение");
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭтотОбъект);
		СтрокаТаблицы.Индекс = 0;
		НазначениеПоУмолчанию = НаправленияДеятельностиСервер.ТолкающееНазначение(НаправлениеДеятельности);
		НакладныеСервер.ЗаполнитьНазначенияВТабличнойЧасти(Таблица, НазначениеПоУмолчанию);
		Назначение = Таблица[0].Назначение;
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.КодСтроки = 0;
			СтрокаТЧ.ИдентификаторСтроки = "";
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.КодСтроки = 0;
			СтрокаТЧ.ИдентификаторСтроки = "";
			СтрокаТЧ.Назначение = Справочники.Назначения.ПустаяСсылка();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ТипыОпераций = Перечисления.ТипыОперацийЗаказаНаСборку;
	
	// Проверка количества в шапке.
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Объект";	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

	// Проверка количества в т.ч. товары.
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	// Если сборка - доля стоимости не нужна.
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоляСтоимости");
	КонецЕсли;

	// Если накладная по заказу - то код строки должен быть заполнен.
	Если Не ЗначениеЗаполнено(ЗаказНаСборку) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	КонецЕсли;

	// Проверка характеристки в шапке.
	Если Не ИспользоватьХарактеристики Или Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
		
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ВестиУчетПоГТД = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(Номенклатура).ВестиУчетПоГТД;
	КонтролироватьНомераГТД = ЗапретитьПоступлениеТоваровБезНомеровГТД И (
		(ТипОперации = ТипыОпераций.СборкаИзКомплектующих) И ВестиУчетПоГТД И Не ЗначениеЗаполнено(НомерГТД)
		ИЛИ
		(ТипОперации = ТипыОпераций.РазборкаНаКомплектующие) И НЕ ВестиУчетПоГТД);
	
	Если (ТипОперации = ТипыОпераций.СборкаИзКомплектующих) И ЗначениеЗаполнено(НоменклатураОсновногоКомпонента) Тогда
		ПредставлениеОсновногоКомпонента =
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(НоменклатураОсновногоКомпонента, ХарактеристикаОсновногоКомпонента);
			
		ОтборТоваров =
			Новый Структура("Номенклатура, Характеристика", НоменклатураОсновногоКомпонента, ХарактеристикаОсновногоКомпонента);
		Если Товары.НайтиСтроки(ОтборТоваров).Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Основной компонент `%НазваниеТовара%` в товарах не найден.
                |Укажите основной компонент из перечня товаров'
                |;uk='Основний компонент `%НазваниеТовара%` в товарах не знайдено.
                |Вкажіть основний компонент з переліку товарів'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеОсновногоКомпонента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		КонецЕсли;
		
		Если КонтролироватьНомераГТД Тогда
			КомпонентВестиУчетПоГТД =
				Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(НоменклатураОсновногоКомпонента).ВестиУчетПоГТД;
			Если Не КомпонентВестиУчетПоГТД Тогда
				ТекстСообщения = НСтр("ru='По основному компоненту `%НазваниеТовара%` учет по ГТД не ведется.
                    |Укажите основной компонент, по которому ведется учет по ГТД.'
                    |;uk='По основному компоненту `%НазваниеТовара%` облік по ВМД не ведеться.
                    |Вкажіть основний компонент, за яким ведеться облік по ВМД.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеОсновногоКомпонента);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПроверятьХарактеристикуКомпонента = 
			ИспользоватьХарактеристики И Не ЗначениеЗаполнено(ХарактеристикаОсновногоКомпонента)
			И Справочники.Номенклатура.ХарактеристикиИспользуются(НоменклатураОсновногоКомпонента);
		Если ПроверятьХарактеристикуКомпонента Тогда
			ПроверяемыеРеквизиты.Добавить("ХарактеристикаОсновногоКомпонента");
		КонецЕсли;
		
	ИначеЕсли (ТипОперации = ТипыОпераций.СборкаИзКомплектующих) И КонтролироватьНомераГТД Тогда
		ТекстСообщения = НСтр("ru='Требуется определять страну происхождения и номера ГТД комплекта.
            |Укажите основной компонент, по которому ведется учет по ГТД.'
            |;uk='Потрібно визначати країну походження та номери ВМД комплекту.
            |Вкажіть основний компонент, за яким ведеться облік за ВМД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		
	ИначеЕсли (ТипОперации = ТипыОпераций.РазборкаНаКомплектующие) И КонтролироватьНомераГТД Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Компоненты.НомерСтроки КАК НомерСтроки,
			|	Компоненты.Номенклатура,
			|	Компоненты.НомерГТД
			|ПОМЕСТИТЬ Компоненты
			|ИЗ &Компоненты КАК Компоненты;
			|
			|ВЫБРАТЬ
			|	Компоненты.НомерСтроки,
			|	ИСТИНА КАК ВестиУчетПоГТД
			|ИЗ Компоненты КАК Компоненты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Описания
			|		ПО Описания.Ссылка = Компоненты.Номенклатура
			|ГДЕ Описания.ВестиУчетПоГТД И Компоненты.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
			|");
		Запрос.УстановитьПараметр("Компоненты", Товары.Выгрузить( , "НомерСтроки, Номенклатура, НомерГТД"));
		Выборка = Запрос.Выполнить().Выбрать();
		ТекстСообщения = НСтр("ru='Не заполнена колонка ""Номер ГТД"" в строке %НомерСтроки% списка ""Товары"".';uk='Не заповнена колонка ""Номер ВМД"" в рядку %НомерСтроки% списку ""Товари"".'");
		Пока Выборка.Следующий() Цикл
			ИтоговоеСообщение = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИтоговоеСообщение, , Поле, "Объект", Отказ);
		КонецЦикла;
	КонецЕсли;

	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОтборТоваров = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	ПредставлениеКомплекта = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Номенклатура, Характеристика);
	Для Каждого СтрокаТЧ из Товары.НайтиСтроки(ОтборТоваров) Цикл
		ТекстСообщения = НСтр("ru='В строке %НомерСтроки% указан товар ""%НазваниеТовара%"".
            |Один и тот же товар не может являться и комплектом, и комплектующей одновременно.'
            |;uk='У рядку %НомерСтроки% вказаний товар ""%НазваниеТовара%"".
            |Той самий товар не може бути і комплектом, і комплектуючої одночасно.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеКомплекта);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
	
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Отказ, МассивНепроверяемыхРеквизитов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка, Отказ, МассивНепроверяемыхРеквизитов);
		
	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ТипОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
    КонецЕсли;
    
    ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
    
    Если Организация = Справочники.Организации.УправленческаяОрганизация Тогда
        НалоговоеНазначение = Справочники.Организации.НалоговоеНазначениеУправленческойОрганизации();
    Иначе    
    	ОрганизацияПлательщикНДС = Справочники.Организации.ПлательщикНДС(Организация, Дата);
    	Если НЕ ОрганизацияПлательщикНДС Тогда
    		НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
    	Иначе
    		Если Не ЗначениеЗаполнено(НалоговоеНазначение) Тогда
    			НалоговоеНазначение = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);	
    		КонецЕсли; 
    	КонецЕсли; 	
    КонецЕсли; 
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Объект";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	// Очистка неиспользуемых реквизитов в тч Товары
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		Для Каждого Товар Из Товары Цикл
			Если Товар.ДоляСтоимости <> 0 Тогда
				Товар.ДоляСтоимости = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.НомерГТД) Тогда
				Товар.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий.Шапка, Номенклатура);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий.ТЧ, Номенклатура);

	Если ЗначениеЗаполнено(НоменклатураОсновногоКомпонента) Тогда
		НомерГТД = Неопределено;
	КонецЕсли;
	
	// Заполнение видов запасов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(Перечисления.ХозяйственныеОперации.СборкаТоваров, Склад, Подразделение, Неопределено);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
		Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
			ШапкаДокумента = СформироватьТаблицуТоваров();
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ШапкаДокумента, МестаУчета);
			АналитикаУчетаНоменклатуры = ШапкаДокумента[0].АналитикаУчетаНоменклатуры;
		КонецЕсли;
		ЗаполнитьВидыЗапасов(Отказ);
		ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ДанныеВнутреннихДокументов.ЗаписатьДанныеДокумента(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Заполнение по заказу(-ам).
	СтруктураЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		СтруктураЗаполнения = ДанныеЗаполнения;
		
	КонецЕсли;
	
	Если СтруктураЗаполнения <> Неопределено Тогда
		
		ЗаполнитьПоЗаказу(СтруктураЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СборкаТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	// Движения по оборотным регистрам управленческого учета 
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);

	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Склад;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказу(СтруктураЗаполнения)
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	
	ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("РеквизитыШапки", СтруктураЗаполнения.РеквизитыШапки);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
	ПараметрыЗаполнения.Вставить("НеСопоставлятьСЗаказомПоСериям", Ложь);
	ПараметрыЗаполнения.Вставить("ПоляДляДозаполненияПоДаннымОрдера", "");
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", СтруктураЗаполнения.ЗаполнятьПоОрдеру);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ПолучитьТоварШапки", Истина);
	
	// Заполнение шапки
	Документы.СборкаТоваров.ЗаполнитьШапкуДокументаПоЗаказу(ЭтотОбъект, ПараметрыЗаполнения, МассивЗаказов);
	
	ПараметрыЗаполнения.Вставить("НакладнаяПоЗаказу", Истина);
	
	ТаблицаНакладная = Документы.СборкаТоваров.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка);
	ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыНаСборку.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов);
	ТаблицаКОформлениюОстаток.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	ТаблицаНакладнаяПоШапке = Документы.СборкаТоваров.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка, Истина);
	ТаблицаКОформлениюОстатокПоШапке = РегистрыНакопления.ЗаказыНаСборку.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, Истина);
	ТаблицаКОформлениюОстатокПоШапке.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		
		СтруктураПерезаполнения = РегистрыСведений.ДанныеВнутреннихДокументов.ПолучитьДанныеДляПерезаполненияНакладной(
			ЭтотОбъект.Ссылка, МассивЗаказов, ТаблицаНакладная, ТаблицаКОформлениюОстаток, ПараметрыЗаполнения);
			
		ПараметрыЗаполнения.НеСопоставлятьСЗаказомПоСериям = Истина;
		ПараметрыЗаполнения.ПоляДляДозаполненияПоДаннымОрдера = "Серия";
		
		СтруктураПерезаполненияПоШапке = РегистрыСведений.ДанныеВнутреннихДокументов.ПолучитьДанныеДляПерезаполненияНакладнойПоПриемке(
			ЭтотОбъект.Ссылка, МассивЗаказов, ТаблицаНакладнаяПоШапке, ТаблицаКОформлениюОстатокПоШапке, ПараметрыЗаполнения);
		
	Иначе
		
		// Для разборки в ТЧ Комплектующие могут использоваться только 14 серии (Учет себестоимости по сериям (при планировании отгрузки))
		ПараметрыЗаполнения.НеСопоставлятьСЗаказомПоСериям = Истина;
		ПараметрыЗаполнения.ПоляДляДозаполненияПоДаннымОрдера = "Серия";
		
		СтруктураПерезаполнения = РегистрыСведений.ДанныеВнутреннихДокументов.ПолучитьДанныеДляПерезаполненияНакладнойПоПриемке(
			ЭтотОбъект.Ссылка, МассивЗаказов, ТаблицаНакладная, ТаблицаКОформлениюОстаток, ПараметрыЗаполнения);
			
		ПараметрыЗаполнения.РазворачиватьПоКодамСтрок = Ложь;
		ПараметрыЗаполнения.НеСопоставлятьСЗаказомПоСериям = Ложь;
		
		СтруктураПерезаполненияПоШапке = РегистрыСведений.ДанныеВнутреннихДокументов.ПолучитьДанныеДляПерезаполненияНакладной(
			ЭтотОбъект.Ссылка, МассивЗаказов, ТаблицаНакладнаяПоШапке, ТаблицаКОформлениюОстатокПоШапке, ПараметрыЗаполнения);
		
	КонецЕсли;
	
	ТаблицаНовыхСтрок = Документы.СборкаТоваров.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(СтруктураПерезаполнения.ТаблицаНовыхСтрок);
	
	ТЧПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьТоварыНакладной(
		СтруктураПерезаполнения.ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, ЭтотОбъект.Товары, 
			ПараметрыЗаполнения.КлючевыеПоля + ", " + ПараметрыЗаполнения.ДополнительныеПоляТаблицыДокумента);
	Документы.СборкаТоваров.ПерезаполнитьТоварыВШапкеРМВнутреннееТовародвижение(ЭтотОбъект, СтруктураПерезаполненияПоШапке, МассивЗаказов[0]);
	
	// Информация о шапке документа актуализирована в ЗаполнитьШапкуДокументаПоЗаказу
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Подразделение", Подразделение);
	
	Документы.СборкаТоваров.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
	// Заполнение серий.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	// Обновление статусов указания серий.
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Ложь);
	
	// Заполнение заказа в шапке.
	ЗаказНаСборку = МассивЗаказов[0];
	
	// Заполнение долей стоимости
	Если (Не СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		Или СтруктураЗаполнения.ЗаполнятьПоОрдеру = Ложь)
		И ЗначениеЗаполнено(ЗаказНаСборку)
		И ЗначениеЗаполнено(ВариантКомплектации)
		И ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		ЗаполнитьДолиСтоимости();
	КонецЕсли;
	
	ПорядокОформления = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
	ПорядокСначалаОрдера = ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера;
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		И СтруктураЗаполнения.ЗаполнятьПоОрдеру
		И ПорядокСначалаОрдера Тогда
		Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДолиСтоимости()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.КОформлениюРасход
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюПоступления.Обороты(, , , ДокументПоступления = &ЗаказНаСборку) КАК Таблица";
	
	// Заполнение долей стоимости возможно только если нет накладных (создается первая)
	Если Запрос.Выполнить().Пустой() Тогда
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.УстановитьПараметр("КоличествоКомплектов", Количество);
		Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Характеристика, Упаковка, Количество"));
		
		// Доля стоимости заполняется если состав строк и количество совпадает с вариантом комплектации
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки     КАК НомерСтроки,
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Упаковка        КАК Упаковка,
		|	Таблица.Количество      КАК Количество
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Товары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура              КАК Номенклатура,
		|	Таблица.Характеристика            КАК Характеристика,
		|	Таблица.Упаковка                  КАК Упаковка,
		|	&КоличествоКомплектов * Таблица.Количество * ВЫБОР
		|		КОГДА Таблица.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ / Таблица.Ссылка.Количество КАК Количество,
		|	Таблица.ДоляСтоимости             КАК ДоляСтоимости
		|ПОМЕСТИТЬ ВтВариантыКомплектации
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &ВариантКомплектации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Упаковка          КАК Упаковка,
		|	СУММА(Набор.Количество) КАК Количество,
		|	СУММА(Набор.ЕстьТовар)  КАК ЕстьТовар
		|ПОМЕСТИТЬ ВтЕстьОтклонения
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура    КАК Номенклатура,
		|		Таблица.Характеристика  КАК Характеристика,
		|		Таблица.Упаковка        КАК Упаковка,
		|		-Таблица.Количество     КАК Количество,
		|		1                       КАК ЕстьТовар
		|	ИЗ
		|		ВтТовары КАК Таблица
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура    КАК Номенклатура,
		|		Таблица.Характеристика  КАК Характеристика,
		|		Таблица.Упаковка        КАК Упаковка,
		|		Таблица.Количество      КАК Количество,
		|		1                       КАК ЕстьТовар
		|	ИЗ
		|		ВтВариантыКомплектации КАК Таблица) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) <> 0 ИЛИ СУММА(Набор.ЕстьТовар) <> 2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки               КАК НомерСтроки,
		|	ТаблицаКомплектации.ДоляСтоимости КАК ДоляСтоимости
		|ИЗ
		|	ВтТовары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВариантыКомплектации КАК ТаблицаКомплектации
		|		ПО Таблица.Номенклатура = ТаблицаКомплектации.Номенклатура
		|			И Таблица.Характеристика = ТаблицаКомплектации.Характеристика
		|			И Таблица.Упаковка = ТаблицаКомплектации.Упаковка
		|			И Таблица.Количество = ТаблицаКомплектации.Количество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОтклонения КАК ВтЕстьОтклонения
		|		ПО ИСТИНА
		|	
		|ГДЕ
		|	НЕ ТаблицаКомплектации.ДоляСтоимости ЕСТЬ NULL
		|	И ВтЕстьОтклонения.ЕстьТовар ЕСТЬ NULL";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыТовары = Товары[Выборка.НомерСтроки - 1];
			СтрокаТаблицыТовары.ДоляСтоимости = Выборка.ДоляСтоимости;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Ответственный    = Пользователи.ТекущийПользователь();
	ДатаРаспоряжения = ТекущаяДата();
	Подразделение    = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров") Тогда
		Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция СформироватьТаблицуТоваров()
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ТаблицаТоваров = Товары.Выгрузить();
	Иначе
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		ТаблицаТоваров.Колонки.Добавить("АналитикаУчетаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
		ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
		ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ЭтотОбъект);
		ТаблицаТоваров[0].НомерСтроки = 1;
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции

// Функция формирует временные данных документа.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Дата КАК Дата,
	|	&Склад КАК Склад,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		ТОГДА
	|			&Подразделение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		ТОГДА
	|			&Менеджер
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И Сделки.ОбособленныйУчетТоваровПоСделке ТОГДА
	|			&Сделка
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|		КОНЕЦ КАК Сделка,
	|
	|	&НоменклатураОсновногоКомпонента КАК НоменклатураОсновногоКомпонента,
	|	&ХарактеристикаОсновногоКомпонента КАК ХарактеристикаОсновногоКомпонента
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК Подразделения
	|	ПО
	|		Подразделения.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК Сделки
	|	ПО
	|		Сделки.Ссылка = &Сделка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&ЗаказНаСборку КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НазначениеЗаказа.Ссылка, ЗаказКакНазначение.Ссылка) КАК Назначение
	|	
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.Заказ = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|	ПО
	|		ТаблицаТоваров.Заказ = ЗаказНаСборку.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК НазначениеЗаказа
	|	ПО
	|		ЗаказНаСборку.Назначение = НазначениеЗаказа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК ЗаказКакНазначение
	|	ПО
	|		ЗаказНаСборку.НазначениеТовары = ЗаказКакНазначение.Ссылка
	|
	|ГДЕ
	|	ТаблицаТоваров.Заказ <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ ТоварыЗаказа.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаСборку.Назначение   КАК Назначение
	|	
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|	ПО
	|		ТаблицаТоваров.Заказ = ЗаказНаСборку.Ссылка
	|		И ТаблицаТоваров.Номенклатура = ЗаказНаСборку.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ЗаказНаСборку.Характеристика
	|
	|ГДЕ
	|	ТаблицаТоваров.Заказ <> Неопределено
	|	И ЗаказНаСборку.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	(ВЫБОР КОГДА ТаблицаТоваров.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		ЕСТЬNULL(Аналитика.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ) КАК АналитикаУчетаНоменклатуры,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначение КАК ЦелевоеНалоговоеНазначение,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ВЫБОР
	|		КОГДА &ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	|			ТОГДА ТаблицаТоваров.Назначение
	|		ИНАЧЕ ЕСТЬNULL(ТоварыПодЗаказ.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|	КОНЕЦ КАК Назначение,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия = ТаблицаТоваров.Серия
	|		И Аналитика.Склад = &Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.ДоляСтоимости КАК ДоляСтоимости,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.ДоляСтоимости КАК ДоляСтоимости,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ТаблицаКомплектов
	|ИЗ
	|	&ТаблицаКомплектов КАК ТаблицаТоваров
	|ГДЕ
	|	&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	|	И ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	Комплект.Ссылка КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	&Сделка КАК Сделка,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|	ЕСТЬNULL(Заказ.Назначение, &Назначение) КАК Назначение,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначение КАК ЦелевоеНалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	Неопределено КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	Справочник.Номенклатура КАК Комплект
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку КАК Заказ
	|	ПО
	|		Заказ.Ссылка = &ЗаказНаСборку
	|ГДЕ
	|	Комплект.Ссылка = &Номенклатура
	|	И &ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	&Сделка КАК Сделка,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|	ТаблицаТоваров.Назначение,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначение КАК ЦелевоеНалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	Неопределено КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции
	|ИЗ
	|	ТаблицаКомплектов КАК ТаблицаТоваров
	|ГДЕ
	|	&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	| 
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ВидЗапасов", ВидЗапасов);
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);	
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("НоменклатураОсновногоКомпонента", НоменклатураОсновногоКомпонента);
	Запрос.УстановитьПараметр("ХарактеристикаОсновногоКомпонента", ХарактеристикаОсновногоКомпонента);
	
	ТаблицаТоваров = СформироватьТаблицуТоваров();
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ТаблицаТоваров));
	Запрос.УстановитьПараметр("ТаблицаКомплектов", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Назначение, АналитикаУчетаНоменклатуры, ВидЗапасов"));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		ТОГДА
	|			ДанныеДокумента.Подразделение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		ТОГДА
	|			ДанныеДокумента.Ответственный
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И Сделки.ОбособленныйУчетТоваровПоСделке ТОГДА
	|			ДанныеДокумента.Сделка
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|		КОНЕЦ КАК Сделка,
	|	ДанныеДокумента.НалоговоеНазначение КАК НалоговоеНазначение,
	|	
	|	ДанныеДокумента.НоменклатураОсновногоКомпонента,
	|	ДанныеДокумента.ХарактеристикаОсновногоКомпонента
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.СборкаТоваров КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
	|		ПО Подразделения.Ссылка = ДанныеДокумента.Подразделение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами КАК Сделки
	|		ПО Сделки.Ссылка = ДанныеДокумента.Сделка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.НалоговоеНазначение <> СохраненныеДанные.НалоговоеНазначение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.НоменклатураОсновногоКомпонента <> СохраненныеДанные.НоменклатураОсновногоКомпонента ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.ХарактеристикаОсновногоКомпонента <> СохраненныеДанные.ХарактеристикаОсновногоКомпонента ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение КАК Назначение,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

// Процедура формирует временную таблицу доступных видов запасов.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Сделка,
		Ответственный,
		Подразделение,
		МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Процедура формирует сообщения об ошибках заполнения видов запасов документа.
//
// Параметры:
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок заполнения
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сборка превышает остаток товара организации %1 на складе %2 %3 %4';uk='Збирання перевищує залишок товару організацію %1 на складі %2 %3 %4'"),
			Организация,
			Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
			
		ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='
                |по налоговому назначению %1'
                |;uk='
                |за податковим призначенням %1'"),
				НалоговоеНазначение );
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
			
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура: %1, недостаточно %2 %3';uk='Номенклатура: %1, недостатньо %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' с указанными кодами УКТВЭД и номерами ГТД';uk=' з зазначеними кодами УКТЗЕД та номерами ВМД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "Виды запасов документа".
//
// Параметры:
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	Если Не Проведен ИЛИ ПерезаполнитьВидыЗапасов
		ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		ИЛИ ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	Тогда
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
			Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		ДополнительныеСвойства.Вставить("КонтролироватьОстаткиТоваровОрганизацийПоНалоговымНазначениям", Истина);
 		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц, ДополнительныеСвойства, ВидыЗапасов, ТаблицаОшибок, Отказ);
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
		МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
		Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
			ВидыЗапасов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Неопределено, ВидЗапасов);
 		ЗаполнитьКоличестваКомплектов();
		ЗаполнитьНоменклатуруГТДНоменклатуры(Отказ);
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
		ЗаполнитьНомераГТД();
	КонецЕсли;
	
КонецПроцедуры

// Заполняем ВидыЗапасов.КоличествоКомплектов для сборки
Процедура ЗаполнитьКоличестваКомплектов()
	Если Не ЗначениеЗаполнено(НоменклатураОсновногоКомпонента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ШтучнаяЕдиница
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (ЕдиницыИзмерения.Ссылка = Номенклатура.ЕдиницаИзмерения)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШтучнаяЕдиница = ?(Выборка.Следующий(), Выборка.ШтучнаяЕдиница, Истина);
	Разрядность = ?(ШтучнаяЕдиница, 0, Метаданные().Реквизиты.Количество.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
	
	МаксимальныйЗапас = Неопределено;
	РаспределеноКомплектов = 0.;
	ВсегоЗапасов = 0.;
		
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ
	|	Строки.НомерСтроки - 1 КАК Индекс,
	|	Строки.АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ Строки
	|ИЗ
	|	&Строки КАК Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Строки.Индекс
	|ИЗ
	|	Строки КАК Строки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО (Аналитика.КлючАналитики = Строки.АналитикаУчетаНоменклатуры)
	|ГДЕ
	|	Аналитика.Номенклатура = &Номенклатура
	|	И Аналитика.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Строки.Индекс";
	ЗапросАналитик.УстановитьПараметр("Строки", ВидыЗапасов);
	ЗапросАналитик.УстановитьПараметр("Номенклатура", НоменклатураОсновногоКомпонента);
	ЗапросАналитик.УстановитьПараметр("Характеристика", ХарактеристикаОсновногоКомпонента);
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запас = ВидыЗапасов[Выборка.Индекс];
		Если Не ЗначениеЗаполнено(МаксимальныйЗапас) Или  МаксимальныйЗапас.Количество < Запас.Количество Тогда
			МаксимальныйЗапас = Запас;
		КонецЕсли;
		ВсегоЗапасов = ВсегоЗапасов + Запас.Количество;
	КонецЦикла;
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Запас = ВидыЗапасов[Выборка.Индекс];
		Запас.КоличествоКомплекта = Окр(Количество * Запас.Количество / ВсегоЗапасов, Разрядность);
		РаспределеноКомплектов = РаспределеноКомплектов + Запас.КоличествоКомплекта;
	КонецЦикла;
	
	МаксимальныйЗапас.КоличествоКомплекта = МаксимальныйЗапас.КоличествоКомплекта + (Количество - РаспределеноКомплектов);
КонецПроцедуры

// Заполняем Товары.НомерГТД для разборки
Процедура ЗаполнитьНомераГТД()
	Если Не ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйЗапас = Неопределено;
	Для Каждого Запас Из ВидыЗапасов Цикл
		Если (Не ЗначениеЗаполнено(МаксимальныйЗапас) Или МаксимальныйЗапас.Количество < Запас.Количество)
			И ЗначениеЗаполнено(Запас.НомерГТД)
		Тогда
			МаксимальныйЗапас = Запас;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(МаксимальныйЗапас) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(Товары.НомерСтроки - 1) КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ Товары
		|ИЗ &Товары КАК Товары;
		|
		|ВЫБРАТЬ НомерСтроки
		|ИЗ Товары КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
		|		ПО Н.Ссылка = Товары.Номенклатура
		|ГДЕ Н.ВестиУчетПоГТД И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|");
	Запрос.УстановитьПараметр("Товары", Товары);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Товары[Выборка.НомерСтроки].НомерГТД = МаксимальныйЗапас.НомерГТД;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	// Контроль при перепроведении и отмене проведения.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;

	Если ЗаказНаСборку <> Документы.ЗаказНаСборку.ПустаяСсылка() // По заказу 
		Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	// При проведении выполняется контроль превышения свободного остатка и заказа.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ЗаказыНаСборку);

		ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
		Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		 Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда

			Массив.Добавить(Движения.ТоварыНаСкладах);

		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Назначения.Заказ КАК ЗаказКлиента
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.Ссылка В(&МассивНазначений)
	|	И НЕ &Сборка
	|	И (Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
	|			ИЛИ Назначения.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаТоваров.Назначение.Заказ
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Ссылка = &Ссылка
	|	И &Сборка
	|	И (СборкаТоваров.Назначение.Заказ ССЫЛКА Документ.ЗаказКлиента
	|			ИЛИ СборкаТоваров.Назначение.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаТоваров.Назначение.Заказ";
	
	Запрос.УстановитьПараметр("МассивНазначений", ЭтотОбъект.Товары.ВыгрузитьКолонку("Назначение"));
	Запрос.УстановитьПараметр("Сборка", ЭтотОбъект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	МассивЗависимыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуУчетаПартийВШапкеДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	0                    КАК НомерСтроки,
	|	&Номенклатура        КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО         КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО         КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО         КАК Контрагент,
	|	&НалоговоеНазначение КАК НалоговоеНазначение
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НалоговоеНазначение"	, НалоговоеНазначение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц,, АналитикаУчетаПартий);
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО				 	КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО 					КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО 					КАК Контрагент,
	|	&НалоговоеНазначение  			КАК НалоговоеНазначение ,
	|	ТаблицаТоваров.АналитикаУчетаПартий
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
	                	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров"		, Товары.Выгрузить(, 
														"НомерСтроки, Номенклатура, АналитикаУчетаПартий"));
	Запрос.УстановитьПараметр("НалоговоеНазначение"	, НалоговоеНазначение);
				
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
		
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ЗаполнитьАналитикуУчетаПартийВШапкеДокумента();
	Иначе			
		ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруГТДНоменклатуры(Отказ)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураОсновногоКомпонента) Или Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВидыЗапасов.НомерГТД КАК Справочник.НоменклатураГТД) КАК НоменклатураГТД,
	|	ВидыЗапасов.КоличествоКомплекта КАК КоличествоКомплекта
	|ПОМЕСТИТЬ Строки
	|ИЗ
	|	&ВидыЗапасов КАК ВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	Строки.НоменклатураГТД.КодУКТВЭД КАК КодУКТВЭД,
	|	Строки.НоменклатураГТД.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	Строки КАК Строки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Комплект
	|		ПО (Комплект.Ссылка = &Номенклатура)
	|ГДЕ
	|	Комплект.ВестиУчетПоГТД
	|	И Строки.КоличествоКомплекта <> 0
	|	И Строки.НоменклатураГТД <> ЗНАЧЕНИЕ(Справочник.НоменклатураГТД.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Номенклатура КАК Номенклатура,
	|	ИсходныеДанные.КодУКТВЭД КАК КодУКТВЭД,
	|	ИсходныеДанные.НомерГТД КАК НомерГТД,
	|	ЕСТЬNULL(Номенклатура_ГТД.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураГТД.ПустаяСсылка)) КАК НоменклатураГТД
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГТД КАК Номенклатура_ГТД
	|		ПО ИсходныеДанные.Номенклатура = Номенклатура_ГТД.Владелец
	|			И ИсходныеДанные.КодУКТВЭД = Номенклатура_ГТД.КодУКТВЭД
	|			И ИсходныеДанные.НомерГТД = Номенклатура_ГТД.НомерГТД
	|			И (НЕ Номенклатура_ГТД.ПометкаУдаления)";
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасов.Выгрузить());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура); 
	 
	ТекстОшибки = "";
	
	ВыборкаНоменклатураГТД = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНоменклатураГТД.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаНоменклатураГТД.НоменклатураГТД) Тогда
			НомерГТД = ВыборкаНоменклатураГТД.НоменклатураГТД;
			Прервать;
		КонецЕсли;
				
		НоменклатураГТДОбъект = Справочники.НоменклатураГТД.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НоменклатураГТДОбъект, ВыборкаНоменклатураГТД);
		НоменклатураГТДОбъект.Владелец = ВыборкаНоменклатураГТД.Номенклатура;
		КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнформационнойБазы();
		НоменклатураГТДОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Элемент создан автоматически при проведении документа ""%1""';uk='Елемент створений автоматично при проведенні документа ""%1""'"), 
			?(Ссылка.Пустая(),  ЛокализацияПовтИсп.ОбработатьПереводы(Ссылка.Метаданные().ПолноеИмя(), Ссылка.Метаданные().Имя, КодЯзыка), Локализация.ПолучитьЛокализованноеПредставление(Ссылка, КодЯзыка)));

		Попытка
			НоменклатураГТДОбъект.Записать();
			НомерГТД = НоменклатураГТДОбъект.Ссылка;
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при автоматическом создании кода УКТВЭД и номера ГТД: %1';uk='Помилка при автоматичному створенні коду УКТЗЕД та номеру ВМД: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			Отказ = Истина;
		КонецПопытки;
		Прервать;
	КонецЦикла;
	
   	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка);
		Возврат;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли

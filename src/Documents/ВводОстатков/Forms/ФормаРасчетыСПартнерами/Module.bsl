
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	
	ЗаполнитьСпискиВыбораТипаРасчетов();
	ЗаполнитьТипОбъектаРасчетов();
	УстановитьПараметрыВыбораПартнера();
	УстановитьВидимость();

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");

	УстановитьЗаголовок();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьТипОбъектаРасчетов();
	УстановитьЗаголовок();
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата) 
		И Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов")
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НДСИсходящийКлиент.ПредупредитьПередСозданиемВводаОстатков(Объект.Дата, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.Префикс = СформироватьПрефикс(Объект.Организация);
	// Обновим реквизит ОрганизацияПлательщикНДС
	ЗаполнитьДанныеФормы();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Объект.Организация Тогда
		ОчиститьНомерДатуОбъектовРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнятьНомераПриИзменении(Элемент)

	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	Если НЕ ЗначениеЗаполнено(Объект.Префикс) И Объект.ДополнятьНомера Тогда
		Объект.Префикс = СформироватьПрефикс(Объект.Организация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	
	ЗаполнитьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженностьКлиентов

&НаКлиенте
Процедура ЗадолженностьКлиентовПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.ЗадолженностьКлиентов.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) и ТипЗнч(РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, РасчетныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьКлиентов.ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадолженностьПередПоставщиками

&НаКлиенте
Процедура ЗадолженностьПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) и ТипЗнч(РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, РасчетныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);
	РассчитатьПредположительнуюСуммуНалоговогоКредита(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьПоставщикам.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамНетНалоговойНакладнойПриИзменении(Элемент)	
	СтрокаТаблицы = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	Если НЕ СтрокаТаблицы.НетНалоговойНакладной Тогда
		СтрокаТаблицы.ДатаВходящегоДокумента = Дата(1,1,1);
		СтрокаТаблицы.ВзаиморасчетыЗакрыты = Ложь;
		СтрокаТаблицы.СуммаНДС = 0;
	Иначе
		РассчитатьПредположительнуюСуммуНалоговогоКредита(СтрокаТаблицы);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыКлиентов

&НаКлиенте
Процедура АвансыКлиентовПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.АвансыКлиентов.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) и ТипЗнч(РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, РасчетныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыКлиентов.ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыПоставщикам

&НаКлиенте
Процедура АвансыПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзменении(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, ТекущаяСтрокаИдентификатор);
	

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.АвансыПоставщикам.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) и ТипЗнч(РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ПоказатьЗначение(Неопределено, РасчетныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтрокаТаблицы = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);
	РассчитатьПредположительнуюСуммуНалоговогоКредита(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыПоставщикам.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНетНалоговойНакладнойПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.АвансыПоставщикам.ТекущиеДанные;
	Если НЕ СтрокаТаблицы.НетНалоговойНакладной Тогда
		СтрокаТаблицы.ДатаВходящегоДокумента = Дата(1,1,1);
	КонецЕсли;	
	РассчитатьПредположительнуюСуммуНалоговогоКредита(СтрокаТаблицы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьКлиентовНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьКлиентовДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыКлиентовНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыКлиентовДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамДатаРасчетногоДокумента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыСПартнерами.ТипРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Договор с контрагентом';uk='Договір з контрагентом'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыСПартнерами.РасчетныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьКлиентовТипРасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамТипРасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыКлиентовТипРасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамТипРасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыСПартнерами.РасчетныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указан';uk='Не зазначений'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьКлиентовНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьКлиентовДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыКлиентовНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыКлиентовДатаРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамНомерРасчетногоДокумента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамДатаРасчетногоДокумента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыСПартнерами.РасчетныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамДатаВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамВзаиморасчетыЗакрыты.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗадолженностьПоставщикамСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПоставщикамДатаВходящегоДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасчетыСПартнерами.НетНалоговойНакладной");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()

	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	ЗаполнитьДанныеФормы();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	ТипРасчетногоДокумента = Неопределено;
	УстановитьТипДокументаРасчетов(ТипРасчетногоДокумента);
	Если ТипРасчетногоДокумента <> Неопределено Тогда
		МетаданныеРасчетногоДокумента = ТипРасчетногоДокумента.Метаданные();
	КонецЕсли;
	Элементы.ГруппаЗадолженностьКлиентов.Видимость				= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов;
	Элементы.ГруппаЗадолженностьПередПоставщиками.Видимость		= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками;
	Элементы.ГруппаАвансыКлиентов.Видимость						= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов;
	Элементы.ГруппаАвансыПоставщикам.Видимость					= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = Документы.ВводОстатков.ЗаголовокДокументаПоТипуОперации(Объект.Ссылка,
																						  Объект.Номер,
																						  Объект.Дата,
																						  Объект.ТипОперации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипаРасчетов()

	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
		СписокВыбора = Элементы.АвансыКлиентовТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СПокупателем, НСтр("ru='Договор с покупателем';uk='Договір з покупцем'")); 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
				СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СКомиссионером, НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'")); 
			КонецЕсли;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(), НСтр("ru='Заказ клиента';uk='Замовлення клієнта'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(), НСтр("ru='Заявка на возврат товаров от клиента';uk='Заявка на повернення товарів від клієнта'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка(), НСтр("ru='Реализация товаров и услуг';uk='Реалізація товарів і послуг'"));
		СписокВыбора.Добавить(Документы.РеализацияУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru='Реализация услуг и прочих активов';uk='Реалізація послуг та інших активів'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов Тогда
		СписокВыбора = Элементы.ЗадолженностьКлиентовТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СПокупателем, НСтр("ru='Договор с покупателем';uk='Договір з покупцем'")); 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
				СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СКомиссионером, НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'")); 
				СписокВыбора.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), НСтр("ru='Отчет комиссионера о продажах';uk='Звіт комісіонера про продажі'"));
				СписокВыбора.Добавить(Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), НСтр("ru='Отчет комиссионера о списании';uk='Звіт комісіонера про списання'"));
			КонецЕсли;
		КонецЕсли;
		СписокВыбора.Добавить(Документы.АктВыполненныхРабот.ПустаяСсылка(), НСтр("ru='Акт выполненных работ';uk='Акт виконаних робіт'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(), НСтр("ru='Заказ клиента';uk='Замовлення клієнта'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(), НСтр("ru='Заявка на возврат товаров от клиента';uk='Заявка на повернення товарів від клієнта'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомитенту.ПустаяСсылка(), НСтр("ru='Отчет комитенту о продажах';uk='Звіт комітенту про продажі'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка(), НСтр("ru='Реализация товаров и услуг';uk='Реалізація товарів і послуг'"));
		СписокВыбора.Добавить(Документы.РеализацияУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru='Реализация услуг и прочих активов';uk='Реалізація послуг та інших активів'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		СписокВыбора = Элементы.АвансыПоставщикамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
		СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СПоставщиком, НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'")); 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СКомитентом, НСтр("ru='Договор с комитентом';uk='Договір з комітентом'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.Импорт, НСтр("ru='Договор импорта';uk='Договір імпорту'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			СписокВыбора.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(), НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'"));
		СписокВыбора.Добавить(Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru='Поступление услуг и прочих активов';uk='Надходження послуг та інших активів'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
		СписокВыбора = Элементы.ЗадолженностьПоставщикамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru='Не указан';uk='Не зазначений'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru='Выбрать объект расчетов';uk='Вибрати об''єкт розрахунків'"));
		СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СПоставщиком, НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.Импорт, НСтр("ru='Договор импорта';uk='Договір імпорту'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
			СписокВыбора.Добавить(Перечисления.ТипыДоговоров.СКомитентом, НСтр("ru='Договор с комитентом';uk='Договір з комітентом'"));
			СписокВыбора.Добавить(Документы.ОтчетКомитенту.ПустаяСсылка(), НСтр("ru='Отчет комитенту о продажах';uk='Звіт комітенту про продажі'"));
			СписокВыбора.Добавить(Документы.ОтчетКомитентуОСписании.ПустаяСсылка(), НСтр("ru='Отчет комитенту о списании';uk='Звіт комітенту про списання'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			СписокВыбора.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(), НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), НСтр("ru='Отчет комиссионера о продажах';uk='Звіт комісіонера про продажі'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'"));
		СписокВыбора.Добавить(Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru='Поступление услуг и прочих активов';uk='Надходження послуг та інших активів'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипОбъектаРасчетов(ИдентификаторСтроки = Неопределено)
    
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаРасчетов.НомерСтроки,
	|	ТаблицаРасчетов.РасчетныйДокумент
	|ПОМЕСТИТЬ ВТСтрокиСДоговором
	|ИЗ
	|	&ТаблицаРасчетов КАК ТаблицаРасчетов
	|ГДЕ
	|	ТаблицаРасчетов.РасчетныйДокумент ССЫЛКА Справочник.ДоговорыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтрокиСДоговором.НомерСтроки,
	|	ДоговорыКонтрагентов.ТипДоговора
	|ИЗ
	|	ВТСтрокиСДоговором КАК ВТСтрокиСДоговором
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТСтрокиСДоговором.РасчетныйДокумент = ДоговорыКонтрагентов.Ссылка
	|");
		
	Если НЕ ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		Запрос.УстановитьПараметр("ТаблицаРасчетов", Объект.РасчетыСПартнерами.Выгрузить());
	Иначе
		МассивСтрок = Новый Массив;
		ОбрабатываемаяСтрока = Объект.РасчетыСПартнерами.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСтрок.Добавить(ОбрабатываемаяСтрока);
		Запрос.УстановитьПараметр("ТаблицаРасчетов", Объект.РасчетыСПартнерами.Выгрузить(МассивСтрок));
	КонецЕсли;

	ТЗСтрокиСДоговором = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТаблицы Из Объект.РасчетыСПартнерами Цикл
		Если ЗначениеЗаполнено(ИдентификаторСтроки) И СтрокаТаблицы <> ОбрабатываемаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СтрокаСДоговором = ТЗСтрокиСДоговором.Найти(СтрокаТаблицы.НомерСтроки, "НомерСтроки");
			Если СтрокаСДоговором <> Неопределено Тогда
				ТипДоговора = СтрокаСДоговором.ТипДоговора;
			Иначе
				ТипДоговора = Неопределено;
			КонецЕсли;
			Если ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с покупателем';uk='Договір з покупцем'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с давальцем';uk='Договір з давальцем'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комитентом';uk='Договір з комітентом'");
			ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор импорта';uk='Договір імпорту'");
			Иначе
				ХозяйственнаяОперацияДоговора = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(Объект.ТипОперации);
				Если ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с покупателем';uk='Договір з покупцем'");
				ИначеЕсли ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
			Если СтрокаТаблицы.РасчетныйДокумент = Перечисления.ТипыДоговоров.СПокупателем Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с покупателем';uk='Договір з покупцем'");
			ИначеЕсли СтрокаТаблицы.РасчетныйДокумент = Перечисления.ТипыДоговоров.СКомиссионером Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'");
			ИначеЕсли СтрокаТаблицы.РасчетныйДокумент = Перечисления.ТипыДоговоров.СПоставщиком Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'");
			ИначеЕсли СтрокаТаблицы.РасчетныйДокумент = Перечисления.ТипыДоговоров.СКомитентом Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комитентом';uk='Договір з комітентом'");
			ИначеЕсли СтрокаТаблицы.РасчетныйДокумент = Перечисления.ТипыДоговоров.Импорт Тогда
				СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор импорта';uk='Договір імпорту'");
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьНомер(Номер)

	Если Не Объект.ДополнятьНомера
		Или Не ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	Результат = СокрЛП(Номер);
	Разделитель = ?(ПустаяСтрока(Объект.Префикс), "", "-");
	Начало = СокрЛП(Объект.Префикс) + Разделитель;
	Пока СтрДлина(Результат) < 11 - СтрДлина(Начало) Цикл
		Результат = "0" + Результат;
	КонецЦикла;
	Если СтрДлина(Результат) <= 11 - СтрДлина(Начало) Тогда
		Результат = Начало + Результат;
	КонецЕсли;
	Номер = Результат;

КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)

	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатков.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзменении(Партнер, Контрагент, ИдентификаторСтроки)
	
	ПартнерПриИзмененииСервер(Партнер, Контрагент);
	ПроверитьДокументРасчетовСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)

	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	Реквизиты = Новый Структура("Организация,Номер,Дата,Ссылка,Представление, Партнер, Контрагент");
	Если ТипЗнч(ТекущиеДанные.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Реквизиты.Вставить("Валюта","ВалютаВзаиморасчетов");
	Иначе
		Реквизиты.Вставить("Валюта");
	КонецЕсли;
	Если ТипЗнч(ТекущиеДанные.РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.РасчетныйДокумент,Реквизиты);
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация)
		 И ЗначенияРеквизитов.Организация <> Объект.Организация Тогда
			ТекстСообщения = НСтр("ru='В документе ""%РасчетныйДокумент%"" организация отличается от указанной во вводе остатков';uk='В документі ""%РасчетныйДокумент%"" організація відрізняється від зазначеної у введенні залишків'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РасчетныйДокумент = Неопределено;
			УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
			Возврат;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущиеДанные.Партнер)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Партнер)
		 И ЗначенияРеквизитов.Партнер <> ТекущиеДанные.Партнер Тогда
			ТекстСообщения = НСтр("ru='В %Объект% ""%РасчетныйДокумент%"" партнер отличается от указанного во вводе остатков';uk='У %Объект% ""%РасчетныйДокумент%"" партнер відрізняється від зазначеного у введенні залишків'");
			Если ТипЗнч(ТекущиеДанные.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='договоре';uk='договорі'"));
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='документе';uk='документі'"));
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РасчетныйДокумент = Неопределено;
			ТекущиеДанные.НомерРасчетногоДокумента = "";
			ТекущиеДанные.ДатаРасчетногоДокумента = "";
			УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
			Возврат;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Контрагент)
		 И ЗначенияРеквизитов.Контрагент <> ТекущиеДанные.Контрагент Тогда
			ТекстСообщения = НСтр("ru='В %Объект% ""%РасчетныйДокумент%"" контрагент отличается от указанного во вводе остатков';uk='У %Объект% ""%РасчетныйДокумент%"" контрагент відрізняється від зазначеного у введенні залишків'");
			Если ТипЗнч(ТекущиеДанные.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='договоре';uk='договорі'"));
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Объект%", НСтр("ru='документе';uk='документі'"));
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РасчетныйДокумент = Неопределено;
			ТекущиеДанные.НомерРасчетногоДокумента = "";
			ТекущиеДанные.ДатаРасчетногоДокумента = "";
			УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Контрагент = ЗначенияРеквизитов.Контрагент;
		ТекущиеДанные.Партнер = ЗначенияРеквизитов.Партнер;
		ТекущиеДанные.РасчетныйДокумент			= ЗначенияРеквизитов.Ссылка;
		ТекущиеДанные.ДатаРасчетногоДокумента	= ЗначенияРеквизитов.Дата;
		ТекущиеДанные.НомерРасчетногоДокумента	= ЗначенияРеквизитов.Номер;
		ТекущиеДанные.ВалютаВзаиморасчетов = ЗначенияРеквизитов.Валюта;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТипДокументаРасчетов(РасчетныйДокумент)

	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	РасчетныйДокумент = Документы.ВводОстатков.ТипДокументаРасчетовПоТипуОперации(Объект.ТипОперации);

КонецПроцедуры

&НаКлиенте
Процедура НомерРасчетногоДокументаПриИзменении(ТекущиеДанные)

	ДополнитьНомер(ТекущиеДанные.НомерРасчетногоДокумента);
	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ТипЗнч(ТекущиеДанные.РасчетныйДокумент) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

Конецпроцедуры

&НаКлиенте
Процедура ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные)

	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ТипЗнч(ТекущиеДанные.РасчетныйДокумент) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПодобратьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта,ВалютаРегламентированногоУчета, ДатаДокумента)

	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	Возврат СуммаРегл;

КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.Сумма <> 0 Тогда
		СуммаПриИзменении(ТекущиеДанные);
		РассчитатьПредположительнуюСуммуНалоговогоКредита(ТекущиеДанные);
	КонецЕсли; 

Конецпроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.Сумма;
	Иначе
		ТекущиеДанные.СуммаРегл = РассчитатьСуммуРегл(ТекущиеДанные.Сумма, ТекущиеДанные.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)

	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы)

	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "Выбор" Тогда
		
		ЗначенияОтбора = Новый Структура;
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Партнер",     СтрокаТаблицы.Партнер);
		ЗначенияОтбора.Вставить("Контрагент",  СтрокаТаблицы.Контрагент);
		ЗначенияОтбора.Вставить("Валюта",      СтрокаТаблицы.ВалютаВзаиморасчетов);
		НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
		НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
		
		Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов")
			Или Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов") Тогда
				НастройкиВыбора.ЭтоРасчетыСКлиентами = Истина;
		КонецЕсли;
		
		Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов")
			Или Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками") Тогда
				НастройкиВыбора.ЗапретитьДоговорыПоДокументам = Истина;
		КонецЕсли;
		
		ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтрокаТаблицы.ДатаРасчетногоДокумента = ВыбранноеЗначение.Дата;
		СтрокаТаблицы.НомерРасчетногоДокумента = ВыбранноеЗначение.Номер;
		СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение.Заказ;
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		ЗаполнитьТипОбъектаРасчетов(СтрокаТаблицы.ПолучитьИдентификатор());
	Иначе
		Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> ТипЗнч(ВыбранноеЗначение)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ПеречислениеСсылка.ТипыДоговоров")
				  И СтрокаТаблицы.РасчетныйДокумент <> ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = НСтр("ru='Не указан';uk='Не зазначений'") Тогда
				СтрокаТаблицы.РасчетныйДокумент = Неопределено;
				СтрокаТаблицы.ТипРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				СтрокаТаблицы.НомерРасчетногоДокумента = "";
			Иначе
				СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение;
				Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с покупателем';uk='Договір з покупцем'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комиссионером';uk='Договір з комісіонером'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с поставщиком';uk='Договір з постачальником'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор с комитентом';uk='Договір з комітентом'");
				ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт") Тогда
					СтрокаТаблицы.ТипРасчетов = НСтр("ru='Договор импорта';uk='Договір імпорту'");
				Иначе
					СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()

	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(Истина);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Клиент",Новый ФиксированныйМассив(МассивНастроек));
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.ЗадолженностьКлиентовПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.АвансыКлиентовПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(Истина);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Поставщик",Новый ФиксированныйМассив(МассивНастроек));
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.ЗадолженностьПоставщикамПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.АвансыПоставщикамПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПрефикс(Организация)

	Возврат Документы.ВводОстатков.УстановитьПрефикс(Организация);

КонецФункции

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)

	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНомерДатуОбъектовРасчета()
	
	Для Каждого Элемент Из Объект.РасчетыСПартнерами Цикл
		Элемент.НомерРасчетногоДокумента = "";
		Элемент.ДатаРасчетногоДокумента = Дата(1,1,1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы()

	ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата);	
	
	ЭтоРасчетыСКонтрагентами = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками;
	Если ЭтоРасчетыСКонтрагентами Тогда
		Элементы.АвансыПоставщикамНетНалоговойНакладной.Видимость 	      = ОрганизацияПлательщикНДС;
		Элементы.АвансыПоставщикамДатаВходящегоДокумента.Видимость 	      = ОрганизацияПлательщикНДС;
		Элементы.ЗадолженностьПоставщикамНетНалоговойНакладной.Видимость  = ОрганизацияПлательщикНДС;
		Элементы.ЗадолженностьПоставщикамДатаВходящегоДокумента.Видимость = ОрганизацияПлательщикНДС;
		Элементы.ЗадолженностьПоставщикамВзаиморасчетыЗакрыты.Видимость   = ОрганизацияПлательщикНДС;
		Элементы.ЗадолженностьПоставщикамСуммаНДС.Видимость   			  = ОрганизацияПлательщикНДС;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПредположительнуюСуммуНалоговогоКредита(СтрокаТаблицы)

	Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками")
		И СтрокаТаблицы.НетНалоговойНакладной И СтрокаТаблицы.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
		ИЛИ 
		Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам")
		И НЕ СтрокаТаблицы.НетНалоговойНакладной И СтрокаТаблицы.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		
		//Так как ставки НДС в табличной части нет, то будем считать, что основная ставка 20%
		ОсновнаяСтавка = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ОсновнаяСтавка); 
		СтрокаТаблицы.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаРегл, ТекПроцентНДС, Истина);
		
	Иначе
		СтрокаТаблицы.СуммаНДС = 0;
	КонецЕсли;

КонецПроцедуры
 

#КонецОбласти

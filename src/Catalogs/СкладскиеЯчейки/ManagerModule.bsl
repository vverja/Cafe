#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	Результат.Добавить("Владелец");
 	Результат.Добавить("Помещение");

	Возврат Результат;

КонецФункции

//Возвращает складскую ячейку с типом "Отгрузки", если она одна в справочнике
//	
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, по которому нужно найти зону отгрузки
//		Помещение - СправочникСсылка.СкладскиеПомещения - помещение, по которому нужно найти зону отгрузки
//					если по складу не ведется учет по скласким помещениям, нужно передать пустую ссылку
//		ЗонаОтгрузки - СправочникСсылка.СкладскиеЯчейки - если этот параметр заполнен и ячейка принадлежит переданным
//					складу и помещению, то возвращается значение этого параметра
//	Возвращаемое значение:
//		СправочникСсылка.СкладскиеЯчейки
//
Функция ЗонаОтгрузкиПоУмолчанию(Склад,Помещение,ЗонаОтгрузки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗонаОтгрузки) Тогда
		РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗонаОтгрузки, "Владелец,Помещение,ТипСкладскойЯчейки");
		
		Если РеквизитыЯчейки.Владелец = Склад
			И РеквизитыЯчейки.Помещение = Помещение
			И РеквизитыЯчейки.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Отгрузка Тогда
			Возврат ЗонаОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СпрЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|ГДЕ
	|	(НЕ СпрЯчейки.ПометкаУдаления)
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Отгрузка)
	|	И СпрЯчейки.Владелец = &Склад
	|	И СпрЯчейки.Помещение = &Помещение");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		Ячейка = Выборка.Ячейка;
	Иначе
		Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ячейка;

КонецФункции

//Возвращает складскую ячейку с типом "Приемка", если она одна в справочнике
//	
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, по которому нужно найти зону приемки
//		Помещение - СправочникСсылка.СкладскиеПомещения - помещение, по которому нужно найти зону приемки
//					если по складу не ведется учет по скласким помещениям, нужно передать пустую ссылку
//		ЗонаПриемки - СправочникСсылка.СкладскиеЯчейки - если этот параметр заполнен и ячейка принадлежит переданным
//					складу и помещению, то возвращается значение этого параметра
//
//	Возвращаемое значение:
//		СправочникСсылка.СкладскиеЯчейки
//
Функция ЗонаПриемкиПоУмолчанию(Склад,Помещение,ЗонаПриемки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗонаПриемки) Тогда
		РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗонаПриемки, "Владелец,Помещение,ТипСкладскойЯчейки");
		
		Если РеквизитыЯчейки.Владелец = Склад
			И РеквизитыЯчейки.Помещение = Помещение
			И РеквизитыЯчейки.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Приемка Тогда
			Возврат ЗонаПриемки;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СпрЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|ГДЕ
	|	(НЕ СпрЯчейки.ПометкаУдаления)
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|	И СпрЯчейки.Владелец = &Склад
	|	И СпрЯчейки.Помещение = &Помещение");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий() Тогда
		Ячейка = Выборка.Ячейка;
	Иначе
		Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ячейка;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Печать этикеток
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокСкладскиеЯчейки";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ЭтикеткиСкладскиеЯчейки";
	КомандаПечати.Представление = НСтр("ru='Печать этикеток';uk='Друк етикеток'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
